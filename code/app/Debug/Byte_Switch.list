
Byte_Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08001800  08001800  00001800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e18  080018c0  080018c0  000018c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080056d8  080056d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  00010174  2**0
                  CONTENTS
  4 .ARM          00000000  080057ec  080057ec  00010174  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ec  080057ec  00010174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000057ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  200000c0  080057f4  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000914  20000174  080058a8  00010174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  080058a8  00010a88  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac6  00000000  00000000  0001019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359f  00000000  00000000  00023c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00027208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00027ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018997  00000000  00000000  00028d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a99  00000000  00000000  000416cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009495c  00000000  00000000  00058168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002400  00000000  00000000  000ecb14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000c744  00000000  00000000  000eef14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080018c0 <__do_global_dtors_aux>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4c06      	ldr	r4, [pc, #24]	; (80018dc <__do_global_dtors_aux+0x1c>)
 80018c4:	7823      	ldrb	r3, [r4, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <__do_global_dtors_aux+0x1a>
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <__do_global_dtors_aux+0x20>)
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <__do_global_dtors_aux+0x16>
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <__do_global_dtors_aux+0x24>)
 80018d2:	e000      	b.n	80018d6 <__do_global_dtors_aux+0x16>
 80018d4:	bf00      	nop
 80018d6:	2301      	movs	r3, #1
 80018d8:	7023      	strb	r3, [r4, #0]
 80018da:	bd10      	pop	{r4, pc}
 80018dc:	20000174 	.word	0x20000174
 80018e0:	00000000 	.word	0x00000000
 80018e4:	080056ac 	.word	0x080056ac

080018e8 <frame_dummy>:
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <frame_dummy+0x14>)
 80018ea:	b510      	push	{r4, lr}
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <frame_dummy+0x10>
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <frame_dummy+0x18>)
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <frame_dummy+0x1c>)
 80018f4:	e000      	b.n	80018f8 <frame_dummy+0x10>
 80018f6:	bf00      	nop
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	00000000 	.word	0x00000000
 8001900:	20000178 	.word	0x20000178
 8001904:	080056ac 	.word	0x080056ac

08001908 <__udivsi3>:
 8001908:	2200      	movs	r2, #0
 800190a:	0843      	lsrs	r3, r0, #1
 800190c:	428b      	cmp	r3, r1
 800190e:	d374      	bcc.n	80019fa <__udivsi3+0xf2>
 8001910:	0903      	lsrs	r3, r0, #4
 8001912:	428b      	cmp	r3, r1
 8001914:	d35f      	bcc.n	80019d6 <__udivsi3+0xce>
 8001916:	0a03      	lsrs	r3, r0, #8
 8001918:	428b      	cmp	r3, r1
 800191a:	d344      	bcc.n	80019a6 <__udivsi3+0x9e>
 800191c:	0b03      	lsrs	r3, r0, #12
 800191e:	428b      	cmp	r3, r1
 8001920:	d328      	bcc.n	8001974 <__udivsi3+0x6c>
 8001922:	0c03      	lsrs	r3, r0, #16
 8001924:	428b      	cmp	r3, r1
 8001926:	d30d      	bcc.n	8001944 <__udivsi3+0x3c>
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	0209      	lsls	r1, r1, #8
 800192c:	ba12      	rev	r2, r2
 800192e:	0c03      	lsrs	r3, r0, #16
 8001930:	428b      	cmp	r3, r1
 8001932:	d302      	bcc.n	800193a <__udivsi3+0x32>
 8001934:	1212      	asrs	r2, r2, #8
 8001936:	0209      	lsls	r1, r1, #8
 8001938:	d065      	beq.n	8001a06 <__udivsi3+0xfe>
 800193a:	0b03      	lsrs	r3, r0, #12
 800193c:	428b      	cmp	r3, r1
 800193e:	d319      	bcc.n	8001974 <__udivsi3+0x6c>
 8001940:	e000      	b.n	8001944 <__udivsi3+0x3c>
 8001942:	0a09      	lsrs	r1, r1, #8
 8001944:	0bc3      	lsrs	r3, r0, #15
 8001946:	428b      	cmp	r3, r1
 8001948:	d301      	bcc.n	800194e <__udivsi3+0x46>
 800194a:	03cb      	lsls	r3, r1, #15
 800194c:	1ac0      	subs	r0, r0, r3
 800194e:	4152      	adcs	r2, r2
 8001950:	0b83      	lsrs	r3, r0, #14
 8001952:	428b      	cmp	r3, r1
 8001954:	d301      	bcc.n	800195a <__udivsi3+0x52>
 8001956:	038b      	lsls	r3, r1, #14
 8001958:	1ac0      	subs	r0, r0, r3
 800195a:	4152      	adcs	r2, r2
 800195c:	0b43      	lsrs	r3, r0, #13
 800195e:	428b      	cmp	r3, r1
 8001960:	d301      	bcc.n	8001966 <__udivsi3+0x5e>
 8001962:	034b      	lsls	r3, r1, #13
 8001964:	1ac0      	subs	r0, r0, r3
 8001966:	4152      	adcs	r2, r2
 8001968:	0b03      	lsrs	r3, r0, #12
 800196a:	428b      	cmp	r3, r1
 800196c:	d301      	bcc.n	8001972 <__udivsi3+0x6a>
 800196e:	030b      	lsls	r3, r1, #12
 8001970:	1ac0      	subs	r0, r0, r3
 8001972:	4152      	adcs	r2, r2
 8001974:	0ac3      	lsrs	r3, r0, #11
 8001976:	428b      	cmp	r3, r1
 8001978:	d301      	bcc.n	800197e <__udivsi3+0x76>
 800197a:	02cb      	lsls	r3, r1, #11
 800197c:	1ac0      	subs	r0, r0, r3
 800197e:	4152      	adcs	r2, r2
 8001980:	0a83      	lsrs	r3, r0, #10
 8001982:	428b      	cmp	r3, r1
 8001984:	d301      	bcc.n	800198a <__udivsi3+0x82>
 8001986:	028b      	lsls	r3, r1, #10
 8001988:	1ac0      	subs	r0, r0, r3
 800198a:	4152      	adcs	r2, r2
 800198c:	0a43      	lsrs	r3, r0, #9
 800198e:	428b      	cmp	r3, r1
 8001990:	d301      	bcc.n	8001996 <__udivsi3+0x8e>
 8001992:	024b      	lsls	r3, r1, #9
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	4152      	adcs	r2, r2
 8001998:	0a03      	lsrs	r3, r0, #8
 800199a:	428b      	cmp	r3, r1
 800199c:	d301      	bcc.n	80019a2 <__udivsi3+0x9a>
 800199e:	020b      	lsls	r3, r1, #8
 80019a0:	1ac0      	subs	r0, r0, r3
 80019a2:	4152      	adcs	r2, r2
 80019a4:	d2cd      	bcs.n	8001942 <__udivsi3+0x3a>
 80019a6:	09c3      	lsrs	r3, r0, #7
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d301      	bcc.n	80019b0 <__udivsi3+0xa8>
 80019ac:	01cb      	lsls	r3, r1, #7
 80019ae:	1ac0      	subs	r0, r0, r3
 80019b0:	4152      	adcs	r2, r2
 80019b2:	0983      	lsrs	r3, r0, #6
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d301      	bcc.n	80019bc <__udivsi3+0xb4>
 80019b8:	018b      	lsls	r3, r1, #6
 80019ba:	1ac0      	subs	r0, r0, r3
 80019bc:	4152      	adcs	r2, r2
 80019be:	0943      	lsrs	r3, r0, #5
 80019c0:	428b      	cmp	r3, r1
 80019c2:	d301      	bcc.n	80019c8 <__udivsi3+0xc0>
 80019c4:	014b      	lsls	r3, r1, #5
 80019c6:	1ac0      	subs	r0, r0, r3
 80019c8:	4152      	adcs	r2, r2
 80019ca:	0903      	lsrs	r3, r0, #4
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d301      	bcc.n	80019d4 <__udivsi3+0xcc>
 80019d0:	010b      	lsls	r3, r1, #4
 80019d2:	1ac0      	subs	r0, r0, r3
 80019d4:	4152      	adcs	r2, r2
 80019d6:	08c3      	lsrs	r3, r0, #3
 80019d8:	428b      	cmp	r3, r1
 80019da:	d301      	bcc.n	80019e0 <__udivsi3+0xd8>
 80019dc:	00cb      	lsls	r3, r1, #3
 80019de:	1ac0      	subs	r0, r0, r3
 80019e0:	4152      	adcs	r2, r2
 80019e2:	0883      	lsrs	r3, r0, #2
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d301      	bcc.n	80019ec <__udivsi3+0xe4>
 80019e8:	008b      	lsls	r3, r1, #2
 80019ea:	1ac0      	subs	r0, r0, r3
 80019ec:	4152      	adcs	r2, r2
 80019ee:	0843      	lsrs	r3, r0, #1
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d301      	bcc.n	80019f8 <__udivsi3+0xf0>
 80019f4:	004b      	lsls	r3, r1, #1
 80019f6:	1ac0      	subs	r0, r0, r3
 80019f8:	4152      	adcs	r2, r2
 80019fa:	1a41      	subs	r1, r0, r1
 80019fc:	d200      	bcs.n	8001a00 <__udivsi3+0xf8>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4152      	adcs	r2, r2
 8001a02:	4610      	mov	r0, r2
 8001a04:	4770      	bx	lr
 8001a06:	e7ff      	b.n	8001a08 <__udivsi3+0x100>
 8001a08:	b501      	push	{r0, lr}
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f806 	bl	8001a1c <__aeabi_idiv0>
 8001a10:	bd02      	pop	{r1, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)

08001a14 <__aeabi_uidivmod>:
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d0f7      	beq.n	8001a08 <__udivsi3+0x100>
 8001a18:	e776      	b.n	8001908 <__udivsi3>
 8001a1a:	4770      	bx	lr

08001a1c <__aeabi_idiv0>:
 8001a1c:	4770      	bx	lr
 8001a1e:	46c0      	nop			; (mov r8, r8)

08001a20 <__aeabi_f2uiz>:
 8001a20:	219e      	movs	r1, #158	; 0x9e
 8001a22:	b510      	push	{r4, lr}
 8001a24:	05c9      	lsls	r1, r1, #23
 8001a26:	1c04      	adds	r4, r0, #0
 8001a28:	f000 fc90 	bl	800234c <__aeabi_fcmpge>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d103      	bne.n	8001a38 <__aeabi_f2uiz+0x18>
 8001a30:	1c20      	adds	r0, r4, #0
 8001a32:	f000 fbf9 	bl	8002228 <__aeabi_f2iz>
 8001a36:	bd10      	pop	{r4, pc}
 8001a38:	219e      	movs	r1, #158	; 0x9e
 8001a3a:	1c20      	adds	r0, r4, #0
 8001a3c:	05c9      	lsls	r1, r1, #23
 8001a3e:	f000 fa45 	bl	8001ecc <__aeabi_fsub>
 8001a42:	f000 fbf1 	bl	8002228 <__aeabi_f2iz>
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	4460      	add	r0, ip
 8001a4e:	e7f2      	b.n	8001a36 <__aeabi_f2uiz+0x16>

08001a50 <__aeabi_fdiv>:
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	464f      	mov	r7, r9
 8001a54:	4646      	mov	r6, r8
 8001a56:	46d6      	mov	lr, sl
 8001a58:	0245      	lsls	r5, r0, #9
 8001a5a:	b5c0      	push	{r6, r7, lr}
 8001a5c:	0047      	lsls	r7, r0, #1
 8001a5e:	1c0c      	adds	r4, r1, #0
 8001a60:	0a6d      	lsrs	r5, r5, #9
 8001a62:	0e3f      	lsrs	r7, r7, #24
 8001a64:	0fc6      	lsrs	r6, r0, #31
 8001a66:	2f00      	cmp	r7, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_fdiv+0x1c>
 8001a6a:	e070      	b.n	8001b4e <__aeabi_fdiv+0xfe>
 8001a6c:	2fff      	cmp	r7, #255	; 0xff
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_fdiv+0x22>
 8001a70:	e075      	b.n	8001b5e <__aeabi_fdiv+0x10e>
 8001a72:	00eb      	lsls	r3, r5, #3
 8001a74:	2580      	movs	r5, #128	; 0x80
 8001a76:	04ed      	lsls	r5, r5, #19
 8001a78:	431d      	orrs	r5, r3
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	469a      	mov	sl, r3
 8001a80:	3f7f      	subs	r7, #127	; 0x7f
 8001a82:	0260      	lsls	r0, r4, #9
 8001a84:	0a43      	lsrs	r3, r0, #9
 8001a86:	4698      	mov	r8, r3
 8001a88:	0063      	lsls	r3, r4, #1
 8001a8a:	0e1b      	lsrs	r3, r3, #24
 8001a8c:	0fe4      	lsrs	r4, r4, #31
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04e      	beq.n	8001b30 <__aeabi_fdiv+0xe0>
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d046      	beq.n	8001b24 <__aeabi_fdiv+0xd4>
 8001a96:	4642      	mov	r2, r8
 8001a98:	00d0      	lsls	r0, r2, #3
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	04d2      	lsls	r2, r2, #19
 8001a9e:	4302      	orrs	r2, r0
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	3b7f      	subs	r3, #127	; 0x7f
 8001aa6:	0031      	movs	r1, r6
 8001aa8:	1aff      	subs	r7, r7, r3
 8001aaa:	464b      	mov	r3, r9
 8001aac:	4061      	eors	r1, r4
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d900      	bls.n	8001ab8 <__aeabi_fdiv+0x68>
 8001ab6:	e0b5      	b.n	8001c24 <__aeabi_fdiv+0x1d4>
 8001ab8:	486e      	ldr	r0, [pc, #440]	; (8001c74 <__aeabi_fdiv+0x224>)
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	58c3      	ldr	r3, [r0, r3]
 8001abe:	469f      	mov	pc, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4698      	mov	r8, r3
 8001ac4:	0026      	movs	r6, r4
 8001ac6:	4645      	mov	r5, r8
 8001ac8:	4692      	mov	sl, r2
 8001aca:	4653      	mov	r3, sl
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_fdiv+0x82>
 8001ad0:	e089      	b.n	8001be6 <__aeabi_fdiv+0x196>
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_fdiv+0x88>
 8001ad6:	e09e      	b.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d018      	beq.n	8001b0e <__aeabi_fdiv+0xbe>
 8001adc:	003b      	movs	r3, r7
 8001ade:	337f      	adds	r3, #127	; 0x7f
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd69      	ble.n	8001bb8 <__aeabi_fdiv+0x168>
 8001ae4:	076a      	lsls	r2, r5, #29
 8001ae6:	d004      	beq.n	8001af2 <__aeabi_fdiv+0xa2>
 8001ae8:	220f      	movs	r2, #15
 8001aea:	402a      	ands	r2, r5
 8001aec:	2a04      	cmp	r2, #4
 8001aee:	d000      	beq.n	8001af2 <__aeabi_fdiv+0xa2>
 8001af0:	3504      	adds	r5, #4
 8001af2:	012a      	lsls	r2, r5, #4
 8001af4:	d503      	bpl.n	8001afe <__aeabi_fdiv+0xae>
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <__aeabi_fdiv+0x228>)
 8001af8:	401d      	ands	r5, r3
 8001afa:	003b      	movs	r3, r7
 8001afc:	3380      	adds	r3, #128	; 0x80
 8001afe:	2bfe      	cmp	r3, #254	; 0xfe
 8001b00:	dd00      	ble.n	8001b04 <__aeabi_fdiv+0xb4>
 8001b02:	e070      	b.n	8001be6 <__aeabi_fdiv+0x196>
 8001b04:	01ad      	lsls	r5, r5, #6
 8001b06:	0a6d      	lsrs	r5, r5, #9
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	e002      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001b0c:	000e      	movs	r6, r1
 8001b0e:	2000      	movs	r0, #0
 8001b10:	2500      	movs	r5, #0
 8001b12:	05c0      	lsls	r0, r0, #23
 8001b14:	4328      	orrs	r0, r5
 8001b16:	07f6      	lsls	r6, r6, #31
 8001b18:	4330      	orrs	r0, r6
 8001b1a:	bce0      	pop	{r5, r6, r7}
 8001b1c:	46ba      	mov	sl, r7
 8001b1e:	46b1      	mov	r9, r6
 8001b20:	46a8      	mov	r8, r5
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b24:	4643      	mov	r3, r8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d13f      	bne.n	8001baa <__aeabi_fdiv+0x15a>
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	3fff      	subs	r7, #255	; 0xff
 8001b2e:	e003      	b.n	8001b38 <__aeabi_fdiv+0xe8>
 8001b30:	4643      	mov	r3, r8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d12d      	bne.n	8001b92 <__aeabi_fdiv+0x142>
 8001b36:	2201      	movs	r2, #1
 8001b38:	0031      	movs	r1, r6
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	4061      	eors	r1, r4
 8001b3e:	b2c9      	uxtb	r1, r1
 8001b40:	4313      	orrs	r3, r2
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d834      	bhi.n	8001bb0 <__aeabi_fdiv+0x160>
 8001b46:	484d      	ldr	r0, [pc, #308]	; (8001c7c <__aeabi_fdiv+0x22c>)
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	58c3      	ldr	r3, [r0, r3]
 8001b4c:	469f      	mov	pc, r3
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d113      	bne.n	8001b7a <__aeabi_fdiv+0x12a>
 8001b52:	2304      	movs	r3, #4
 8001b54:	4699      	mov	r9, r3
 8001b56:	3b03      	subs	r3, #3
 8001b58:	2700      	movs	r7, #0
 8001b5a:	469a      	mov	sl, r3
 8001b5c:	e791      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d105      	bne.n	8001b6e <__aeabi_fdiv+0x11e>
 8001b62:	2308      	movs	r3, #8
 8001b64:	4699      	mov	r9, r3
 8001b66:	3b06      	subs	r3, #6
 8001b68:	27ff      	movs	r7, #255	; 0xff
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	e789      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	4699      	mov	r9, r3
 8001b72:	3b09      	subs	r3, #9
 8001b74:	27ff      	movs	r7, #255	; 0xff
 8001b76:	469a      	mov	sl, r3
 8001b78:	e783      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b7a:	0028      	movs	r0, r5
 8001b7c:	f000 fbf0 	bl	8002360 <__clzsi2>
 8001b80:	2776      	movs	r7, #118	; 0x76
 8001b82:	1f43      	subs	r3, r0, #5
 8001b84:	409d      	lsls	r5, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	427f      	negs	r7, r7
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	1a3f      	subs	r7, r7, r0
 8001b90:	e777      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b92:	4640      	mov	r0, r8
 8001b94:	f000 fbe4 	bl	8002360 <__clzsi2>
 8001b98:	4642      	mov	r2, r8
 8001b9a:	1f43      	subs	r3, r0, #5
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	2376      	movs	r3, #118	; 0x76
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	1a1b      	subs	r3, r3, r0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	e77d      	b.n	8001aa6 <__aeabi_fdiv+0x56>
 8001baa:	23ff      	movs	r3, #255	; 0xff
 8001bac:	2203      	movs	r2, #3
 8001bae:	e77a      	b.n	8001aa6 <__aeabi_fdiv+0x56>
 8001bb0:	000e      	movs	r6, r1
 8001bb2:	20ff      	movs	r0, #255	; 0xff
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	e7ac      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	1ac0      	subs	r0, r0, r3
 8001bbc:	281b      	cmp	r0, #27
 8001bbe:	dca6      	bgt.n	8001b0e <__aeabi_fdiv+0xbe>
 8001bc0:	379e      	adds	r7, #158	; 0x9e
 8001bc2:	002a      	movs	r2, r5
 8001bc4:	40bd      	lsls	r5, r7
 8001bc6:	40c2      	lsrs	r2, r0
 8001bc8:	1e6b      	subs	r3, r5, #1
 8001bca:	419d      	sbcs	r5, r3
 8001bcc:	4315      	orrs	r5, r2
 8001bce:	076b      	lsls	r3, r5, #29
 8001bd0:	d004      	beq.n	8001bdc <__aeabi_fdiv+0x18c>
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	402b      	ands	r3, r5
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_fdiv+0x18c>
 8001bda:	3504      	adds	r5, #4
 8001bdc:	016b      	lsls	r3, r5, #5
 8001bde:	d544      	bpl.n	8001c6a <__aeabi_fdiv+0x21a>
 8001be0:	2001      	movs	r0, #1
 8001be2:	2500      	movs	r5, #0
 8001be4:	e795      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001be6:	20ff      	movs	r0, #255	; 0xff
 8001be8:	2500      	movs	r5, #0
 8001bea:	e792      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bec:	2580      	movs	r5, #128	; 0x80
 8001bee:	2600      	movs	r6, #0
 8001bf0:	20ff      	movs	r0, #255	; 0xff
 8001bf2:	03ed      	lsls	r5, r5, #15
 8001bf4:	e78d      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	03c0      	lsls	r0, r0, #15
 8001bfe:	4205      	tst	r5, r0
 8001c00:	d009      	beq.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001c02:	4643      	mov	r3, r8
 8001c04:	4203      	tst	r3, r0
 8001c06:	d106      	bne.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001c08:	4645      	mov	r5, r8
 8001c0a:	4305      	orrs	r5, r0
 8001c0c:	026d      	lsls	r5, r5, #9
 8001c0e:	0026      	movs	r6, r4
 8001c10:	20ff      	movs	r0, #255	; 0xff
 8001c12:	0a6d      	lsrs	r5, r5, #9
 8001c14:	e77d      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c16:	2080      	movs	r0, #128	; 0x80
 8001c18:	03c0      	lsls	r0, r0, #15
 8001c1a:	4305      	orrs	r5, r0
 8001c1c:	026d      	lsls	r5, r5, #9
 8001c1e:	20ff      	movs	r0, #255	; 0xff
 8001c20:	0a6d      	lsrs	r5, r5, #9
 8001c22:	e776      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c24:	4642      	mov	r2, r8
 8001c26:	016b      	lsls	r3, r5, #5
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4283      	cmp	r3, r0
 8001c2c:	d219      	bcs.n	8001c62 <__aeabi_fdiv+0x212>
 8001c2e:	221b      	movs	r2, #27
 8001c30:	2500      	movs	r5, #0
 8001c32:	3f01      	subs	r7, #1
 8001c34:	2601      	movs	r6, #1
 8001c36:	001c      	movs	r4, r3
 8001c38:	006d      	lsls	r5, r5, #1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2c00      	cmp	r4, #0
 8001c3e:	db01      	blt.n	8001c44 <__aeabi_fdiv+0x1f4>
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d801      	bhi.n	8001c48 <__aeabi_fdiv+0x1f8>
 8001c44:	1a1b      	subs	r3, r3, r0
 8001c46:	4335      	orrs	r5, r6
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d1f3      	bne.n	8001c36 <__aeabi_fdiv+0x1e6>
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4193      	sbcs	r3, r2
 8001c52:	431d      	orrs	r5, r3
 8001c54:	003b      	movs	r3, r7
 8001c56:	337f      	adds	r3, #127	; 0x7f
 8001c58:	000e      	movs	r6, r1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_fdiv+0x210>
 8001c5e:	e741      	b.n	8001ae4 <__aeabi_fdiv+0x94>
 8001c60:	e7aa      	b.n	8001bb8 <__aeabi_fdiv+0x168>
 8001c62:	221a      	movs	r2, #26
 8001c64:	2501      	movs	r5, #1
 8001c66:	1a1b      	subs	r3, r3, r0
 8001c68:	e7e4      	b.n	8001c34 <__aeabi_fdiv+0x1e4>
 8001c6a:	01ad      	lsls	r5, r5, #6
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	0a6d      	lsrs	r5, r5, #9
 8001c70:	e74f      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	080056d8 	.word	0x080056d8
 8001c78:	f7ffffff 	.word	0xf7ffffff
 8001c7c:	08005718 	.word	0x08005718

08001c80 <__aeabi_fmul>:
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	464f      	mov	r7, r9
 8001c84:	4646      	mov	r6, r8
 8001c86:	46d6      	mov	lr, sl
 8001c88:	0244      	lsls	r4, r0, #9
 8001c8a:	0045      	lsls	r5, r0, #1
 8001c8c:	b5c0      	push	{r6, r7, lr}
 8001c8e:	0a64      	lsrs	r4, r4, #9
 8001c90:	1c0f      	adds	r7, r1, #0
 8001c92:	0e2d      	lsrs	r5, r5, #24
 8001c94:	0fc6      	lsrs	r6, r0, #31
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_fmul+0x1c>
 8001c9a:	e08d      	b.n	8001db8 <__aeabi_fmul+0x138>
 8001c9c:	2dff      	cmp	r5, #255	; 0xff
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_fmul+0x22>
 8001ca0:	e092      	b.n	8001dc8 <__aeabi_fmul+0x148>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2080      	movs	r0, #128	; 0x80
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	469a      	mov	sl, r3
 8001caa:	00e4      	lsls	r4, r4, #3
 8001cac:	04c0      	lsls	r0, r0, #19
 8001cae:	4304      	orrs	r4, r0
 8001cb0:	3d7f      	subs	r5, #127	; 0x7f
 8001cb2:	0278      	lsls	r0, r7, #9
 8001cb4:	0a43      	lsrs	r3, r0, #9
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	007b      	lsls	r3, r7, #1
 8001cba:	0e1b      	lsrs	r3, r3, #24
 8001cbc:	0fff      	lsrs	r7, r7, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_fmul+0x44>
 8001cc2:	e070      	b.n	8001da6 <__aeabi_fmul+0x126>
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d100      	bne.n	8001cca <__aeabi_fmul+0x4a>
 8001cc8:	e086      	b.n	8001dd8 <__aeabi_fmul+0x158>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	00d0      	lsls	r0, r2, #3
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	3b7f      	subs	r3, #127	; 0x7f
 8001cd2:	18ed      	adds	r5, r5, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	04d2      	lsls	r2, r2, #19
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	4690      	mov	r8, r2
 8001cdc:	469c      	mov	ip, r3
 8001cde:	0031      	movs	r1, r6
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4079      	eors	r1, r7
 8001ce4:	1c68      	adds	r0, r5, #1
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d81c      	bhi.n	8001d24 <__aeabi_fmul+0xa4>
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <__aeabi_fmul+0x244>)
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	58d3      	ldr	r3, [r2, r3]
 8001cf0:	469f      	mov	pc, r3
 8001cf2:	0039      	movs	r1, r7
 8001cf4:	4644      	mov	r4, r8
 8001cf6:	46e2      	mov	sl, ip
 8001cf8:	4653      	mov	r3, sl
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d00f      	beq.n	8001d1e <__aeabi_fmul+0x9e>
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d100      	bne.n	8001d04 <__aeabi_fmul+0x84>
 8001d02:	e0d7      	b.n	8001eb4 <__aeabi_fmul+0x234>
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d137      	bne.n	8001d78 <__aeabi_fmul+0xf8>
 8001d08:	2000      	movs	r0, #0
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	05c0      	lsls	r0, r0, #23
 8001d0e:	4320      	orrs	r0, r4
 8001d10:	07c9      	lsls	r1, r1, #31
 8001d12:	4308      	orrs	r0, r1
 8001d14:	bce0      	pop	{r5, r6, r7}
 8001d16:	46ba      	mov	sl, r7
 8001d18:	46b1      	mov	r9, r6
 8001d1a:	46a8      	mov	r8, r5
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	20ff      	movs	r0, #255	; 0xff
 8001d20:	2400      	movs	r4, #0
 8001d22:	e7f3      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001d24:	0c26      	lsrs	r6, r4, #16
 8001d26:	0424      	lsls	r4, r4, #16
 8001d28:	0c22      	lsrs	r2, r4, #16
 8001d2a:	4644      	mov	r4, r8
 8001d2c:	0424      	lsls	r4, r4, #16
 8001d2e:	0c24      	lsrs	r4, r4, #16
 8001d30:	4643      	mov	r3, r8
 8001d32:	0027      	movs	r7, r4
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	4357      	muls	r7, r2
 8001d38:	4374      	muls	r4, r6
 8001d3a:	435a      	muls	r2, r3
 8001d3c:	435e      	muls	r6, r3
 8001d3e:	1912      	adds	r2, r2, r4
 8001d40:	0c3b      	lsrs	r3, r7, #16
 8001d42:	189b      	adds	r3, r3, r2
 8001d44:	429c      	cmp	r4, r3
 8001d46:	d903      	bls.n	8001d50 <__aeabi_fmul+0xd0>
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	0252      	lsls	r2, r2, #9
 8001d4c:	4694      	mov	ip, r2
 8001d4e:	4466      	add	r6, ip
 8001d50:	043f      	lsls	r7, r7, #16
 8001d52:	041a      	lsls	r2, r3, #16
 8001d54:	0c3f      	lsrs	r7, r7, #16
 8001d56:	19d2      	adds	r2, r2, r7
 8001d58:	0194      	lsls	r4, r2, #6
 8001d5a:	1e67      	subs	r7, r4, #1
 8001d5c:	41bc      	sbcs	r4, r7
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	0e92      	lsrs	r2, r2, #26
 8001d62:	199b      	adds	r3, r3, r6
 8001d64:	4314      	orrs	r4, r2
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	431c      	orrs	r4, r3
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	d400      	bmi.n	8001d70 <__aeabi_fmul+0xf0>
 8001d6e:	e09b      	b.n	8001ea8 <__aeabi_fmul+0x228>
 8001d70:	2301      	movs	r3, #1
 8001d72:	0862      	lsrs	r2, r4, #1
 8001d74:	401c      	ands	r4, r3
 8001d76:	4314      	orrs	r4, r2
 8001d78:	0002      	movs	r2, r0
 8001d7a:	327f      	adds	r2, #127	; 0x7f
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	dd64      	ble.n	8001e4a <__aeabi_fmul+0x1ca>
 8001d80:	0763      	lsls	r3, r4, #29
 8001d82:	d004      	beq.n	8001d8e <__aeabi_fmul+0x10e>
 8001d84:	230f      	movs	r3, #15
 8001d86:	4023      	ands	r3, r4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d000      	beq.n	8001d8e <__aeabi_fmul+0x10e>
 8001d8c:	3404      	adds	r4, #4
 8001d8e:	0123      	lsls	r3, r4, #4
 8001d90:	d503      	bpl.n	8001d9a <__aeabi_fmul+0x11a>
 8001d92:	0002      	movs	r2, r0
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <__aeabi_fmul+0x248>)
 8001d96:	3280      	adds	r2, #128	; 0x80
 8001d98:	401c      	ands	r4, r3
 8001d9a:	2afe      	cmp	r2, #254	; 0xfe
 8001d9c:	dcbf      	bgt.n	8001d1e <__aeabi_fmul+0x9e>
 8001d9e:	01a4      	lsls	r4, r4, #6
 8001da0:	0a64      	lsrs	r4, r4, #9
 8001da2:	b2d0      	uxtb	r0, r2
 8001da4:	e7b2      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001da6:	4643      	mov	r3, r8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d13d      	bne.n	8001e28 <__aeabi_fmul+0x1a8>
 8001dac:	464a      	mov	r2, r9
 8001dae:	3301      	adds	r3, #1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	4691      	mov	r9, r2
 8001db4:	469c      	mov	ip, r3
 8001db6:	e792      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d129      	bne.n	8001e10 <__aeabi_fmul+0x190>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	e774      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d11b      	bne.n	8001e04 <__aeabi_fmul+0x184>
 8001dcc:	2308      	movs	r3, #8
 8001dce:	4699      	mov	r9, r3
 8001dd0:	3b06      	subs	r3, #6
 8001dd2:	25ff      	movs	r5, #255	; 0xff
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	e76c      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001dd8:	4643      	mov	r3, r8
 8001dda:	35ff      	adds	r5, #255	; 0xff
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <__aeabi_fmul+0x178>
 8001de0:	2302      	movs	r3, #2
 8001de2:	464a      	mov	r2, r9
 8001de4:	431a      	orrs	r2, r3
 8001de6:	4691      	mov	r9, r2
 8001de8:	469c      	mov	ip, r3
 8001dea:	e778      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001dec:	4653      	mov	r3, sl
 8001dee:	0031      	movs	r1, r6
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d000      	beq.n	8001df6 <__aeabi_fmul+0x176>
 8001df4:	e783      	b.n	8001cfe <__aeabi_fmul+0x7e>
 8001df6:	e792      	b.n	8001d1e <__aeabi_fmul+0x9e>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	4691      	mov	r9, r2
 8001e00:	469c      	mov	ip, r3
 8001e02:	e76c      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001e04:	230c      	movs	r3, #12
 8001e06:	4699      	mov	r9, r3
 8001e08:	3b09      	subs	r3, #9
 8001e0a:	25ff      	movs	r5, #255	; 0xff
 8001e0c:	469a      	mov	sl, r3
 8001e0e:	e750      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001e10:	0020      	movs	r0, r4
 8001e12:	f000 faa5 	bl	8002360 <__clzsi2>
 8001e16:	2576      	movs	r5, #118	; 0x76
 8001e18:	1f43      	subs	r3, r0, #5
 8001e1a:	409c      	lsls	r4, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	426d      	negs	r5, r5
 8001e20:	4699      	mov	r9, r3
 8001e22:	469a      	mov	sl, r3
 8001e24:	1a2d      	subs	r5, r5, r0
 8001e26:	e744      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001e28:	4640      	mov	r0, r8
 8001e2a:	f000 fa99 	bl	8002360 <__clzsi2>
 8001e2e:	4642      	mov	r2, r8
 8001e30:	1f43      	subs	r3, r0, #5
 8001e32:	409a      	lsls	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	1a2d      	subs	r5, r5, r0
 8001e38:	4690      	mov	r8, r2
 8001e3a:	469c      	mov	ip, r3
 8001e3c:	3d76      	subs	r5, #118	; 0x76
 8001e3e:	e74e      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	2100      	movs	r1, #0
 8001e44:	20ff      	movs	r0, #255	; 0xff
 8001e46:	03e4      	lsls	r4, r4, #15
 8001e48:	e760      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	2b1b      	cmp	r3, #27
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_fmul+0x1d4>
 8001e52:	e759      	b.n	8001d08 <__aeabi_fmul+0x88>
 8001e54:	0022      	movs	r2, r4
 8001e56:	309e      	adds	r0, #158	; 0x9e
 8001e58:	40da      	lsrs	r2, r3
 8001e5a:	4084      	lsls	r4, r0
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	1e62      	subs	r2, r4, #1
 8001e60:	4194      	sbcs	r4, r2
 8001e62:	431c      	orrs	r4, r3
 8001e64:	0763      	lsls	r3, r4, #29
 8001e66:	d004      	beq.n	8001e72 <__aeabi_fmul+0x1f2>
 8001e68:	230f      	movs	r3, #15
 8001e6a:	4023      	ands	r3, r4
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_fmul+0x1f2>
 8001e70:	3404      	adds	r4, #4
 8001e72:	0163      	lsls	r3, r4, #5
 8001e74:	d51a      	bpl.n	8001eac <__aeabi_fmul+0x22c>
 8001e76:	2001      	movs	r0, #1
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e747      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e7c:	2080      	movs	r0, #128	; 0x80
 8001e7e:	03c0      	lsls	r0, r0, #15
 8001e80:	4204      	tst	r4, r0
 8001e82:	d009      	beq.n	8001e98 <__aeabi_fmul+0x218>
 8001e84:	4643      	mov	r3, r8
 8001e86:	4203      	tst	r3, r0
 8001e88:	d106      	bne.n	8001e98 <__aeabi_fmul+0x218>
 8001e8a:	4644      	mov	r4, r8
 8001e8c:	4304      	orrs	r4, r0
 8001e8e:	0264      	lsls	r4, r4, #9
 8001e90:	0039      	movs	r1, r7
 8001e92:	20ff      	movs	r0, #255	; 0xff
 8001e94:	0a64      	lsrs	r4, r4, #9
 8001e96:	e739      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e98:	2080      	movs	r0, #128	; 0x80
 8001e9a:	03c0      	lsls	r0, r0, #15
 8001e9c:	4304      	orrs	r4, r0
 8001e9e:	0264      	lsls	r4, r4, #9
 8001ea0:	0031      	movs	r1, r6
 8001ea2:	20ff      	movs	r0, #255	; 0xff
 8001ea4:	0a64      	lsrs	r4, r4, #9
 8001ea6:	e731      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001ea8:	0028      	movs	r0, r5
 8001eaa:	e765      	b.n	8001d78 <__aeabi_fmul+0xf8>
 8001eac:	01a4      	lsls	r4, r4, #6
 8001eae:	2000      	movs	r0, #0
 8001eb0:	0a64      	lsrs	r4, r4, #9
 8001eb2:	e72b      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001eb4:	2080      	movs	r0, #128	; 0x80
 8001eb6:	03c0      	lsls	r0, r0, #15
 8001eb8:	4304      	orrs	r4, r0
 8001eba:	0264      	lsls	r4, r4, #9
 8001ebc:	20ff      	movs	r0, #255	; 0xff
 8001ebe:	0a64      	lsrs	r4, r4, #9
 8001ec0:	e724      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	08005758 	.word	0x08005758
 8001ec8:	f7ffffff 	.word	0xf7ffffff

08001ecc <__aeabi_fsub>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	46ce      	mov	lr, r9
 8001ed0:	4647      	mov	r7, r8
 8001ed2:	0243      	lsls	r3, r0, #9
 8001ed4:	0a5b      	lsrs	r3, r3, #9
 8001ed6:	024e      	lsls	r6, r1, #9
 8001ed8:	00da      	lsls	r2, r3, #3
 8001eda:	4694      	mov	ip, r2
 8001edc:	0a72      	lsrs	r2, r6, #9
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0045      	lsls	r5, r0, #1
 8001ee2:	004a      	lsls	r2, r1, #1
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	0e2d      	lsrs	r5, r5, #24
 8001ee8:	001f      	movs	r7, r3
 8001eea:	0fc4      	lsrs	r4, r0, #31
 8001eec:	0e12      	lsrs	r2, r2, #24
 8001eee:	0fc9      	lsrs	r1, r1, #31
 8001ef0:	09b6      	lsrs	r6, r6, #6
 8001ef2:	2aff      	cmp	r2, #255	; 0xff
 8001ef4:	d05b      	beq.n	8001fae <__aeabi_fsub+0xe2>
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	4041      	eors	r1, r0
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d039      	beq.n	8001f72 <__aeabi_fsub+0xa6>
 8001efe:	1aa8      	subs	r0, r5, r2
 8001f00:	2800      	cmp	r0, #0
 8001f02:	dd5a      	ble.n	8001fba <__aeabi_fsub+0xee>
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	d06a      	beq.n	8001fde <__aeabi_fsub+0x112>
 8001f08:	2dff      	cmp	r5, #255	; 0xff
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_fsub+0x42>
 8001f0c:	e0d9      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	04d2      	lsls	r2, r2, #19
 8001f12:	4316      	orrs	r6, r2
 8001f14:	281b      	cmp	r0, #27
 8001f16:	dc00      	bgt.n	8001f1a <__aeabi_fsub+0x4e>
 8001f18:	e0e9      	b.n	80020ee <__aeabi_fsub+0x222>
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	1a18      	subs	r0, r3, r0
 8001f20:	0143      	lsls	r3, r0, #5
 8001f22:	d400      	bmi.n	8001f26 <__aeabi_fsub+0x5a>
 8001f24:	e0b4      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8001f26:	0180      	lsls	r0, r0, #6
 8001f28:	0987      	lsrs	r7, r0, #6
 8001f2a:	0038      	movs	r0, r7
 8001f2c:	f000 fa18 	bl	8002360 <__clzsi2>
 8001f30:	3805      	subs	r0, #5
 8001f32:	4087      	lsls	r7, r0
 8001f34:	4285      	cmp	r5, r0
 8001f36:	dc00      	bgt.n	8001f3a <__aeabi_fsub+0x6e>
 8001f38:	e0cc      	b.n	80020d4 <__aeabi_fsub+0x208>
 8001f3a:	1a2d      	subs	r5, r5, r0
 8001f3c:	48b5      	ldr	r0, [pc, #724]	; (8002214 <__aeabi_fsub+0x348>)
 8001f3e:	4038      	ands	r0, r7
 8001f40:	0743      	lsls	r3, r0, #29
 8001f42:	d004      	beq.n	8001f4e <__aeabi_fsub+0x82>
 8001f44:	230f      	movs	r3, #15
 8001f46:	4003      	ands	r3, r0
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_fsub+0x82>
 8001f4c:	3004      	adds	r0, #4
 8001f4e:	0143      	lsls	r3, r0, #5
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_fsub+0x88>
 8001f52:	e0a0      	b.n	8002096 <__aeabi_fsub+0x1ca>
 8001f54:	1c6a      	adds	r2, r5, #1
 8001f56:	2dfe      	cmp	r5, #254	; 0xfe
 8001f58:	d100      	bne.n	8001f5c <__aeabi_fsub+0x90>
 8001f5a:	e08d      	b.n	8002078 <__aeabi_fsub+0x1ac>
 8001f5c:	0180      	lsls	r0, r0, #6
 8001f5e:	0a47      	lsrs	r7, r0, #9
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	05d0      	lsls	r0, r2, #23
 8001f64:	4338      	orrs	r0, r7
 8001f66:	07e4      	lsls	r4, r4, #31
 8001f68:	4320      	orrs	r0, r4
 8001f6a:	bcc0      	pop	{r6, r7}
 8001f6c:	46b9      	mov	r9, r7
 8001f6e:	46b0      	mov	r8, r6
 8001f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f72:	1aa8      	subs	r0, r5, r2
 8001f74:	4680      	mov	r8, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	dd45      	ble.n	8002006 <__aeabi_fsub+0x13a>
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d070      	beq.n	8002060 <__aeabi_fsub+0x194>
 8001f7e:	2dff      	cmp	r5, #255	; 0xff
 8001f80:	d100      	bne.n	8001f84 <__aeabi_fsub+0xb8>
 8001f82:	e09e      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	04db      	lsls	r3, r3, #19
 8001f88:	431e      	orrs	r6, r3
 8001f8a:	4643      	mov	r3, r8
 8001f8c:	2b1b      	cmp	r3, #27
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_fsub+0xc6>
 8001f90:	e0d2      	b.n	8002138 <__aeabi_fsub+0x26c>
 8001f92:	2001      	movs	r0, #1
 8001f94:	4460      	add	r0, ip
 8001f96:	0143      	lsls	r3, r0, #5
 8001f98:	d57a      	bpl.n	8002090 <__aeabi_fsub+0x1c4>
 8001f9a:	3501      	adds	r5, #1
 8001f9c:	2dff      	cmp	r5, #255	; 0xff
 8001f9e:	d06b      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4a9d      	ldr	r2, [pc, #628]	; (8002218 <__aeabi_fsub+0x34c>)
 8001fa4:	4003      	ands	r3, r0
 8001fa6:	0840      	lsrs	r0, r0, #1
 8001fa8:	4010      	ands	r0, r2
 8001faa:	4318      	orrs	r0, r3
 8001fac:	e7c8      	b.n	8001f40 <__aeabi_fsub+0x74>
 8001fae:	2e00      	cmp	r6, #0
 8001fb0:	d020      	beq.n	8001ff4 <__aeabi_fsub+0x128>
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d023      	beq.n	8001ffe <__aeabi_fsub+0x132>
 8001fb6:	0028      	movs	r0, r5
 8001fb8:	38ff      	subs	r0, #255	; 0xff
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d039      	beq.n	8002032 <__aeabi_fsub+0x166>
 8001fbe:	1b57      	subs	r7, r2, r5
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	d000      	beq.n	8001fc6 <__aeabi_fsub+0xfa>
 8001fc4:	e09d      	b.n	8002102 <__aeabi_fsub+0x236>
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <__aeabi_fsub+0x102>
 8001fcc:	e0db      	b.n	8002186 <__aeabi_fsub+0x2ba>
 8001fce:	1e7b      	subs	r3, r7, #1
 8001fd0:	2f01      	cmp	r7, #1
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_fsub+0x10a>
 8001fd4:	e10d      	b.n	80021f2 <__aeabi_fsub+0x326>
 8001fd6:	2fff      	cmp	r7, #255	; 0xff
 8001fd8:	d071      	beq.n	80020be <__aeabi_fsub+0x1f2>
 8001fda:	001f      	movs	r7, r3
 8001fdc:	e098      	b.n	8002110 <__aeabi_fsub+0x244>
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_fsub+0x118>
 8001fe2:	e0a7      	b.n	8002134 <__aeabi_fsub+0x268>
 8001fe4:	1e42      	subs	r2, r0, #1
 8001fe6:	2801      	cmp	r0, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_fsub+0x120>
 8001fea:	e0e6      	b.n	80021ba <__aeabi_fsub+0x2ee>
 8001fec:	28ff      	cmp	r0, #255	; 0xff
 8001fee:	d068      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	e78f      	b.n	8001f14 <__aeabi_fsub+0x48>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4041      	eors	r1, r0
 8001ff8:	42a1      	cmp	r1, r4
 8001ffa:	d000      	beq.n	8001ffe <__aeabi_fsub+0x132>
 8001ffc:	e77f      	b.n	8001efe <__aeabi_fsub+0x32>
 8001ffe:	20ff      	movs	r0, #255	; 0xff
 8002000:	4240      	negs	r0, r0
 8002002:	4680      	mov	r8, r0
 8002004:	44a8      	add	r8, r5
 8002006:	4640      	mov	r0, r8
 8002008:	2800      	cmp	r0, #0
 800200a:	d038      	beq.n	800207e <__aeabi_fsub+0x1b2>
 800200c:	1b51      	subs	r1, r2, r5
 800200e:	2d00      	cmp	r5, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_fsub+0x148>
 8002012:	e0ae      	b.n	8002172 <__aeabi_fsub+0x2a6>
 8002014:	2aff      	cmp	r2, #255	; 0xff
 8002016:	d100      	bne.n	800201a <__aeabi_fsub+0x14e>
 8002018:	e0df      	b.n	80021da <__aeabi_fsub+0x30e>
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	4660      	mov	r0, ip
 800201e:	04db      	lsls	r3, r3, #19
 8002020:	4318      	orrs	r0, r3
 8002022:	4684      	mov	ip, r0
 8002024:	291b      	cmp	r1, #27
 8002026:	dc00      	bgt.n	800202a <__aeabi_fsub+0x15e>
 8002028:	e0d9      	b.n	80021de <__aeabi_fsub+0x312>
 800202a:	2001      	movs	r0, #1
 800202c:	0015      	movs	r5, r2
 800202e:	1980      	adds	r0, r0, r6
 8002030:	e7b1      	b.n	8001f96 <__aeabi_fsub+0xca>
 8002032:	20fe      	movs	r0, #254	; 0xfe
 8002034:	1c6a      	adds	r2, r5, #1
 8002036:	4210      	tst	r0, r2
 8002038:	d171      	bne.n	800211e <__aeabi_fsub+0x252>
 800203a:	2d00      	cmp	r5, #0
 800203c:	d000      	beq.n	8002040 <__aeabi_fsub+0x174>
 800203e:	e0a6      	b.n	800218e <__aeabi_fsub+0x2c2>
 8002040:	4663      	mov	r3, ip
 8002042:	2b00      	cmp	r3, #0
 8002044:	d100      	bne.n	8002048 <__aeabi_fsub+0x17c>
 8002046:	e0d9      	b.n	80021fc <__aeabi_fsub+0x330>
 8002048:	2200      	movs	r2, #0
 800204a:	2e00      	cmp	r6, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_fsub+0x184>
 800204e:	e788      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002050:	1b98      	subs	r0, r3, r6
 8002052:	0143      	lsls	r3, r0, #5
 8002054:	d400      	bmi.n	8002058 <__aeabi_fsub+0x18c>
 8002056:	e0e1      	b.n	800221c <__aeabi_fsub+0x350>
 8002058:	4663      	mov	r3, ip
 800205a:	000c      	movs	r4, r1
 800205c:	1af0      	subs	r0, r6, r3
 800205e:	e76f      	b.n	8001f40 <__aeabi_fsub+0x74>
 8002060:	2e00      	cmp	r6, #0
 8002062:	d100      	bne.n	8002066 <__aeabi_fsub+0x19a>
 8002064:	e0b7      	b.n	80021d6 <__aeabi_fsub+0x30a>
 8002066:	0002      	movs	r2, r0
 8002068:	3a01      	subs	r2, #1
 800206a:	2801      	cmp	r0, #1
 800206c:	d100      	bne.n	8002070 <__aeabi_fsub+0x1a4>
 800206e:	e09c      	b.n	80021aa <__aeabi_fsub+0x2de>
 8002070:	28ff      	cmp	r0, #255	; 0xff
 8002072:	d026      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 8002074:	4690      	mov	r8, r2
 8002076:	e788      	b.n	8001f8a <__aeabi_fsub+0xbe>
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	2700      	movs	r7, #0
 800207c:	e771      	b.n	8001f62 <__aeabi_fsub+0x96>
 800207e:	20fe      	movs	r0, #254	; 0xfe
 8002080:	1c6a      	adds	r2, r5, #1
 8002082:	4210      	tst	r0, r2
 8002084:	d064      	beq.n	8002150 <__aeabi_fsub+0x284>
 8002086:	2aff      	cmp	r2, #255	; 0xff
 8002088:	d0f6      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 800208a:	0015      	movs	r5, r2
 800208c:	4466      	add	r6, ip
 800208e:	0870      	lsrs	r0, r6, #1
 8002090:	0743      	lsls	r3, r0, #29
 8002092:	d000      	beq.n	8002096 <__aeabi_fsub+0x1ca>
 8002094:	e756      	b.n	8001f44 <__aeabi_fsub+0x78>
 8002096:	08c3      	lsrs	r3, r0, #3
 8002098:	2dff      	cmp	r5, #255	; 0xff
 800209a:	d012      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	0a5f      	lsrs	r7, r3, #9
 80020a0:	b2ea      	uxtb	r2, r5
 80020a2:	e75e      	b.n	8001f62 <__aeabi_fsub+0x96>
 80020a4:	4662      	mov	r2, ip
 80020a6:	2a00      	cmp	r2, #0
 80020a8:	d100      	bne.n	80020ac <__aeabi_fsub+0x1e0>
 80020aa:	e096      	b.n	80021da <__aeabi_fsub+0x30e>
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	d008      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	03d2      	lsls	r2, r2, #15
 80020b4:	4213      	tst	r3, r2
 80020b6:	d004      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 80020b8:	4648      	mov	r0, r9
 80020ba:	4210      	tst	r0, r2
 80020bc:	d101      	bne.n	80020c2 <__aeabi_fsub+0x1f6>
 80020be:	000c      	movs	r4, r1
 80020c0:	464b      	mov	r3, r9
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0d8      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 80020c6:	2780      	movs	r7, #128	; 0x80
 80020c8:	03ff      	lsls	r7, r7, #15
 80020ca:	431f      	orrs	r7, r3
 80020cc:	027f      	lsls	r7, r7, #9
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	0a7f      	lsrs	r7, r7, #9
 80020d2:	e746      	b.n	8001f62 <__aeabi_fsub+0x96>
 80020d4:	2320      	movs	r3, #32
 80020d6:	003a      	movs	r2, r7
 80020d8:	1b45      	subs	r5, r0, r5
 80020da:	0038      	movs	r0, r7
 80020dc:	3501      	adds	r5, #1
 80020de:	40ea      	lsrs	r2, r5
 80020e0:	1b5d      	subs	r5, r3, r5
 80020e2:	40a8      	lsls	r0, r5
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	4198      	sbcs	r0, r3
 80020e8:	2500      	movs	r5, #0
 80020ea:	4310      	orrs	r0, r2
 80020ec:	e728      	b.n	8001f40 <__aeabi_fsub+0x74>
 80020ee:	2320      	movs	r3, #32
 80020f0:	1a1b      	subs	r3, r3, r0
 80020f2:	0032      	movs	r2, r6
 80020f4:	409e      	lsls	r6, r3
 80020f6:	40c2      	lsrs	r2, r0
 80020f8:	0030      	movs	r0, r6
 80020fa:	1e43      	subs	r3, r0, #1
 80020fc:	4198      	sbcs	r0, r3
 80020fe:	4310      	orrs	r0, r2
 8002100:	e70c      	b.n	8001f1c <__aeabi_fsub+0x50>
 8002102:	2aff      	cmp	r2, #255	; 0xff
 8002104:	d0db      	beq.n	80020be <__aeabi_fsub+0x1f2>
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	4660      	mov	r0, ip
 800210a:	04db      	lsls	r3, r3, #19
 800210c:	4318      	orrs	r0, r3
 800210e:	4684      	mov	ip, r0
 8002110:	2f1b      	cmp	r7, #27
 8002112:	dd56      	ble.n	80021c2 <__aeabi_fsub+0x2f6>
 8002114:	2001      	movs	r0, #1
 8002116:	000c      	movs	r4, r1
 8002118:	0015      	movs	r5, r2
 800211a:	1a30      	subs	r0, r6, r0
 800211c:	e700      	b.n	8001f20 <__aeabi_fsub+0x54>
 800211e:	4663      	mov	r3, ip
 8002120:	1b9f      	subs	r7, r3, r6
 8002122:	017b      	lsls	r3, r7, #5
 8002124:	d43d      	bmi.n	80021a2 <__aeabi_fsub+0x2d6>
 8002126:	2f00      	cmp	r7, #0
 8002128:	d000      	beq.n	800212c <__aeabi_fsub+0x260>
 800212a:	e6fe      	b.n	8001f2a <__aeabi_fsub+0x5e>
 800212c:	2400      	movs	r4, #0
 800212e:	2200      	movs	r2, #0
 8002130:	2700      	movs	r7, #0
 8002132:	e716      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002134:	0005      	movs	r5, r0
 8002136:	e7af      	b.n	8002098 <__aeabi_fsub+0x1cc>
 8002138:	0032      	movs	r2, r6
 800213a:	4643      	mov	r3, r8
 800213c:	4641      	mov	r1, r8
 800213e:	40da      	lsrs	r2, r3
 8002140:	2320      	movs	r3, #32
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	409e      	lsls	r6, r3
 8002146:	0030      	movs	r0, r6
 8002148:	1e43      	subs	r3, r0, #1
 800214a:	4198      	sbcs	r0, r3
 800214c:	4310      	orrs	r0, r2
 800214e:	e721      	b.n	8001f94 <__aeabi_fsub+0xc8>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d1a7      	bne.n	80020a4 <__aeabi_fsub+0x1d8>
 8002154:	4663      	mov	r3, ip
 8002156:	2b00      	cmp	r3, #0
 8002158:	d059      	beq.n	800220e <__aeabi_fsub+0x342>
 800215a:	2200      	movs	r2, #0
 800215c:	2e00      	cmp	r6, #0
 800215e:	d100      	bne.n	8002162 <__aeabi_fsub+0x296>
 8002160:	e6ff      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002162:	0030      	movs	r0, r6
 8002164:	4460      	add	r0, ip
 8002166:	0143      	lsls	r3, r0, #5
 8002168:	d592      	bpl.n	8002090 <__aeabi_fsub+0x1c4>
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <__aeabi_fsub+0x348>)
 800216c:	3501      	adds	r5, #1
 800216e:	4018      	ands	r0, r3
 8002170:	e78e      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8002172:	4663      	mov	r3, ip
 8002174:	2b00      	cmp	r3, #0
 8002176:	d047      	beq.n	8002208 <__aeabi_fsub+0x33c>
 8002178:	1e4b      	subs	r3, r1, #1
 800217a:	2901      	cmp	r1, #1
 800217c:	d015      	beq.n	80021aa <__aeabi_fsub+0x2de>
 800217e:	29ff      	cmp	r1, #255	; 0xff
 8002180:	d02b      	beq.n	80021da <__aeabi_fsub+0x30e>
 8002182:	0019      	movs	r1, r3
 8002184:	e74e      	b.n	8002024 <__aeabi_fsub+0x158>
 8002186:	000c      	movs	r4, r1
 8002188:	464b      	mov	r3, r9
 800218a:	003d      	movs	r5, r7
 800218c:	e784      	b.n	8002098 <__aeabi_fsub+0x1cc>
 800218e:	4662      	mov	r2, ip
 8002190:	2a00      	cmp	r2, #0
 8002192:	d18b      	bne.n	80020ac <__aeabi_fsub+0x1e0>
 8002194:	2e00      	cmp	r6, #0
 8002196:	d192      	bne.n	80020be <__aeabi_fsub+0x1f2>
 8002198:	2780      	movs	r7, #128	; 0x80
 800219a:	2400      	movs	r4, #0
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	03ff      	lsls	r7, r7, #15
 80021a0:	e6df      	b.n	8001f62 <__aeabi_fsub+0x96>
 80021a2:	4663      	mov	r3, ip
 80021a4:	000c      	movs	r4, r1
 80021a6:	1af7      	subs	r7, r6, r3
 80021a8:	e6bf      	b.n	8001f2a <__aeabi_fsub+0x5e>
 80021aa:	0030      	movs	r0, r6
 80021ac:	4460      	add	r0, ip
 80021ae:	2501      	movs	r5, #1
 80021b0:	0143      	lsls	r3, r0, #5
 80021b2:	d400      	bmi.n	80021b6 <__aeabi_fsub+0x2ea>
 80021b4:	e76c      	b.n	8002090 <__aeabi_fsub+0x1c4>
 80021b6:	2502      	movs	r5, #2
 80021b8:	e6f2      	b.n	8001fa0 <__aeabi_fsub+0xd4>
 80021ba:	4663      	mov	r3, ip
 80021bc:	2501      	movs	r5, #1
 80021be:	1b98      	subs	r0, r3, r6
 80021c0:	e6ae      	b.n	8001f20 <__aeabi_fsub+0x54>
 80021c2:	2320      	movs	r3, #32
 80021c4:	4664      	mov	r4, ip
 80021c6:	4660      	mov	r0, ip
 80021c8:	40fc      	lsrs	r4, r7
 80021ca:	1bdf      	subs	r7, r3, r7
 80021cc:	40b8      	lsls	r0, r7
 80021ce:	1e43      	subs	r3, r0, #1
 80021d0:	4198      	sbcs	r0, r3
 80021d2:	4320      	orrs	r0, r4
 80021d4:	e79f      	b.n	8002116 <__aeabi_fsub+0x24a>
 80021d6:	0005      	movs	r5, r0
 80021d8:	e75e      	b.n	8002098 <__aeabi_fsub+0x1cc>
 80021da:	464b      	mov	r3, r9
 80021dc:	e771      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 80021de:	2320      	movs	r3, #32
 80021e0:	4665      	mov	r5, ip
 80021e2:	4660      	mov	r0, ip
 80021e4:	40cd      	lsrs	r5, r1
 80021e6:	1a59      	subs	r1, r3, r1
 80021e8:	4088      	lsls	r0, r1
 80021ea:	1e43      	subs	r3, r0, #1
 80021ec:	4198      	sbcs	r0, r3
 80021ee:	4328      	orrs	r0, r5
 80021f0:	e71c      	b.n	800202c <__aeabi_fsub+0x160>
 80021f2:	4663      	mov	r3, ip
 80021f4:	000c      	movs	r4, r1
 80021f6:	2501      	movs	r5, #1
 80021f8:	1af0      	subs	r0, r6, r3
 80021fa:	e691      	b.n	8001f20 <__aeabi_fsub+0x54>
 80021fc:	2e00      	cmp	r6, #0
 80021fe:	d095      	beq.n	800212c <__aeabi_fsub+0x260>
 8002200:	000c      	movs	r4, r1
 8002202:	464f      	mov	r7, r9
 8002204:	2200      	movs	r2, #0
 8002206:	e6ac      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002208:	464b      	mov	r3, r9
 800220a:	000d      	movs	r5, r1
 800220c:	e744      	b.n	8002098 <__aeabi_fsub+0x1cc>
 800220e:	464f      	mov	r7, r9
 8002210:	2200      	movs	r2, #0
 8002212:	e6a6      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002214:	fbffffff 	.word	0xfbffffff
 8002218:	7dffffff 	.word	0x7dffffff
 800221c:	2800      	cmp	r0, #0
 800221e:	d000      	beq.n	8002222 <__aeabi_fsub+0x356>
 8002220:	e736      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8002222:	2400      	movs	r4, #0
 8002224:	2700      	movs	r7, #0
 8002226:	e69c      	b.n	8001f62 <__aeabi_fsub+0x96>

08002228 <__aeabi_f2iz>:
 8002228:	0241      	lsls	r1, r0, #9
 800222a:	0042      	lsls	r2, r0, #1
 800222c:	0fc3      	lsrs	r3, r0, #31
 800222e:	0a49      	lsrs	r1, r1, #9
 8002230:	2000      	movs	r0, #0
 8002232:	0e12      	lsrs	r2, r2, #24
 8002234:	2a7e      	cmp	r2, #126	; 0x7e
 8002236:	dd03      	ble.n	8002240 <__aeabi_f2iz+0x18>
 8002238:	2a9d      	cmp	r2, #157	; 0x9d
 800223a:	dd02      	ble.n	8002242 <__aeabi_f2iz+0x1a>
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <__aeabi_f2iz+0x3c>)
 800223e:	1898      	adds	r0, r3, r2
 8002240:	4770      	bx	lr
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	0400      	lsls	r0, r0, #16
 8002246:	4301      	orrs	r1, r0
 8002248:	2a95      	cmp	r2, #149	; 0x95
 800224a:	dc07      	bgt.n	800225c <__aeabi_f2iz+0x34>
 800224c:	2096      	movs	r0, #150	; 0x96
 800224e:	1a82      	subs	r2, r0, r2
 8002250:	40d1      	lsrs	r1, r2
 8002252:	4248      	negs	r0, r1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f3      	bne.n	8002240 <__aeabi_f2iz+0x18>
 8002258:	0008      	movs	r0, r1
 800225a:	e7f1      	b.n	8002240 <__aeabi_f2iz+0x18>
 800225c:	3a96      	subs	r2, #150	; 0x96
 800225e:	4091      	lsls	r1, r2
 8002260:	e7f7      	b.n	8002252 <__aeabi_f2iz+0x2a>
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	7fffffff 	.word	0x7fffffff

08002268 <__aeabi_ui2f>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	1e05      	subs	r5, r0, #0
 800226c:	d00e      	beq.n	800228c <__aeabi_ui2f+0x24>
 800226e:	f000 f877 	bl	8002360 <__clzsi2>
 8002272:	239e      	movs	r3, #158	; 0x9e
 8002274:	0004      	movs	r4, r0
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	2b96      	cmp	r3, #150	; 0x96
 800227a:	dc0c      	bgt.n	8002296 <__aeabi_ui2f+0x2e>
 800227c:	2808      	cmp	r0, #8
 800227e:	dd01      	ble.n	8002284 <__aeabi_ui2f+0x1c>
 8002280:	3c08      	subs	r4, #8
 8002282:	40a5      	lsls	r5, r4
 8002284:	026d      	lsls	r5, r5, #9
 8002286:	0a6d      	lsrs	r5, r5, #9
 8002288:	b2d8      	uxtb	r0, r3
 800228a:	e001      	b.n	8002290 <__aeabi_ui2f+0x28>
 800228c:	2000      	movs	r0, #0
 800228e:	2500      	movs	r5, #0
 8002290:	05c0      	lsls	r0, r0, #23
 8002292:	4328      	orrs	r0, r5
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	2b99      	cmp	r3, #153	; 0x99
 8002298:	dd09      	ble.n	80022ae <__aeabi_ui2f+0x46>
 800229a:	0002      	movs	r2, r0
 800229c:	0029      	movs	r1, r5
 800229e:	321b      	adds	r2, #27
 80022a0:	4091      	lsls	r1, r2
 80022a2:	1e4a      	subs	r2, r1, #1
 80022a4:	4191      	sbcs	r1, r2
 80022a6:	2205      	movs	r2, #5
 80022a8:	1a12      	subs	r2, r2, r0
 80022aa:	40d5      	lsrs	r5, r2
 80022ac:	430d      	orrs	r5, r1
 80022ae:	2c05      	cmp	r4, #5
 80022b0:	dc12      	bgt.n	80022d8 <__aeabi_ui2f+0x70>
 80022b2:	0029      	movs	r1, r5
 80022b4:	4e0c      	ldr	r6, [pc, #48]	; (80022e8 <__aeabi_ui2f+0x80>)
 80022b6:	4031      	ands	r1, r6
 80022b8:	076a      	lsls	r2, r5, #29
 80022ba:	d009      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022bc:	200f      	movs	r0, #15
 80022be:	4028      	ands	r0, r5
 80022c0:	2804      	cmp	r0, #4
 80022c2:	d005      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022c4:	3104      	adds	r1, #4
 80022c6:	014a      	lsls	r2, r1, #5
 80022c8:	d502      	bpl.n	80022d0 <__aeabi_ui2f+0x68>
 80022ca:	239f      	movs	r3, #159	; 0x9f
 80022cc:	4031      	ands	r1, r6
 80022ce:	1b1b      	subs	r3, r3, r4
 80022d0:	0189      	lsls	r1, r1, #6
 80022d2:	0a4d      	lsrs	r5, r1, #9
 80022d4:	b2d8      	uxtb	r0, r3
 80022d6:	e7db      	b.n	8002290 <__aeabi_ui2f+0x28>
 80022d8:	1f62      	subs	r2, r4, #5
 80022da:	4095      	lsls	r5, r2
 80022dc:	0029      	movs	r1, r5
 80022de:	4e02      	ldr	r6, [pc, #8]	; (80022e8 <__aeabi_ui2f+0x80>)
 80022e0:	4031      	ands	r1, r6
 80022e2:	076a      	lsls	r2, r5, #29
 80022e4:	d0f4      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022e6:	e7e9      	b.n	80022bc <__aeabi_ui2f+0x54>
 80022e8:	fbffffff 	.word	0xfbffffff

080022ec <__aeabi_cfrcmple>:
 80022ec:	4684      	mov	ip, r0
 80022ee:	0008      	movs	r0, r1
 80022f0:	4661      	mov	r1, ip
 80022f2:	e7ff      	b.n	80022f4 <__aeabi_cfcmpeq>

080022f4 <__aeabi_cfcmpeq>:
 80022f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80022f6:	f000 f8bd 	bl	8002474 <__lesf2>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d401      	bmi.n	8002302 <__aeabi_cfcmpeq+0xe>
 80022fe:	2100      	movs	r1, #0
 8002300:	42c8      	cmn	r0, r1
 8002302:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002304 <__aeabi_fcmpeq>:
 8002304:	b510      	push	{r4, lr}
 8002306:	f000 f849 	bl	800239c <__eqsf2>
 800230a:	4240      	negs	r0, r0
 800230c:	3001      	adds	r0, #1
 800230e:	bd10      	pop	{r4, pc}

08002310 <__aeabi_fcmplt>:
 8002310:	b510      	push	{r4, lr}
 8002312:	f000 f8af 	bl	8002474 <__lesf2>
 8002316:	2800      	cmp	r0, #0
 8002318:	db01      	blt.n	800231e <__aeabi_fcmplt+0xe>
 800231a:	2000      	movs	r0, #0
 800231c:	bd10      	pop	{r4, pc}
 800231e:	2001      	movs	r0, #1
 8002320:	bd10      	pop	{r4, pc}
 8002322:	46c0      	nop			; (mov r8, r8)

08002324 <__aeabi_fcmple>:
 8002324:	b510      	push	{r4, lr}
 8002326:	f000 f8a5 	bl	8002474 <__lesf2>
 800232a:	2800      	cmp	r0, #0
 800232c:	dd01      	ble.n	8002332 <__aeabi_fcmple+0xe>
 800232e:	2000      	movs	r0, #0
 8002330:	bd10      	pop	{r4, pc}
 8002332:	2001      	movs	r0, #1
 8002334:	bd10      	pop	{r4, pc}
 8002336:	46c0      	nop			; (mov r8, r8)

08002338 <__aeabi_fcmpgt>:
 8002338:	b510      	push	{r4, lr}
 800233a:	f000 f855 	bl	80023e8 <__gesf2>
 800233e:	2800      	cmp	r0, #0
 8002340:	dc01      	bgt.n	8002346 <__aeabi_fcmpgt+0xe>
 8002342:	2000      	movs	r0, #0
 8002344:	bd10      	pop	{r4, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	bd10      	pop	{r4, pc}
 800234a:	46c0      	nop			; (mov r8, r8)

0800234c <__aeabi_fcmpge>:
 800234c:	b510      	push	{r4, lr}
 800234e:	f000 f84b 	bl	80023e8 <__gesf2>
 8002352:	2800      	cmp	r0, #0
 8002354:	da01      	bge.n	800235a <__aeabi_fcmpge+0xe>
 8002356:	2000      	movs	r0, #0
 8002358:	bd10      	pop	{r4, pc}
 800235a:	2001      	movs	r0, #1
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <__clzsi2>:
 8002360:	211c      	movs	r1, #28
 8002362:	2301      	movs	r3, #1
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	4298      	cmp	r0, r3
 8002368:	d301      	bcc.n	800236e <__clzsi2+0xe>
 800236a:	0c00      	lsrs	r0, r0, #16
 800236c:	3910      	subs	r1, #16
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	4298      	cmp	r0, r3
 8002372:	d301      	bcc.n	8002378 <__clzsi2+0x18>
 8002374:	0a00      	lsrs	r0, r0, #8
 8002376:	3908      	subs	r1, #8
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	4298      	cmp	r0, r3
 800237c:	d301      	bcc.n	8002382 <__clzsi2+0x22>
 800237e:	0900      	lsrs	r0, r0, #4
 8002380:	3904      	subs	r1, #4
 8002382:	a202      	add	r2, pc, #8	; (adr r2, 800238c <__clzsi2+0x2c>)
 8002384:	5c10      	ldrb	r0, [r2, r0]
 8002386:	1840      	adds	r0, r0, r1
 8002388:	4770      	bx	lr
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	02020304 	.word	0x02020304
 8002390:	01010101 	.word	0x01010101
	...

0800239c <__eqsf2>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	0042      	lsls	r2, r0, #1
 80023a0:	0245      	lsls	r5, r0, #9
 80023a2:	024e      	lsls	r6, r1, #9
 80023a4:	004c      	lsls	r4, r1, #1
 80023a6:	0fc3      	lsrs	r3, r0, #31
 80023a8:	0a6d      	lsrs	r5, r5, #9
 80023aa:	2001      	movs	r0, #1
 80023ac:	0e12      	lsrs	r2, r2, #24
 80023ae:	0a76      	lsrs	r6, r6, #9
 80023b0:	0e24      	lsrs	r4, r4, #24
 80023b2:	0fc9      	lsrs	r1, r1, #31
 80023b4:	2aff      	cmp	r2, #255	; 0xff
 80023b6:	d006      	beq.n	80023c6 <__eqsf2+0x2a>
 80023b8:	2cff      	cmp	r4, #255	; 0xff
 80023ba:	d003      	beq.n	80023c4 <__eqsf2+0x28>
 80023bc:	42a2      	cmp	r2, r4
 80023be:	d101      	bne.n	80023c4 <__eqsf2+0x28>
 80023c0:	42b5      	cmp	r5, r6
 80023c2:	d006      	beq.n	80023d2 <__eqsf2+0x36>
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d1fc      	bne.n	80023c4 <__eqsf2+0x28>
 80023ca:	2cff      	cmp	r4, #255	; 0xff
 80023cc:	d1fa      	bne.n	80023c4 <__eqsf2+0x28>
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d1f8      	bne.n	80023c4 <__eqsf2+0x28>
 80023d2:	428b      	cmp	r3, r1
 80023d4:	d006      	beq.n	80023e4 <__eqsf2+0x48>
 80023d6:	2001      	movs	r0, #1
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d1f3      	bne.n	80023c4 <__eqsf2+0x28>
 80023dc:	0028      	movs	r0, r5
 80023de:	1e43      	subs	r3, r0, #1
 80023e0:	4198      	sbcs	r0, r3
 80023e2:	e7ef      	b.n	80023c4 <__eqsf2+0x28>
 80023e4:	2000      	movs	r0, #0
 80023e6:	e7ed      	b.n	80023c4 <__eqsf2+0x28>

080023e8 <__gesf2>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	0042      	lsls	r2, r0, #1
 80023ec:	0245      	lsls	r5, r0, #9
 80023ee:	024e      	lsls	r6, r1, #9
 80023f0:	004c      	lsls	r4, r1, #1
 80023f2:	0fc3      	lsrs	r3, r0, #31
 80023f4:	0a6d      	lsrs	r5, r5, #9
 80023f6:	0e12      	lsrs	r2, r2, #24
 80023f8:	0a76      	lsrs	r6, r6, #9
 80023fa:	0e24      	lsrs	r4, r4, #24
 80023fc:	0fc8      	lsrs	r0, r1, #31
 80023fe:	2aff      	cmp	r2, #255	; 0xff
 8002400:	d01b      	beq.n	800243a <__gesf2+0x52>
 8002402:	2cff      	cmp	r4, #255	; 0xff
 8002404:	d00e      	beq.n	8002424 <__gesf2+0x3c>
 8002406:	2a00      	cmp	r2, #0
 8002408:	d11b      	bne.n	8002442 <__gesf2+0x5a>
 800240a:	2c00      	cmp	r4, #0
 800240c:	d101      	bne.n	8002412 <__gesf2+0x2a>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d01c      	beq.n	800244c <__gesf2+0x64>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d00c      	beq.n	8002430 <__gesf2+0x48>
 8002416:	4283      	cmp	r3, r0
 8002418:	d01c      	beq.n	8002454 <__gesf2+0x6c>
 800241a:	2102      	movs	r1, #2
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	4008      	ands	r0, r1
 8002420:	3801      	subs	r0, #1
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	2e00      	cmp	r6, #0
 8002426:	d122      	bne.n	800246e <__gesf2+0x86>
 8002428:	2a00      	cmp	r2, #0
 800242a:	d1f4      	bne.n	8002416 <__gesf2+0x2e>
 800242c:	2d00      	cmp	r5, #0
 800242e:	d1f2      	bne.n	8002416 <__gesf2+0x2e>
 8002430:	2800      	cmp	r0, #0
 8002432:	d1f6      	bne.n	8002422 <__gesf2+0x3a>
 8002434:	2001      	movs	r0, #1
 8002436:	4240      	negs	r0, r0
 8002438:	e7f3      	b.n	8002422 <__gesf2+0x3a>
 800243a:	2d00      	cmp	r5, #0
 800243c:	d117      	bne.n	800246e <__gesf2+0x86>
 800243e:	2cff      	cmp	r4, #255	; 0xff
 8002440:	d0f0      	beq.n	8002424 <__gesf2+0x3c>
 8002442:	2c00      	cmp	r4, #0
 8002444:	d1e7      	bne.n	8002416 <__gesf2+0x2e>
 8002446:	2e00      	cmp	r6, #0
 8002448:	d1e5      	bne.n	8002416 <__gesf2+0x2e>
 800244a:	e7e6      	b.n	800241a <__gesf2+0x32>
 800244c:	2000      	movs	r0, #0
 800244e:	2d00      	cmp	r5, #0
 8002450:	d0e7      	beq.n	8002422 <__gesf2+0x3a>
 8002452:	e7e2      	b.n	800241a <__gesf2+0x32>
 8002454:	42a2      	cmp	r2, r4
 8002456:	dc05      	bgt.n	8002464 <__gesf2+0x7c>
 8002458:	dbea      	blt.n	8002430 <__gesf2+0x48>
 800245a:	42b5      	cmp	r5, r6
 800245c:	d802      	bhi.n	8002464 <__gesf2+0x7c>
 800245e:	d3e7      	bcc.n	8002430 <__gesf2+0x48>
 8002460:	2000      	movs	r0, #0
 8002462:	e7de      	b.n	8002422 <__gesf2+0x3a>
 8002464:	4243      	negs	r3, r0
 8002466:	4158      	adcs	r0, r3
 8002468:	0040      	lsls	r0, r0, #1
 800246a:	3801      	subs	r0, #1
 800246c:	e7d9      	b.n	8002422 <__gesf2+0x3a>
 800246e:	2002      	movs	r0, #2
 8002470:	4240      	negs	r0, r0
 8002472:	e7d6      	b.n	8002422 <__gesf2+0x3a>

08002474 <__lesf2>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	0042      	lsls	r2, r0, #1
 8002478:	0245      	lsls	r5, r0, #9
 800247a:	024e      	lsls	r6, r1, #9
 800247c:	004c      	lsls	r4, r1, #1
 800247e:	0fc3      	lsrs	r3, r0, #31
 8002480:	0a6d      	lsrs	r5, r5, #9
 8002482:	0e12      	lsrs	r2, r2, #24
 8002484:	0a76      	lsrs	r6, r6, #9
 8002486:	0e24      	lsrs	r4, r4, #24
 8002488:	0fc8      	lsrs	r0, r1, #31
 800248a:	2aff      	cmp	r2, #255	; 0xff
 800248c:	d00b      	beq.n	80024a6 <__lesf2+0x32>
 800248e:	2cff      	cmp	r4, #255	; 0xff
 8002490:	d00d      	beq.n	80024ae <__lesf2+0x3a>
 8002492:	2a00      	cmp	r2, #0
 8002494:	d11f      	bne.n	80024d6 <__lesf2+0x62>
 8002496:	2c00      	cmp	r4, #0
 8002498:	d116      	bne.n	80024c8 <__lesf2+0x54>
 800249a:	2e00      	cmp	r6, #0
 800249c:	d114      	bne.n	80024c8 <__lesf2+0x54>
 800249e:	2000      	movs	r0, #0
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d010      	beq.n	80024c6 <__lesf2+0x52>
 80024a4:	e009      	b.n	80024ba <__lesf2+0x46>
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	d10c      	bne.n	80024c4 <__lesf2+0x50>
 80024aa:	2cff      	cmp	r4, #255	; 0xff
 80024ac:	d113      	bne.n	80024d6 <__lesf2+0x62>
 80024ae:	2e00      	cmp	r6, #0
 80024b0:	d108      	bne.n	80024c4 <__lesf2+0x50>
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d008      	beq.n	80024c8 <__lesf2+0x54>
 80024b6:	4283      	cmp	r3, r0
 80024b8:	d012      	beq.n	80024e0 <__lesf2+0x6c>
 80024ba:	2102      	movs	r1, #2
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	4008      	ands	r0, r1
 80024c0:	3801      	subs	r0, #1
 80024c2:	e000      	b.n	80024c6 <__lesf2+0x52>
 80024c4:	2002      	movs	r0, #2
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	d1f4      	bne.n	80024b6 <__lesf2+0x42>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1fa      	bne.n	80024c6 <__lesf2+0x52>
 80024d0:	2001      	movs	r0, #1
 80024d2:	4240      	negs	r0, r0
 80024d4:	e7f7      	b.n	80024c6 <__lesf2+0x52>
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d1ed      	bne.n	80024b6 <__lesf2+0x42>
 80024da:	2e00      	cmp	r6, #0
 80024dc:	d1eb      	bne.n	80024b6 <__lesf2+0x42>
 80024de:	e7ec      	b.n	80024ba <__lesf2+0x46>
 80024e0:	42a2      	cmp	r2, r4
 80024e2:	dc05      	bgt.n	80024f0 <__lesf2+0x7c>
 80024e4:	dbf2      	blt.n	80024cc <__lesf2+0x58>
 80024e6:	42b5      	cmp	r5, r6
 80024e8:	d802      	bhi.n	80024f0 <__lesf2+0x7c>
 80024ea:	d3ef      	bcc.n	80024cc <__lesf2+0x58>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7ea      	b.n	80024c6 <__lesf2+0x52>
 80024f0:	4243      	negs	r3, r0
 80024f2:	4158      	adcs	r0, r3
 80024f4:	0040      	lsls	r0, r0, #1
 80024f6:	3801      	subs	r0, #1
 80024f8:	e7e5      	b.n	80024c6 <__lesf2+0x52>
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024fc:	b500      	push	{lr}
 80024fe:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002500:	4a09      	ldr	r2, [pc, #36]	; (8002528 <MX_DMA_Init+0x2c>)
 8002502:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002504:	2301      	movs	r3, #1
 8002506:	4319      	orrs	r1, r3
 8002508:	6391      	str	r1, [r2, #56]	; 0x38
 800250a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800250c:	4013      	ands	r3, r2
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2102      	movs	r1, #2
 8002516:	2009      	movs	r0, #9
 8002518:	f001 fc56 	bl	8003dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800251c:	2009      	movs	r0, #9
 800251e:	f001 fc85 	bl	8003e2c <HAL_NVIC_EnableIRQ>

}
 8002522:	b003      	add	sp, #12
 8002524:	bd00      	pop	{pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	40021000 	.word	0x40021000

0800252c <doseFlashHasPackedMessage>:
{
    uint16_t length;
    uint16_t getHead;    

    /*Is head matched*/ 
    getHead = (uint16_t)(*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR ));      
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <doseFlashHasPackedMessage+0x18>)
    if( EEPPROM_PACKAGEHEAD != getHead )
 800252e:	881a      	ldrh	r2, [r3, #0]
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <doseFlashHasPackedMessage+0x1c>)
    {
        return false;
 8002532:	2000      	movs	r0, #0
    if( EEPPROM_PACKAGEHEAD != getHead )
 8002534:	429a      	cmp	r2, r3
 8002536:	d104      	bne.n	8002542 <doseFlashHasPackedMessage+0x16>
    }
    
    /*Is length zero*/
    length = (*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+2));
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <doseFlashHasPackedMessage+0x20>)
    if( 0 == length)
 800253a:	8818      	ldrh	r0, [r3, #0]
 800253c:	1e43      	subs	r3, r0, #1
 800253e:	4198      	sbcs	r0, r3
 8002540:	b2c0      	uxtb	r0, r0
    {
        return false;
    }
    
    return true;
}
 8002542:	4770      	bx	lr
 8002544:	0800f800 	.word	0x0800f800
 8002548:	0000aa55 	.word	0x0000aa55
 800254c:	0800f802 	.word	0x0800f802

08002550 <getValuablePackedMessageLengthofFlash>:
uint16_t getValuablePackedMessageLengthofFlash( void )
{
    uint16_t length;
         
    /*Is head matched*/       
    if( EEPPROM_PACKAGEHEAD != (*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR )) )
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <getValuablePackedMessageLengthofFlash+0x14>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <getValuablePackedMessageLengthofFlash+0x18>)
    {
        return 0;
 8002556:	2000      	movs	r0, #0
    if( EEPPROM_PACKAGEHEAD != (*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR )) )
 8002558:	429a      	cmp	r2, r3
 800255a:	d101      	bne.n	8002560 <getValuablePackedMessageLengthofFlash+0x10>
    }
    
    /*Get length*/
    length = (uint16_t)(*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+2));   
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <getValuablePackedMessageLengthofFlash+0x1c>)
 800255e:	8818      	ldrh	r0, [r3, #0]
    
    return length;
}
 8002560:	4770      	bx	lr
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	0800f800 	.word	0x0800f800
 8002568:	0000aa55 	.word	0x0000aa55
 800256c:	0800f802 	.word	0x0800f802

08002570 <readPackedMessageFromFlash>:
* Input          : buff:point to first location of received buffer.length:Maxmum length of reception
* Output         : 
* Return         : reception length
*******************************************************************************/
uint16_t readPackedMessageFromFlash( uint8_t *buff , uint16_t length)
{
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	0004      	movs	r4, r0
 8002574:	000d      	movs	r5, r1
    int i;
    uint16_t getLength;
    
    if( !doseFlashHasPackedMessage() )
 8002576:	f7ff ffd9 	bl	800252c <doseFlashHasPackedMessage>
 800257a:	2800      	cmp	r0, #0
 800257c:	d010      	beq.n	80025a0 <readPackedMessageFromFlash+0x30>
        return 0;
    
    /*Get valuable length*/
    getLength = getValuablePackedMessageLengthofFlash();
 800257e:	f7ff ffe7 	bl	8002550 <getValuablePackedMessageLengthofFlash>
    
    /*Read out message*/
    for(i=0;i<MIN(getLength,length);i++)
 8002582:	1c03      	adds	r3, r0, #0
 8002584:	42a8      	cmp	r0, r5
 8002586:	d900      	bls.n	800258a <readPackedMessageFromFlash+0x1a>
 8002588:	1c2b      	adds	r3, r5, #0
 800258a:	b298      	uxth	r0, r3
 800258c:	1e01      	subs	r1, r0, #0
 800258e:	dd06      	ble.n	800259e <readPackedMessageFromFlash+0x2e>
 8002590:	2300      	movs	r3, #0
    {
        buff[i]= *(uint8_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+8+i);
 8002592:	4d04      	ldr	r5, [pc, #16]	; (80025a4 <readPackedMessageFromFlash+0x34>)
 8002594:	5d5a      	ldrb	r2, [r3, r5]
 8002596:	54e2      	strb	r2, [r4, r3]
    for(i=0;i<MIN(getLength,length);i++)
 8002598:	3301      	adds	r3, #1
 800259a:	428b      	cmp	r3, r1
 800259c:	dbfa      	blt.n	8002594 <readPackedMessageFromFlash+0x24>
    }     
    
    return MIN(getLength,length);
}
 800259e:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 80025a0:	2000      	movs	r0, #0
 80025a2:	e7fc      	b.n	800259e <readPackedMessageFromFlash+0x2e>
 80025a4:	0800f808 	.word	0x0800f808

080025a8 <writeMessageToFlash>:
* Input          : buff:pointer of first data, length: write length
* Output         : 
* Return         : true/false
*******************************************************************************/
bool writeMessageToFlash( uint8_t *buff , uint16_t length)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	0007      	movs	r7, r0
 80025b4:	000d      	movs	r5, r1
    uint64_t temp;
    int i;
    FLASH_EraseInitTypeDef My_Flash;
    
    /*Protection*/
    if( (length+4) > STM32G0xx_PAGE_SIZE )
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <writeMessageToFlash+0xcc>)
    {
        return false;
 80025b8:	2000      	movs	r0, #0
    if( (length+4) > STM32G0xx_PAGE_SIZE )
 80025ba:	4299      	cmp	r1, r3
 80025bc:	d904      	bls.n	80025c8 <writeMessageToFlash+0x20>
        }
    }    
    
    HAL_FLASH_Lock();
    return true;    
}
 80025be:	b007      	add	sp, #28
 80025c0:	bcc0      	pop	{r6, r7}
 80025c2:	46b9      	mov	r9, r7
 80025c4:	46b0      	mov	r8, r6
 80025c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_FLASH_Unlock();
 80025c8:	f001 fe4e 	bl	8004268 <HAL_FLASH_Unlock>
    My_Flash.TypeErase = FLASH_TYPEERASE_PAGES;  
 80025cc:	2302      	movs	r3, #2
 80025ce:	9302      	str	r3, [sp, #8]
    My_Flash.Page        = 31;
 80025d0:	331d      	adds	r3, #29
 80025d2:	9304      	str	r3, [sp, #16]
    My_Flash.NbPages = 1;                        
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	9305      	str	r3, [sp, #20]
    uint32_t PageError = 0;                    
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
    if (HAL_FLASHEx_Erase(&My_Flash, &PageError) != HAL_OK) {
 80025dc:	a901      	add	r1, sp, #4
 80025de:	a802      	add	r0, sp, #8
 80025e0:	f001 fee8 	bl	80043b4 <HAL_FLASHEx_Erase>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d13c      	bne.n	8002662 <writeMessageToFlash+0xba>
    temp = EEPPROM_PACKAGEHEAD |  (uint64_t)length << 16;    
 80025e8:	0c2b      	lsrs	r3, r5, #16
 80025ea:	0429      	lsls	r1, r5, #16
 80025ec:	4a22      	ldr	r2, [pc, #136]	; (8002678 <writeMessageToFlash+0xd0>)
 80025ee:	430a      	orrs	r2, r1
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR, temp);
 80025f0:	4922      	ldr	r1, [pc, #136]	; (800267c <writeMessageToFlash+0xd4>)
 80025f2:	2001      	movs	r0, #1
 80025f4:	f001 fe86 	bl	8004304 <HAL_FLASH_Program>
    for(i=0 ;i<length/8 ;i++)
 80025f8:	08eb      	lsrs	r3, r5, #3
 80025fa:	4699      	mov	r9, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	dd21      	ble.n	8002644 <writeMessageToFlash+0x9c>
 8002600:	003c      	movs	r4, r7
 8002602:	2600      	movs	r6, #0
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR+8+8*i, temp);
 8002604:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <writeMessageToFlash+0xd8>)
 8002606:	1bdb      	subs	r3, r3, r7
 8002608:	4698      	mov	r8, r3
        temp = buff[8*i] | (uint64_t)buff[8*i+1]<<8 | (uint64_t)buff[8*i+2]<<16 | (uint64_t)buff[8*i+3]<<24\
 800260a:	7862      	ldrb	r2, [r4, #1]
 800260c:	0212      	lsls	r2, r2, #8
 800260e:	78a3      	ldrb	r3, [r4, #2]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	7823      	ldrb	r3, [r4, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	78e3      	ldrb	r3, [r4, #3]
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	431a      	orrs	r2, r3
        | (uint64_t)buff[8*i+4]<<32 | (uint64_t)buff[8*i+5]<<40 | (uint64_t)buff[8*i+6]<<48 | (uint64_t)buff[8*i+7]<<56;
 800261e:	7923      	ldrb	r3, [r4, #4]
 8002620:	7961      	ldrb	r1, [r4, #5]
 8002622:	0209      	lsls	r1, r1, #8
 8002624:	430b      	orrs	r3, r1
 8002626:	79a1      	ldrb	r1, [r4, #6]
 8002628:	0409      	lsls	r1, r1, #16
 800262a:	430b      	orrs	r3, r1
 800262c:	79e1      	ldrb	r1, [r4, #7]
 800262e:	0609      	lsls	r1, r1, #24
        temp = buff[8*i] | (uint64_t)buff[8*i+1]<<8 | (uint64_t)buff[8*i+2]<<16 | (uint64_t)buff[8*i+3]<<24\
 8002630:	430b      	orrs	r3, r1
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR+8+8*i, temp);
 8002632:	4641      	mov	r1, r8
 8002634:	1909      	adds	r1, r1, r4
 8002636:	2001      	movs	r0, #1
 8002638:	f001 fe64 	bl	8004304 <HAL_FLASH_Program>
    for(i=0 ;i<length/8 ;i++)
 800263c:	3601      	adds	r6, #1
 800263e:	3408      	adds	r4, #8
 8002640:	454e      	cmp	r6, r9
 8002642:	dbe2      	blt.n	800260a <writeMessageToFlash+0x62>
    for(i=0 ;i<length ;i++)
 8002644:	2d00      	cmp	r5, #0
 8002646:	dd08      	ble.n	800265a <writeMessageToFlash+0xb2>
 8002648:	2300      	movs	r3, #0
        if( *(uint8_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+8+i) != buff[i] )
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <writeMessageToFlash+0xd8>)
 800264c:	5c19      	ldrb	r1, [r3, r0]
 800264e:	5cfa      	ldrb	r2, [r7, r3]
 8002650:	4291      	cmp	r1, r2
 8002652:	d10a      	bne.n	800266a <writeMessageToFlash+0xc2>
    for(i=0 ;i<length ;i++)
 8002654:	3301      	adds	r3, #1
 8002656:	42ab      	cmp	r3, r5
 8002658:	dbf8      	blt.n	800264c <writeMessageToFlash+0xa4>
    HAL_FLASH_Lock();
 800265a:	f001 fe89 	bl	8004370 <HAL_FLASH_Lock>
    return true;    
 800265e:	2001      	movs	r0, #1
 8002660:	e7ad      	b.n	80025be <writeMessageToFlash+0x16>
        HAL_FLASH_Lock();
 8002662:	f001 fe85 	bl	8004370 <HAL_FLASH_Lock>
        return false;
 8002666:	2000      	movs	r0, #0
 8002668:	e7a9      	b.n	80025be <writeMessageToFlash+0x16>
            HAL_FLASH_Lock();
 800266a:	f001 fe81 	bl	8004370 <HAL_FLASH_Lock>
            return false;
 800266e:	2000      	movs	r0, #0
 8002670:	e7a5      	b.n	80025be <writeMessageToFlash+0x16>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	000007fc 	.word	0x000007fc
 8002678:	0000aa55 	.word	0x0000aa55
 800267c:	0800f800 	.word	0x0800f800
 8002680:	0800f808 	.word	0x0800f808

08002684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002684:	b510      	push	{r4, lr}
 8002686:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	220c      	movs	r2, #12
 800268a:	2100      	movs	r1, #0
 800268c:	a805      	add	r0, sp, #20
 800268e:	f002 fed2 	bl	8005436 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <MX_GPIO_Init+0x8c>)
 8002694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002696:	2201      	movs	r2, #1
 8002698:	4311      	orrs	r1, r2
 800269a:	6359      	str	r1, [r3, #52]	; 0x34
 800269c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800269e:	400a      	ands	r2, r1
 80026a0:	9201      	str	r2, [sp, #4]
 80026a2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026a6:	2202      	movs	r2, #2
 80026a8:	4311      	orrs	r1, r2
 80026aa:	6359      	str	r1, [r3, #52]	; 0x34
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	401a      	ands	r2, r3
 80026b0:	9202      	str	r2, [sp, #8]
 80026b2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_K1_Pin|SW_K2_Pin|SW_K3_Pin|SW_K4_Pin
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_GPIO_Init+0x90>)
 80026b6:	9303      	str	r3, [sp, #12]
                          |SW_K5_Pin|SW_K8_Pin|SW_K6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026b8:	24c4      	movs	r4, #196	; 0xc4
 80026ba:	03a4      	lsls	r4, r4, #14
 80026bc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	20a0      	movs	r0, #160	; 0xa0
 80026c0:	a903      	add	r1, sp, #12
 80026c2:	05c0      	lsls	r0, r0, #23
 80026c4:	f001 fec4 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_K7_Pin;
 80026c8:	2308      	movs	r3, #8
 80026ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026cc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(SW_K7_GPIO_Port, &GPIO_InitStruct);
 80026d2:	a903      	add	r1, sp, #12
 80026d4:	4810      	ldr	r0, [pc, #64]	; (8002718 <MX_GPIO_Init+0x94>)
 80026d6:	f001 febb 	bl	8004450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2101      	movs	r1, #1
 80026de:	2005      	movs	r0, #5
 80026e0:	f001 fb72 	bl	8003dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80026e4:	2005      	movs	r0, #5
 80026e6:	f001 fba1 	bl	8003e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2101      	movs	r1, #1
 80026ee:	2006      	movs	r0, #6
 80026f0:	f001 fb6a 	bl	8003dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80026f4:	2006      	movs	r0, #6
 80026f6:	f001 fb99 	bl	8003e2c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2101      	movs	r1, #1
 80026fe:	2007      	movs	r0, #7
 8002700:	f001 fb62 	bl	8003dc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002704:	2007      	movs	r0, #7
 8002706:	f001 fb91 	bl	8003e2c <HAL_NVIC_EnableIRQ>

}
 800270a:	b008      	add	sp, #32
 800270c:	bd10      	pop	{r4, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40021000 	.word	0x40021000
 8002714:	000081e3 	.word	0x000081e3
 8002718:	50000400 	.word	0x50000400

0800271c <my_gpio_deinit>:

/* USER CODE BEGIN 2 */
void my_gpio_deinit(void)
{
 800271c:	b500      	push	{lr}
 800271e:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	2210      	movs	r2, #16
 8002722:	2100      	movs	r1, #0
 8002724:	a802      	add	r0, sp, #8
 8002726:	f002 fe86 	bl	8005436 <memset>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_K1_Pin|SW_K2_Pin|SW_K3_Pin|SW_K4_Pin
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <my_gpio_deinit+0x58>)
 800272c:	9301      	str	r3, [sp, #4]
                          |SW_K5_Pin|SW_K8_Pin|SW_K6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	20a0      	movs	r0, #160	; 0xa0
 8002730:	a901      	add	r1, sp, #4
 8002732:	05c0      	lsls	r0, r0, #23
 8002734:	f001 fe8c 	bl	8004450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_K7_Pin;
 8002738:	2308      	movs	r3, #8
 800273a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(SW_K7_GPIO_Port, &GPIO_InitStruct);
 8002742:	a901      	add	r1, sp, #4
 8002744:	480c      	ldr	r0, [pc, #48]	; (8002778 <my_gpio_deinit+0x5c>)
 8002746:	f001 fe83 	bl	8004450 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 800274a:	2005      	movs	r0, #5
 800274c:	f001 fb7a 	bl	8003e44 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002750:	2006      	movs	r0, #6
 8002752:	f001 fb77 	bl	8003e44 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);  
 8002756:	2007      	movs	r0, #7
 8002758:	f001 fb74 	bl	8003e44 <HAL_NVIC_DisableIRQ>

  __HAL_RCC_GPIOA_CLK_DISABLE();
 800275c:	4b07      	ldr	r3, [pc, #28]	; (800277c <my_gpio_deinit+0x60>)
 800275e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002760:	2101      	movs	r1, #1
 8002762:	438a      	bics	r2, r1
 8002764:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_DISABLE();  
 8002766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002768:	3101      	adds	r1, #1
 800276a:	438a      	bics	r2, r1
 800276c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800276e:	b007      	add	sp, #28
 8002770:	bd00      	pop	{pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	000081e3 	.word	0x000081e3
 8002778:	50000400 	.word	0x50000400
 800277c:	40021000 	.word	0x40021000

08002780 <user_i2c_init>:

}

/* USER CODE BEGIN 1 */
void user_i2c_init(void)
{
 8002780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002782:	46c6      	mov	lr, r8
 8002784:	b500      	push	{lr}
 8002786:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002788:	221c      	movs	r2, #28
 800278a:	2100      	movs	r1, #0
 800278c:	a809      	add	r0, sp, #36	; 0x24
 800278e:	f002 fe52 	bl	8005436 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002792:	220c      	movs	r2, #12
 8002794:	2100      	movs	r1, #0
 8002796:	a805      	add	r0, sp, #20
 8002798:	f002 fe4d 	bl	8005436 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800279c:	4d32      	ldr	r5, [pc, #200]	; (8002868 <user_i2c_init+0xe8>)
 800279e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027a0:	2601      	movs	r6, #1
 80027a2:	4333      	orrs	r3, r6
 80027a4:	636b      	str	r3, [r5, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80027a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80027a8:	4033      	ands	r3, r6
 80027aa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80027ac:	9b02      	ldr	r3, [sp, #8]
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
  /**I2C2 GPIO Configuration
  PA11 [PA9]   ------> I2C2_SCL
  PA12 [PA10]   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027b4:	2402      	movs	r4, #2
 80027b6:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80027b8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027ba:	2306      	movs	r3, #6
 80027bc:	4698      	mov	r8, r3
 80027be:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	27a0      	movs	r7, #160	; 0xa0
 80027c2:	05ff      	lsls	r7, r7, #23
 80027c4:	a903      	add	r1, sp, #12
 80027c6:	0038      	movs	r0, r7
 80027c8:	f002 fd0e 	bl	80051e8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027d2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027d4:	2400      	movs	r4, #0
 80027d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80027d8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027da:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80027dc:	4643      	mov	r3, r8
 80027de:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e0:	a903      	add	r1, sp, #12
 80027e2:	0038      	movs	r0, r7
 80027e4:	f002 fd00 	bl	80051e8 <LL_GPIO_Init>
  SET_BIT(RCC->APBENR1, Periphs);
 80027e8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	03c9      	lsls	r1, r1, #15
 80027ee:	430a      	orrs	r2, r1
 80027f0:	63ea      	str	r2, [r5, #60]	; 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80027f2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80027f4:	400b      	ands	r3, r1
 80027f6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80027f8:	9b01      	ldr	r3, [sp, #4]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027fa:	4b1c      	ldr	r3, [pc, #112]	; (800286c <user_i2c_init+0xec>)
 80027fc:	21c6      	movs	r1, #198	; 0xc6
 80027fe:	0089      	lsls	r1, r1, #2
 8002800:	585a      	ldr	r2, [r3, r1]
 8002802:	20ff      	movs	r0, #255	; 0xff
 8002804:	4382      	bics	r2, r0
 8002806:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0452      	lsls	r2, r2, #17
 800280c:	601a      	str	r2, [r3, #0]

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800280e:	9409      	str	r4, [sp, #36]	; 0x24
  I2C_InitStruct.Timing = 0x10707DBC;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <user_i2c_init+0xf0>)
 8002812:	930a      	str	r3, [sp, #40]	; 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002814:	940b      	str	r4, [sp, #44]	; 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 8002816:	940c      	str	r4, [sp, #48]	; 0x30
  I2C_InitStruct.OwnAddress1 = i2c_address[0]<<1;
 8002818:	4d16      	ldr	r5, [pc, #88]	; (8002874 <user_i2c_init+0xf4>)
 800281a:	782b      	ldrb	r3, [r5, #0]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	930d      	str	r3, [sp, #52]	; 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002820:	940e      	str	r4, [sp, #56]	; 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002822:	940f      	str	r4, [sp, #60]	; 0x3c
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8002824:	4c14      	ldr	r4, [pc, #80]	; (8002878 <user_i2c_init+0xf8>)
 8002826:	a909      	add	r1, sp, #36	; 0x24
 8002828:	0020      	movs	r0, r4
 800282a:	f002 fd71 	bl	8005310 <LL_I2C_Init>
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800282e:	6862      	ldr	r2, [r4, #4]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	049b      	lsls	r3, r3, #18
 8002834:	4313      	orrs	r3, r2
 8002836:	6063      	str	r3, [r4, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002838:	68e3      	ldr	r3, [r4, #12]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <user_i2c_init+0xfc>)
 800283c:	4013      	ands	r3, r2
 800283e:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002840:	68e3      	ldr	r3, [r4, #12]
 8002842:	4a0f      	ldr	r2, [pc, #60]	; (8002880 <user_i2c_init+0x100>)
 8002844:	4013      	ands	r3, r2
 8002846:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <user_i2c_init+0x104>)
 800284c:	4013      	ands	r3, r2
 800284e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <user_i2c_init+0x108>)
 8002854:	4013      	ands	r3, r2
 8002856:	6023      	str	r3, [r4, #0]
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
  LL_I2C_DisableOwnAddress2(I2C2);
  LL_I2C_DisableGeneralCall(I2C2);
  LL_I2C_EnableClockStretching(I2C2);
  /* USER CODE BEGIN I2C2_Init 2 */
  set_i2c_slave_address(i2c_address[0]);
 8002858:	7828      	ldrb	r0, [r5, #0]
 800285a:	f000 f817 	bl	800288c <set_i2c_slave_address>
  /* USER CODE END I2C2_Init 2 */

}
 800285e:	b010      	add	sp, #64	; 0x40
 8002860:	bc80      	pop	{r7}
 8002862:	46b8      	mov	r8, r7
 8002864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	40021000 	.word	0x40021000
 800286c:	e000e100 	.word	0xe000e100
 8002870:	10707dbc 	.word	0x10707dbc
 8002874:	20000758 	.word	0x20000758
 8002878:	40005800 	.word	0x40005800
 800287c:	fffff801 	.word	0xfffff801
 8002880:	ffff7fff 	.word	0xffff7fff
 8002884:	fff7ffff 	.word	0xfff7ffff
 8002888:	fffdffff 	.word	0xfffdffff

0800288c <set_i2c_slave_address>:
volatile uint32_t i2c_stop_timeout_flag = 0;
volatile uint32_t i2c_stop_timeout_counter = 0;

void set_i2c_slave_address(uint8_t addr)
{
  i2c_addr = (addr << 1);
 800288c:	0040      	lsls	r0, r0, #1
 800288e:	b2c0      	uxtb	r0, r0
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <set_i2c_slave_address+0xc>)
 8002892:	7018      	strb	r0, [r3, #0]
}
 8002894:	4770      	bx	lr
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	200003e8 	.word	0x200003e8

0800289c <i2c2_it_enable>:
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <i2c2_it_enable+0x2c>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2101      	movs	r1, #1
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	3107      	adds	r1, #7
 80028aa:	430a      	orrs	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	3108      	adds	r1, #8
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	3170      	adds	r1, #112	; 0x70
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	3960      	subs	r1, #96	; 0x60
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

  LL_I2C_EnableIT_ADDR(I2C2);
  LL_I2C_EnableIT_NACK(I2C2);
  LL_I2C_EnableIT_ERR(I2C2);
  LL_I2C_EnableIT_STOP(I2C2);
}
 80028c6:	4770      	bx	lr
 80028c8:	40005800 	.word	0x40005800

080028cc <i2c2_it_disable>:
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <i2c2_it_disable+0x24>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2108      	movs	r1, #8
 80028d2:	438a      	bics	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	3108      	adds	r1, #8
 80028da:	438a      	bics	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	3170      	adds	r1, #112	; 0x70
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	3960      	subs	r1, #96	; 0x60
 80028ea:	438a      	bics	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
{
  LL_I2C_DisableIT_ADDR(I2C2);
  LL_I2C_DisableIT_NACK(I2C2);
  LL_I2C_DisableIT_ERR(I2C2);
  LL_I2C_DisableIT_STOP(I2C2);
}
 80028ee:	4770      	bx	lr
 80028f0:	40005800 	.word	0x40005800

080028f4 <i2c2_set_send_data>:
void Error_Callback(void)
{

}

void i2c2_set_send_data(uint8_t *tx_ptr, uint16_t len) {
 80028f4:	b510      	push	{r4, lr}
 80028f6:	000c      	movs	r4, r1
  if (len > I2C_RECEIVE_BUFFER_LEN) {
 80028f8:	2396      	movs	r3, #150	; 0x96
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4299      	cmp	r1, r3
 80028fe:	d802      	bhi.n	8002906 <i2c2_set_send_data+0x12>
    len = I2C_RECEIVE_BUFFER_LEN;
	}

  if (len == 0 || tx_ptr == NULL) {
 8002900:	2900      	cmp	r1, #0
 8002902:	d102      	bne.n	800290a <i2c2_set_send_data+0x16>
 8002904:	e00d      	b.n	8002922 <i2c2_set_send_data+0x2e>
    len = I2C_RECEIVE_BUFFER_LEN;
 8002906:	2496      	movs	r4, #150	; 0x96
 8002908:	00a4      	lsls	r4, r4, #2
  if (len == 0 || tx_ptr == NULL) {
 800290a:	2800      	cmp	r0, #0
 800290c:	d009      	beq.n	8002922 <i2c2_set_send_data+0x2e>
    return;
  }
  memcpy((void *)tx_buffer, tx_ptr, len);
 800290e:	0022      	movs	r2, r4
 8002910:	0001      	movs	r1, r0
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <i2c2_set_send_data+0x30>)
 8002914:	f002 fd86 	bl	8005424 <memcpy>
  tx_buffer_index = 0;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <i2c2_set_send_data+0x34>)
 800291a:	2200      	movs	r2, #0
 800291c:	801a      	strh	r2, [r3, #0]
  tx_len = len;
 800291e:	4b03      	ldr	r3, [pc, #12]	; (800292c <i2c2_set_send_data+0x38>)
 8002920:	801c      	strh	r4, [r3, #0]
}
 8002922:	bd10      	pop	{r4, pc}
 8002924:	200003f8 	.word	0x200003f8
 8002928:	20000650 	.word	0x20000650
 800292c:	20000652 	.word	0x20000652

08002930 <Slave_Reception_Callback>:

void Slave_Reception_Callback(void)
{
  /* Read character in Receive Data register.
  RXNE flag is cleared by reading data in RXDR register */
  aReceiveBuffer[ubReceiveIndex] = LL_I2C_ReceiveData8(I2C2);
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <Slave_Reception_Callback+0x2c>)
 8002932:	8813      	ldrh	r3, [r2, #0]
 8002934:	b29b      	uxth	r3, r3
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8002936:	490a      	ldr	r1, [pc, #40]	; (8002960 <Slave_Reception_Callback+0x30>)
 8002938:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800293a:	b2c9      	uxtb	r1, r1
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <Slave_Reception_Callback+0x34>)
 800293e:	54c1      	strb	r1, [r0, r3]
  ubReceiveIndex++;
 8002940:	8813      	ldrh	r3, [r2, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]
  if (ubReceiveIndex >= I2C_RECEIVE_BUFFER_LEN) {
 8002948:	8813      	ldrh	r3, [r2, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	2296      	movs	r2, #150	; 0x96
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4293      	cmp	r3, r2
 8002952:	d302      	bcc.n	800295a <Slave_Reception_Callback+0x2a>
    ubReceiveIndex = 0;
 8002954:	4b01      	ldr	r3, [pc, #4]	; (800295c <Slave_Reception_Callback+0x2c>)
 8002956:	2200      	movs	r2, #0
 8002958:	801a      	strh	r2, [r3, #0]
  }
}
 800295a:	4770      	bx	lr
 800295c:	20000654 	.word	0x20000654
 8002960:	40005800 	.word	0x40005800
 8002964:	20000190 	.word	0x20000190

08002968 <Slave_Ready_To_Transmit_Callback>:

void Slave_Ready_To_Transmit_Callback(void)
{
  /* Send the Byte requested by the Master */
  LL_I2C_TransmitData8(I2C2, tx_buffer[tx_buffer_index]);
 8002968:	4a0f      	ldr	r2, [pc, #60]	; (80029a8 <Slave_Ready_To_Transmit_Callback+0x40>)
 800296a:	8813      	ldrh	r3, [r2, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	490f      	ldr	r1, [pc, #60]	; (80029ac <Slave_Ready_To_Transmit_Callback+0x44>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	b2db      	uxtb	r3, r3
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <Slave_Ready_To_Transmit_Callback+0x48>)
 8002976:	628b      	str	r3, [r1, #40]	; 0x28
  tx_buffer_index++;
 8002978:	8813      	ldrh	r3, [r2, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	b29b      	uxth	r3, r3
 800297e:	8013      	strh	r3, [r2, #0]
  if (tx_buffer_index >= tx_len) {
 8002980:	8813      	ldrh	r3, [r2, #0]
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <Slave_Ready_To_Transmit_Callback+0x4c>)
 8002984:	8812      	ldrh	r2, [r2, #0]
 8002986:	b29b      	uxth	r3, r3
 8002988:	4293      	cmp	r3, r2
 800298a:	d302      	bcc.n	8002992 <Slave_Ready_To_Transmit_Callback+0x2a>
    tx_buffer_index = 0;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <Slave_Ready_To_Transmit_Callback+0x40>)
 800298e:	2200      	movs	r2, #0
 8002990:	801a      	strh	r2, [r3, #0]
  }
  if (tx_buffer_index >= I2C_RECEIVE_BUFFER_LEN) {
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <Slave_Ready_To_Transmit_Callback+0x40>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	2296      	movs	r2, #150	; 0x96
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4293      	cmp	r3, r2
 800299e:	d302      	bcc.n	80029a6 <Slave_Ready_To_Transmit_Callback+0x3e>
    tx_buffer_index = 0;
 80029a0:	4b01      	ldr	r3, [pc, #4]	; (80029a8 <Slave_Ready_To_Transmit_Callback+0x40>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
  }
}
 80029a6:	4770      	bx	lr
 80029a8:	20000650 	.word	0x20000650
 80029ac:	200003f8 	.word	0x200003f8
 80029b0:	40005800 	.word	0x40005800
 80029b4:	20000652 	.word	0x20000652

080029b8 <I2C2_IRQHandler>:

void I2C2_IRQHandler(void)
{
 80029b8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN I2C2_IRQn 0 */
  i2c_timeout_counter++;
 80029ba:	4b53      	ldr	r3, [pc, #332]	; (8002b08 <I2C2_IRQHandler+0x150>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	3201      	adds	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
  if (i2c_timeout_counter > 12000) {
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b51      	ldr	r3, [pc, #324]	; (8002b0c <I2C2_IRQHandler+0x154>)
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d814      	bhi.n	80029f4 <I2C2_IRQHandler+0x3c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 80029ca:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <I2C2_IRQHandler+0x158>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	071b      	lsls	r3, r3, #28
 80029d0:	d528      	bpl.n	8002a24 <I2C2_IRQHandler+0x6c>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 80029d2:	4b4f      	ldr	r3, [pc, #316]	; (8002b10 <I2C2_IRQHandler+0x158>)
 80029d4:	699b      	ldr	r3, [r3, #24]
  }
  /* Check ADDR flag value in ISR register */
  if(LL_I2C_IsActiveFlag_ADDR(I2C2))
  {
    /* Verify the Address Match with the OWN Slave address */
    if(LL_I2C_GetAddressMatchCode(I2C2) == i2c_addr)
 80029d6:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <I2C2_IRQHandler+0x15c>)
 80029d8:	7811      	ldrb	r1, [r2, #0]
 80029da:	b2c9      	uxtb	r1, r1
 80029dc:	0c5b      	lsrs	r3, r3, #17
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	4013      	ands	r3, r2
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d030      	beq.n	8002a4a <I2C2_IRQHandler+0x92>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 80029e8:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <I2C2_IRQHandler+0x158>)
 80029ea:	69d3      	ldr	r3, [r2, #28]
 80029ec:	2108      	movs	r1, #8
 80029ee:	430b      	orrs	r3, r1
 80029f0:	61d3      	str	r3, [r2, #28]
  /* USER CODE END I2C2_IRQn 0 */

  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
    LL_I2C_DeInit(I2C2);
 80029f4:	4c46      	ldr	r4, [pc, #280]	; (8002b10 <I2C2_IRQHandler+0x158>)
 80029f6:	0020      	movs	r0, r4
 80029f8:	f002 fc5e 	bl	80052b8 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	4a46      	ldr	r2, [pc, #280]	; (8002b18 <I2C2_IRQHandler+0x160>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4393      	bics	r3, r2
 8002a0a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	3207      	adds	r2, #7
 8002a10:	4393      	bics	r3, r2
 8002a12:	6023      	str	r3, [r4, #0]
    user_i2c_init();    
 8002a14:	f7ff feb4 	bl	8002780 <user_i2c_init>
    i2c2_it_enable();          
 8002a18:	f7ff ff40 	bl	800289c <i2c2_it_enable>
    i2c_timeout_counter = 0;
 8002a1c:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <I2C2_IRQHandler+0x150>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e7d2      	b.n	80029ca <I2C2_IRQHandler+0x12>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	06db      	lsls	r3, r3, #27
 8002a2a:	d445      	bmi.n	8002ab8 <I2C2_IRQHandler+0x100>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	079b      	lsls	r3, r3, #30
 8002a32:	d447      	bmi.n	8002ac4 <I2C2_IRQHandler+0x10c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	075b      	lsls	r3, r3, #29
 8002a3a:	d446      	bmi.n	8002aca <I2C2_IRQHandler+0x112>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002a3c:	4b34      	ldr	r3, [pc, #208]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	069b      	lsls	r3, r3, #26
 8002a42:	d445      	bmi.n	8002ad0 <I2C2_IRQHandler+0x118>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8002a44:	4b32      	ldr	r3, [pc, #200]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	e7d3      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
      if (ubReceiveIndex) {
 8002a4a:	4b34      	ldr	r3, [pc, #208]	; (8002b1c <I2C2_IRQHandler+0x164>)
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <I2C2_IRQHandler+0xbe>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 8002a54:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a56:	699b      	ldr	r3, [r3, #24]
      if(LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_WRITE)
 8002a58:	03db      	lsls	r3, r3, #15
 8002a5a:	d419      	bmi.n	8002a90 <I2C2_IRQHandler+0xd8>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	2108      	movs	r1, #8
 8002a62:	430a      	orrs	r2, r1
 8002a64:	61da      	str	r2, [r3, #28]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	3904      	subs	r1, #4
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
        i2c_stop_timeout_flag = 1;
 8002a6e:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <I2C2_IRQHandler+0x168>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e7bd      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
        i2c2_it_disable();
 8002a76:	f7ff ff29 	bl	80028cc <i2c2_it_disable>
        Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 8002a7a:	4c28      	ldr	r4, [pc, #160]	; (8002b1c <I2C2_IRQHandler+0x164>)
 8002a7c:	8821      	ldrh	r1, [r4, #0]
 8002a7e:	b289      	uxth	r1, r1
 8002a80:	4828      	ldr	r0, [pc, #160]	; (8002b24 <I2C2_IRQHandler+0x16c>)
 8002a82:	f000 f989 	bl	8002d98 <Slave_Complete_Callback>
        ubReceiveIndex = 0; 
 8002a86:	2300      	movs	r3, #0
 8002a88:	8023      	strh	r3, [r4, #0]
        i2c2_it_enable();       
 8002a8a:	f7ff ff07 	bl	800289c <i2c2_it_enable>
 8002a8e:	e7e1      	b.n	8002a54 <I2C2_IRQHandler+0x9c>
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a92:	699b      	ldr	r3, [r3, #24]
      else if(LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_READ)
 8002a94:	03db      	lsls	r3, r3, #15
 8002a96:	d509      	bpl.n	8002aac <I2C2_IRQHandler+0xf4>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8002a98:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002a9a:	69da      	ldr	r2, [r3, #28]
 8002a9c:	2108      	movs	r1, #8
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	61da      	str	r2, [r3, #28]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	3906      	subs	r1, #6
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	e7a2      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8002aac:	4a18      	ldr	r2, [pc, #96]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002aae:	69d3      	ldr	r3, [r2, #28]
 8002ab0:	2108      	movs	r1, #8
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	61d3      	str	r3, [r2, #28]
        Error_Callback();
 8002ab6:	e79c      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002aba:	69d3      	ldr	r3, [r2, #28]
 8002abc:	2110      	movs	r1, #16
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	61d3      	str	r3, [r2, #28]
}
 8002ac2:	e796      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
    Slave_Ready_To_Transmit_Callback();
 8002ac4:	f7ff ff50 	bl	8002968 <Slave_Ready_To_Transmit_Callback>
 8002ac8:	e793      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
    Slave_Reception_Callback();
 8002aca:	f7ff ff31 	bl	8002930 <Slave_Reception_Callback>
 8002ace:	e790      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	61da      	str	r2, [r3, #28]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	07db      	lsls	r3, r3, #31
 8002ade:	d402      	bmi.n	8002ae6 <I2C2_IRQHandler+0x12e>
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <I2C2_IRQHandler+0x158>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	619a      	str	r2, [r3, #24]
    i2c2_it_disable();
 8002ae6:	f7ff fef1 	bl	80028cc <i2c2_it_disable>
    Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 8002aea:	4d0c      	ldr	r5, [pc, #48]	; (8002b1c <I2C2_IRQHandler+0x164>)
 8002aec:	8829      	ldrh	r1, [r5, #0]
 8002aee:	b289      	uxth	r1, r1
 8002af0:	480c      	ldr	r0, [pc, #48]	; (8002b24 <I2C2_IRQHandler+0x16c>)
 8002af2:	f000 f951 	bl	8002d98 <Slave_Complete_Callback>
    ubReceiveIndex = 0;
 8002af6:	2400      	movs	r4, #0
 8002af8:	802c      	strh	r4, [r5, #0]
    i2c2_it_enable();
 8002afa:	f7ff fecf 	bl	800289c <i2c2_it_enable>
    i2c_stop_timeout_flag = 0;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <I2C2_IRQHandler+0x168>)
 8002b00:	601c      	str	r4, [r3, #0]
    i2c_stop_timeout_counter = 0;
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <I2C2_IRQHandler+0x170>)
 8002b04:	601c      	str	r4, [r3, #0]
}
 8002b06:	e774      	b.n	80029f2 <I2C2_IRQHandler+0x3a>
 8002b08:	200003f4 	.word	0x200003f4
 8002b0c:	00002ee0 	.word	0x00002ee0
 8002b10:	40005800 	.word	0x40005800
 8002b14:	200003e8 	.word	0x200003e8
 8002b18:	fdffffff 	.word	0xfdffffff
 8002b1c:	20000654 	.word	0x20000654
 8002b20:	200003f0 	.word	0x200003f0
 8002b24:	20000190 	.word	0x20000190
 8002b28:	200003ec 	.word	0x200003ec

08002b2c <IAP_Set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void IAP_Set()
{
 8002b2c:	b082      	sub	sp, #8
	uint8_t i;
 
	uint32_t *pVecTab=(uint32_t *)(0x20000000);
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	059b      	lsls	r3, r3, #22

	for(i = 0; i < 48; i++)
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <IAP_Set+0x38>)
	{
		*(pVecTab++) = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 8002b34:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <IAP_Set+0x3c>)
 8002b36:	1899      	adds	r1, r3, r2
 8002b38:	001a      	movs	r2, r3
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	6809      	ldr	r1, [r1, #0]
 8002b3e:	6011      	str	r1, [r2, #0]
	for(i = 0; i < 48; i++)
 8002b40:	4283      	cmp	r3, r0
 8002b42:	d1f7      	bne.n	8002b34 <IAP_Set+0x8>
	}
  /* Enable the SYSCFG peripheral clock*/
#if 1 //STM32
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b44:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <IAP_Set+0x40>)
 8002b46:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4319      	orrs	r1, r3
 8002b4c:	6411      	str	r1, [r2, #64]	; 0x40
 8002b4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b50:	4013      	ands	r3, r2
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	9b01      	ldr	r3, [sp, #4]

  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 8002b56:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <IAP_Set+0x44>)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]
#else //AMP32
    RCM_EnableAPB2PeriphClock(RCM_APB2_PERIPH_SYSCFG);
    /* Remap SRAM at 0x00000000 */
    SYSCFG->CFG1_B.MMSEL = SYSCFG_MemoryRemap_SRAM;
#endif
}
 8002b60:	b002      	add	sp, #8
 8002b62:	4770      	bx	lr
 8002b64:	200000c0 	.word	0x200000c0
 8002b68:	e8001800 	.word	0xe8001800
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010000 	.word	0x40010000

08002b74 <i2c_port_set_to_input>:

void i2c_port_set_to_input(void)
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	2214      	movs	r2, #20
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	a801      	add	r0, sp, #4
 8002b7e:	f002 fc5a 	bl	8005436 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <i2c_port_set_to_input+0x48>)
 8002b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b86:	2401      	movs	r4, #1
 8002b88:	4322      	orrs	r2, r4
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	4023      	ands	r3, r4
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 8002b94:	26c0      	movs	r6, #192	; 0xc0
 8002b96:	0176      	lsls	r6, r6, #5
 8002b98:	25a0      	movs	r5, #160	; 0xa0
 8002b9a:	05ed      	lsls	r5, r5, #23
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	0031      	movs	r1, r6
 8002ba0:	0028      	movs	r0, r5
 8002ba2:	f001 fd49 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8002ba6:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bac:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	a901      	add	r1, sp, #4
 8002bb2:	0028      	movs	r0, r5
 8002bb4:	f001 fc4c 	bl	8004450 <HAL_GPIO_Init>
}
 8002bb8:	b006      	add	sp, #24
 8002bba:	bd70      	pop	{r4, r5, r6, pc}
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <irq_port_init>:

void irq_port_init(void)
{
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	2214      	movs	r2, #20
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	a801      	add	r0, sp, #4
 8002bca:	f002 fc34 	bl	8005436 <memset>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <irq_port_init+0x4c>)
 8002bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd2:	2401      	movs	r4, #1
 8002bd4:	4322      	orrs	r2, r4
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	4023      	ands	r3, r4
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	9b00      	ldr	r3, [sp, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8002be0:	2680      	movs	r6, #128	; 0x80
 8002be2:	01b6      	lsls	r6, r6, #6
 8002be4:	25a0      	movs	r5, #160	; 0xa0
 8002be6:	05ed      	lsls	r5, r5, #23
 8002be8:	2201      	movs	r2, #1
 8002bea:	0031      	movs	r1, r6
 8002bec:	0028      	movs	r0, r5
 8002bee:	f001 fd23 	bl	8004638 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bf2:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	9402      	str	r4, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	3303      	adds	r3, #3
 8002bfc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	a901      	add	r1, sp, #4
 8002c00:	0028      	movs	r0, r5
 8002c02:	f001 fc25 	bl	8004450 <HAL_GPIO_Init>
}
 8002c06:	b006      	add	sp, #24
 8002c08:	bd70      	pop	{r4, r5, r6, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40021000 	.word	0x40021000

08002c10 <init_flash_data>:

void init_flash_data(void) 
{   
 8002c10:	b510      	push	{r4, lr}
  if (!(readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE))) {
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0049      	lsls	r1, r1, #1
 8002c16:	481c      	ldr	r0, [pc, #112]	; (8002c88 <init_flash_data+0x78>)
 8002c18:	f7ff fcaa 	bl	8002570 <readPackedMessageFromFlash>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d11c      	bne.n	8002c5a <init_flash_data+0x4a>
    i2c_address[0] = I2C_ADDRESS;
 8002c20:	2346      	movs	r3, #70	; 0x46
 8002c22:	4a1a      	ldr	r2, [pc, #104]	; (8002c8c <init_flash_data+0x7c>)
 8002c24:	7013      	strb	r3, [r2, #0]

    flash_data[0] = i2c_address[0];
 8002c26:	4c18      	ldr	r4, [pc, #96]	; (8002c88 <init_flash_data+0x78>)
 8002c28:	7023      	strb	r3, [r4, #0]
    flash_data[1] = is_irq_enable;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <init_flash_data+0x80>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	7063      	strb	r3, [r4, #1]
    memcpy(&flash_data[2], (uint8_t *)sys_rgb_color_switch_0, 32);
 8002c30:	1ca0      	adds	r0, r4, #2
 8002c32:	2220      	movs	r2, #32
 8002c34:	4917      	ldr	r1, [pc, #92]	; (8002c94 <init_flash_data+0x84>)
 8002c36:	f002 fbf5 	bl	8005424 <memcpy>
    memcpy(&flash_data[2+32], (uint8_t *)sys_rgb_color_switch_1, 32);
 8002c3a:	0020      	movs	r0, r4
 8002c3c:	3022      	adds	r0, #34	; 0x22
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4915      	ldr	r1, [pc, #84]	; (8002c98 <init_flash_data+0x88>)
 8002c42:	f002 fbef 	bl	8005424 <memcpy>
    flash_data[2+32+32] = rgb_show_mode;
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <init_flash_data+0x8c>)
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	2342      	movs	r3, #66	; 0x42
 8002c4c:	54e2      	strb	r2, [r4, r3]
    writeMessageToFlash(flash_data , FLASH_DATA_SIZE);
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	0049      	lsls	r1, r1, #1
 8002c52:	0020      	movs	r0, r4
 8002c54:	f7ff fca8 	bl	80025a8 <writeMessageToFlash>
    is_irq_enable = flash_data[1];
    memcpy((uint8_t *)sys_rgb_color_switch_0, &flash_data[2], 32);
    memcpy((uint8_t *)sys_rgb_color_switch_1, &flash_data[2+32], 32);
    rgb_show_mode = flash_data[2+32+32];
  }
}
 8002c58:	bd10      	pop	{r4, pc}
    i2c_address[0] = flash_data[0];
 8002c5a:	4c0b      	ldr	r4, [pc, #44]	; (8002c88 <init_flash_data+0x78>)
 8002c5c:	7822      	ldrb	r2, [r4, #0]
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <init_flash_data+0x7c>)
 8002c60:	701a      	strb	r2, [r3, #0]
    is_irq_enable = flash_data[1];
 8002c62:	7862      	ldrb	r2, [r4, #1]
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <init_flash_data+0x80>)
 8002c66:	701a      	strb	r2, [r3, #0]
    memcpy((uint8_t *)sys_rgb_color_switch_0, &flash_data[2], 32);
 8002c68:	1ca1      	adds	r1, r4, #2
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4809      	ldr	r0, [pc, #36]	; (8002c94 <init_flash_data+0x84>)
 8002c6e:	f002 fbd9 	bl	8005424 <memcpy>
    memcpy((uint8_t *)sys_rgb_color_switch_1, &flash_data[2+32], 32);
 8002c72:	0021      	movs	r1, r4
 8002c74:	3122      	adds	r1, #34	; 0x22
 8002c76:	2220      	movs	r2, #32
 8002c78:	4807      	ldr	r0, [pc, #28]	; (8002c98 <init_flash_data+0x88>)
 8002c7a:	f002 fbd3 	bl	8005424 <memcpy>
    rgb_show_mode = flash_data[2+32+32];
 8002c7e:	2342      	movs	r3, #66	; 0x42
 8002c80:	5ce2      	ldrb	r2, [r4, r3]
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <init_flash_data+0x8c>)
 8002c84:	701a      	strb	r2, [r3, #0]
}
 8002c86:	e7e7      	b.n	8002c58 <init_flash_data+0x48>
 8002c88:	20000658 	.word	0x20000658
 8002c8c:	20000758 	.word	0x20000758
 8002c90:	20000761 	.word	0x20000761
 8002c94:	2000076c 	.word	0x2000076c
 8002c98:	2000078c 	.word	0x2000078c
 8002c9c:	20000768 	.word	0x20000768

08002ca0 <flash_data_write_back>:

void flash_data_write_back(void)
{
 8002ca0:	b510      	push	{r4, lr}
  if (readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE)) {
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0049      	lsls	r1, r1, #1
 8002ca6:	4811      	ldr	r0, [pc, #68]	; (8002cec <flash_data_write_back+0x4c>)
 8002ca8:	f7ff fc62 	bl	8002570 <readPackedMessageFromFlash>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d100      	bne.n	8002cb2 <flash_data_write_back+0x12>
    memcpy(&flash_data[2], (uint8_t *)sys_rgb_color_switch_0, 32);
    memcpy(&flash_data[2+32], (uint8_t *)sys_rgb_color_switch_1, 32);
    flash_data[2+32+32] = rgb_show_mode;
    writeMessageToFlash(flash_data , FLASH_DATA_SIZE);
  }     
}
 8002cb0:	bd10      	pop	{r4, pc}
    flash_data[0] = i2c_address[0];
 8002cb2:	4c0e      	ldr	r4, [pc, #56]	; (8002cec <flash_data_write_back+0x4c>)
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <flash_data_write_back+0x50>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	7023      	strb	r3, [r4, #0]
    flash_data[1] = is_irq_enable;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <flash_data_write_back+0x54>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	7063      	strb	r3, [r4, #1]
    memcpy(&flash_data[2], (uint8_t *)sys_rgb_color_switch_0, 32);
 8002cc0:	1ca0      	adds	r0, r4, #2
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <flash_data_write_back+0x58>)
 8002cc6:	f002 fbad 	bl	8005424 <memcpy>
    memcpy(&flash_data[2+32], (uint8_t *)sys_rgb_color_switch_1, 32);
 8002cca:	0020      	movs	r0, r4
 8002ccc:	3022      	adds	r0, #34	; 0x22
 8002cce:	2220      	movs	r2, #32
 8002cd0:	490a      	ldr	r1, [pc, #40]	; (8002cfc <flash_data_write_back+0x5c>)
 8002cd2:	f002 fba7 	bl	8005424 <memcpy>
    flash_data[2+32+32] = rgb_show_mode;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <flash_data_write_back+0x60>)
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	2342      	movs	r3, #66	; 0x42
 8002cdc:	54e2      	strb	r2, [r4, r3]
    writeMessageToFlash(flash_data , FLASH_DATA_SIZE);
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	0049      	lsls	r1, r1, #1
 8002ce2:	0020      	movs	r0, r4
 8002ce4:	f7ff fc60 	bl	80025a8 <writeMessageToFlash>
}
 8002ce8:	e7e2      	b.n	8002cb0 <flash_data_write_back+0x10>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	20000658 	.word	0x20000658
 8002cf0:	20000758 	.word	0x20000758
 8002cf4:	20000761 	.word	0x20000761
 8002cf8:	2000076c 	.word	0x2000076c
 8002cfc:	2000078c 	.word	0x2000078c
 8002d00:	20000768 	.word	0x20000768

08002d04 <init_swtich_status>:

void init_swtich_status(void)
{
 8002d04:	b510      	push	{r4, lr}
  switch_status |= (!!(SW_K1_GPIO_Port->IDR&(SW_K1_Pin)));
 8002d06:	22a0      	movs	r2, #160	; 0xa0
 8002d08:	05d2      	lsls	r2, r2, #23
 8002d0a:	6914      	ldr	r4, [r2, #16]
 8002d0c:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <init_swtich_status+0x8c>)
 8002d0e:	7819      	ldrb	r1, [r3, #0]
 8002d10:	2001      	movs	r0, #1
 8002d12:	4020      	ands	r0, r4
 8002d14:	4301      	orrs	r1, r0
 8002d16:	7019      	strb	r1, [r3, #0]
  switch_status |= ((!!(SW_K2_GPIO_Port->IDR&(SW_K2_Pin))) << 1);
 8002d18:	6914      	ldr	r4, [r2, #16]
 8002d1a:	7819      	ldrb	r1, [r3, #0]
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	4020      	ands	r0, r4
 8002d20:	4301      	orrs	r1, r0
 8002d22:	7019      	strb	r1, [r3, #0]
  switch_status |= ((!!(SW_K3_GPIO_Port->IDR&(SW_K3_Pin))) << 2);
 8002d24:	6913      	ldr	r3, [r2, #16]
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	0fdb      	lsrs	r3, r3, #31
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4918      	ldr	r1, [pc, #96]	; (8002d90 <init_swtich_status+0x8c>)
 8002d2e:	780a      	ldrb	r2, [r1, #0]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	700b      	strb	r3, [r1, #0]
  switch_status |= ((!!(SW_K4_GPIO_Port->IDR&(SW_K4_Pin))) << 3);
 8002d34:	23a0      	movs	r3, #160	; 0xa0
 8002d36:	05db      	lsls	r3, r3, #23
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	065b      	lsls	r3, r3, #25
 8002d3c:	0fdb      	lsrs	r3, r3, #31
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	780a      	ldrb	r2, [r1, #0]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	700b      	strb	r3, [r1, #0]
  switch_status |= ((!!(SW_K5_GPIO_Port->IDR&(SW_K5_Pin))) << 4);
 8002d46:	23a0      	movs	r3, #160	; 0xa0
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	0fdb      	lsrs	r3, r3, #31
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	780a      	ldrb	r2, [r1, #0]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	700b      	strb	r3, [r1, #0]
  switch_status |= ((!!(SW_K6_GPIO_Port->IDR&(SW_K6_Pin))) << 5);
 8002d58:	23a0      	movs	r3, #160	; 0xa0
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	0fdb      	lsrs	r3, r3, #31
 8002d62:	015b      	lsls	r3, r3, #5
 8002d64:	780a      	ldrb	r2, [r1, #0]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	700b      	strb	r3, [r1, #0]
  switch_status |= ((!!(SW_K7_GPIO_Port->IDR&(SW_K7_Pin))) << 6);
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <init_swtich_status+0x90>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	071b      	lsls	r3, r3, #28
 8002d70:	0fdb      	lsrs	r3, r3, #31
 8002d72:	019b      	lsls	r3, r3, #6
 8002d74:	780a      	ldrb	r2, [r1, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	700b      	strb	r3, [r1, #0]
  switch_status |= ((!!(SW_K8_GPIO_Port->IDR&(SW_K8_Pin))) << 7);
 8002d7a:	23a0      	movs	r3, #160	; 0xa0
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	0fdb      	lsrs	r3, r3, #31
 8002d84:	01db      	lsls	r3, r3, #7
 8002d86:	780a      	ldrb	r2, [r1, #0]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	700b      	strb	r3, [r1, #0]
}
 8002d8c:	bd10      	pop	{r4, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	20000769 	.word	0x20000769
 8002d94:	50000400 	.word	0x50000400

08002d98 <Slave_Complete_Callback>:

void Slave_Complete_Callback(uint8_t *rx_data, uint16_t len)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	46d6      	mov	lr, sl
 8002d9c:	464f      	mov	r7, r9
 8002d9e:	4646      	mov	r6, r8
 8002da0:	b5c0      	push	{r6, r7, lr}
 8002da2:	b0a2      	sub	sp, #136	; 0x88
 8002da4:	0004      	movs	r4, r0
 8002da6:	000d      	movs	r5, r1
  uint8_t buf[48];
  uint8_t rx_buf[48];
  uint8_t rx_mark[48] = {0}; 
 8002da8:	2300      	movs	r3, #0
 8002daa:	930a      	str	r3, [sp, #40]	; 0x28
 8002dac:	222c      	movs	r2, #44	; 0x2c
 8002dae:	2100      	movs	r1, #0
 8002db0:	a80b      	add	r0, sp, #44	; 0x2c
 8002db2:	f002 fb40 	bl	8005436 <memset>

  if (len > 1) {
 8002db6:	2d01      	cmp	r5, #1
 8002db8:	d800      	bhi.n	8002dbc <Slave_Complete_Callback+0x24>
 8002dba:	e16a      	b.n	8003092 <Slave_Complete_Callback+0x2fa>
    if (rx_data[0] == 0xFF) 
 8002dbc:	7823      	ldrb	r3, [r4, #0]
 8002dbe:	2bff      	cmp	r3, #255	; 0xff
 8002dc0:	d011      	beq.n	8002de6 <Slave_Complete_Callback+0x4e>
          is_flash_write_back = 1;
          user_i2c_init();
        }
      }
    } 
    else if (rx_data[0] == 0xF1) 
 8002dc2:	2bf1      	cmp	r3, #241	; 0xf1
 8002dc4:	d020      	beq.n	8002e08 <Slave_Complete_Callback+0x70>
      is_flash_write_back = 1;
      if (is_irq_enable) {
        irq_port_init();
      }
    } 
    else if (rx_data[0] == 0xF0) 
 8002dc6:	2bf0      	cmp	r3, #240	; 0xf0
 8002dc8:	d02e      	beq.n	8002e28 <Slave_Complete_Callback+0x90>
    {
      is_flash_write_back = 1;
    } 
    else if ((rx_data[0] >= 0x10) && (rx_data[0] <= 0x19)) {
 8002dca:	001a      	movs	r2, r3
 8002dcc:	3a10      	subs	r2, #16
 8002dce:	2a09      	cmp	r2, #9
 8002dd0:	d850      	bhi.n	8002e74 <Slave_Complete_Callback+0xdc>
      for(int i = 0; i < len - 1; i++) {
 8002dd2:	3d01      	subs	r5, #1
 8002dd4:	4bc6      	ldr	r3, [pc, #792]	; (80030f0 <Slave_Complete_Callback+0x358>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	4698      	mov	r8, r3
 8002dda:	2300      	movs	r3, #0
 8002ddc:	469c      	mov	ip, r3
 8002dde:	2000      	movs	r0, #0
        uint8_t rx_index = rx_data[0]-0x10+i;
        
        rx_buf[rx_index] = rx_data[1+i];
        rx_mark[rx_index] = 1;
 8002de0:	aa0a      	add	r2, sp, #40	; 0x28
 8002de2:	2701      	movs	r7, #1
 8002de4:	e02b      	b.n	8002e3e <Slave_Complete_Callback+0xa6>
      if (len == 2) {
 8002de6:	2d02      	cmp	r5, #2
 8002de8:	d000      	beq.n	8002dec <Slave_Complete_Callback+0x54>
 8002dea:	e154      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
        if (rx_data[1] < 128) {
 8002dec:	7862      	ldrb	r2, [r4, #1]
 8002dee:	2301      	movs	r3, #1
 8002df0:	56e3      	ldrsb	r3, [r4, r3]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da00      	bge.n	8002df8 <Slave_Complete_Callback+0x60>
 8002df6:	e14e      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
          i2c_address[0] = rx_data[1];
 8002df8:	4bbe      	ldr	r3, [pc, #760]	; (80030f4 <Slave_Complete_Callback+0x35c>)
 8002dfa:	701a      	strb	r2, [r3, #0]
          is_flash_write_back = 1;
 8002dfc:	4bbe      	ldr	r3, [pc, #760]	; (80030f8 <Slave_Complete_Callback+0x360>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	701a      	strb	r2, [r3, #0]
          user_i2c_init();
 8002e02:	f7ff fcbd 	bl	8002780 <user_i2c_init>
 8002e06:	e146      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      is_irq_enable = !!rx_data[1];
 8002e08:	7863      	ldrb	r3, [r4, #1]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	4193      	sbcs	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4aba      	ldr	r2, [pc, #744]	; (80030fc <Slave_Complete_Callback+0x364>)
 8002e12:	7013      	strb	r3, [r2, #0]
      is_flash_write_back = 1;
 8002e14:	4bb8      	ldr	r3, [pc, #736]	; (80030f8 <Slave_Complete_Callback+0x360>)
 8002e16:	2101      	movs	r1, #1
 8002e18:	7019      	strb	r1, [r3, #0]
      if (is_irq_enable) {
 8002e1a:	7813      	ldrb	r3, [r2, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d100      	bne.n	8002e22 <Slave_Complete_Callback+0x8a>
 8002e20:	e139      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
        irq_port_init();
 8002e22:	f7ff fecd 	bl	8002bc0 <irq_port_init>
 8002e26:	e136      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      is_flash_write_back = 1;
 8002e28:	4bb3      	ldr	r3, [pc, #716]	; (80030f8 <Slave_Complete_Callback+0x360>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e132      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
        if (rx_mark[9] == 0 && rx_mark[10] == 0)     
          brightness_index[rx_index] = rx_buf[rx_index];
        else if (rx_mark[9] && rx_mark[10] == 0 && rx_index == 9)
 8002e30:	7a96      	ldrb	r6, [r2, #10]
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	d101      	bne.n	8002e3a <Slave_Complete_Callback+0xa2>
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d011      	beq.n	8002e5e <Slave_Complete_Callback+0xc6>
      for(int i = 0; i < len - 1; i++) {
 8002e3a:	42a8      	cmp	r0, r5
 8002e3c:	da12      	bge.n	8002e64 <Slave_Complete_Callback+0xcc>
        uint8_t rx_index = rx_data[0]-0x10+i;
 8002e3e:	7823      	ldrb	r3, [r4, #0]
 8002e40:	3b10      	subs	r3, #16
 8002e42:	181b      	adds	r3, r3, r0
 8002e44:	b2db      	uxtb	r3, r3
        rx_buf[rx_index] = rx_data[1+i];
 8002e46:	3001      	adds	r0, #1
 8002e48:	5c21      	ldrb	r1, [r4, r0]
        rx_mark[rx_index] = 1;
 8002e4a:	54d7      	strb	r7, [r2, r3]
        if (rx_mark[9] == 0 && rx_mark[10] == 0)     
 8002e4c:	7a56      	ldrb	r6, [r2, #9]
 8002e4e:	2e00      	cmp	r6, #0
 8002e50:	d1ee      	bne.n	8002e30 <Slave_Complete_Callback+0x98>
 8002e52:	7a96      	ldrb	r6, [r2, #10]
 8002e54:	2e00      	cmp	r6, #0
 8002e56:	d1f0      	bne.n	8002e3a <Slave_Complete_Callback+0xa2>
          brightness_index[rx_index] = rx_buf[rx_index];
 8002e58:	4ea9      	ldr	r6, [pc, #676]	; (8003100 <Slave_Complete_Callback+0x368>)
 8002e5a:	54f1      	strb	r1, [r6, r3]
 8002e5c:	e7ed      	b.n	8002e3a <Slave_Complete_Callback+0xa2>
          rgb_show_mode = rx_buf[rx_index];
 8002e5e:	4688      	mov	r8, r1
        else if (rx_mark[9] && rx_mark[10] == 0 && rx_index == 9)
 8002e60:	46bc      	mov	ip, r7
 8002e62:	e7ea      	b.n	8002e3a <Slave_Complete_Callback+0xa2>
 8002e64:	4663      	mov	r3, ip
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d100      	bne.n	8002e6c <Slave_Complete_Callback+0xd4>
 8002e6a:	e114      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
 8002e6c:	4ba0      	ldr	r3, [pc, #640]	; (80030f0 <Slave_Complete_Callback+0x358>)
 8002e6e:	4642      	mov	r2, r8
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e110      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      }     
    }    
    else if ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x43)) {
 8002e74:	001a      	movs	r2, r3
 8002e76:	3a20      	subs	r2, #32
 8002e78:	2a23      	cmp	r2, #35	; 0x23
 8002e7a:	d910      	bls.n	8002e9e <Slave_Complete_Callback+0x106>
          ((uint8_t *)lastest_rgb_color)[rx_index] = rx_buf[rx_index];
          ((uint8_t *)rgb_buffer->rear->data)[rx_index] = rx_buf[rx_index];
        }
      }                
    } 
    else if ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F)) {
 8002e7c:	001a      	movs	r2, r3
 8002e7e:	3a70      	subs	r2, #112	; 0x70
 8002e80:	2a1f      	cmp	r2, #31
 8002e82:	d851      	bhi.n	8002f28 <Slave_Complete_Callback+0x190>
      for(int i = 0; i < len - 1; i++) {
 8002e84:	3d01      	subs	r5, #1
 8002e86:	2200      	movs	r2, #0
        uint8_t rx_index = rx_data[0]-0x70+i;

        rx_buf[rx_index] = rx_data[1+i];
        rx_mark[rx_index] = 1;
        ((uint8_t *)sys_rgb_color_switch_0)[rx_index] = rx_buf[rx_index];
 8002e88:	4e9e      	ldr	r6, [pc, #632]	; (8003104 <Slave_Complete_Callback+0x36c>)
        uint8_t rx_index = rx_data[0]-0x70+i;
 8002e8a:	7823      	ldrb	r3, [r4, #0]
 8002e8c:	3b70      	subs	r3, #112	; 0x70
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	b2db      	uxtb	r3, r3
        rx_buf[rx_index] = rx_data[1+i];
 8002e92:	3201      	adds	r2, #1
 8002e94:	5ca0      	ldrb	r0, [r4, r2]
        ((uint8_t *)sys_rgb_color_switch_0)[rx_index] = rx_buf[rx_index];
 8002e96:	54f0      	strb	r0, [r6, r3]
      for(int i = 0; i < len - 1; i++) {
 8002e98:	42aa      	cmp	r2, r5
 8002e9a:	dbf6      	blt.n	8002e8a <Slave_Complete_Callback+0xf2>
 8002e9c:	e0fb      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      uint32_t *rgb_point_temp = getQueueRear(rgb_buffer);
 8002e9e:	4b9a      	ldr	r3, [pc, #616]	; (8003108 <Slave_Complete_Callback+0x370>)
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	f000 fda1 	bl	80039e8 <getQueueRear>
 8002ea6:	1e01      	subs	r1, r0, #0
      if (rgb_point_temp != NULL) {
 8002ea8:	d014      	beq.n	8002ed4 <Slave_Complete_Callback+0x13c>
        memcpy((uint8_t *)lastest_rgb_color, (uint8_t *)rgb_point_temp, PIXEL_MAX*4);
 8002eaa:	4e98      	ldr	r6, [pc, #608]	; (800310c <Slave_Complete_Callback+0x374>)
 8002eac:	2224      	movs	r2, #36	; 0x24
 8002eae:	6830      	ldr	r0, [r6, #0]
 8002eb0:	f002 fab8 	bl	8005424 <memcpy>
        enqueue(rgb_buffer, lastest_rgb_color);
 8002eb4:	6831      	ldr	r1, [r6, #0]
 8002eb6:	4b94      	ldr	r3, [pc, #592]	; (8003108 <Slave_Complete_Callback+0x370>)
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	f000 fd67 	bl	800398c <enqueue>
      for(int i = 0; i < len - 1; i++) {
 8002ebe:	3d01      	subs	r5, #1
 8002ec0:	2200      	movs	r2, #0
        rx_mark[rx_index] = 1;
 8002ec2:	a90a      	add	r1, sp, #40	; 0x28
 8002ec4:	2601      	movs	r6, #1
        if (rx_mark[36] == 0) {
 8002ec6:	2324      	movs	r3, #36	; 0x24
 8002ec8:	469a      	mov	sl, r3
          ((uint8_t *)lastest_rgb_color)[rx_index] = rx_buf[rx_index];
 8002eca:	4b90      	ldr	r3, [pc, #576]	; (800310c <Slave_Complete_Callback+0x374>)
 8002ecc:	4698      	mov	r8, r3
          ((uint8_t *)rgb_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8002ece:	4b8e      	ldr	r3, [pc, #568]	; (8003108 <Slave_Complete_Callback+0x370>)
 8002ed0:	469c      	mov	ip, r3
 8002ed2:	e013      	b.n	8002efc <Slave_Complete_Callback+0x164>
        uint32_t rgb_temp[PIXEL_MAX] = {0};
 8002ed4:	2224      	movs	r2, #36	; 0x24
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	a801      	add	r0, sp, #4
 8002eda:	f002 faac 	bl	8005436 <memset>
        memcpy(rgb_temp, lastest_rgb_color, sizeof(rgb_temp));
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <Slave_Complete_Callback+0x374>)
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	a801      	add	r0, sp, #4
 8002ee6:	f002 fa9d 	bl	8005424 <memcpy>
        enqueue(rgb_buffer, rgb_temp);
 8002eea:	4b87      	ldr	r3, [pc, #540]	; (8003108 <Slave_Complete_Callback+0x370>)
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	a901      	add	r1, sp, #4
 8002ef0:	f000 fd4c 	bl	800398c <enqueue>
 8002ef4:	e7e3      	b.n	8002ebe <Slave_Complete_Callback+0x126>
      for(int i = 0; i < len - 1; i++) {
 8002ef6:	42aa      	cmp	r2, r5
 8002ef8:	db00      	blt.n	8002efc <Slave_Complete_Callback+0x164>
 8002efa:	e0cc      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
        uint8_t rx_index = rx_data[0]-0x20+i;
 8002efc:	7823      	ldrb	r3, [r4, #0]
 8002efe:	3b20      	subs	r3, #32
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	b2db      	uxtb	r3, r3
        rx_buf[rx_index] = rx_data[1+i];
 8002f04:	3201      	adds	r2, #1
 8002f06:	5ca7      	ldrb	r7, [r4, r2]
 8002f08:	46b9      	mov	r9, r7
        rx_mark[rx_index] = 1;
 8002f0a:	54ce      	strb	r6, [r1, r3]
        if (rx_mark[36] == 0) {
 8002f0c:	4650      	mov	r0, sl
 8002f0e:	5c0f      	ldrb	r7, [r1, r0]
 8002f10:	2f00      	cmp	r7, #0
 8002f12:	d1f0      	bne.n	8002ef6 <Slave_Complete_Callback+0x15e>
          ((uint8_t *)lastest_rgb_color)[rx_index] = rx_buf[rx_index];
 8002f14:	4640      	mov	r0, r8
 8002f16:	6807      	ldr	r7, [r0, #0]
 8002f18:	4648      	mov	r0, r9
 8002f1a:	54f8      	strb	r0, [r7, r3]
          ((uint8_t *)rgb_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8002f1c:	4660      	mov	r0, ip
 8002f1e:	6807      	ldr	r7, [r0, #0]
 8002f20:	687f      	ldr	r7, [r7, #4]
 8002f22:	4648      	mov	r0, r9
 8002f24:	54f8      	strb	r0, [r7, r3]
 8002f26:	e7e6      	b.n	8002ef6 <Slave_Complete_Callback+0x15e>
      }                
    } 
    else if ((rx_data[0] >= 0x90) && (rx_data[0] <= 0xAF)) {
 8002f28:	001a      	movs	r2, r3
 8002f2a:	3270      	adds	r2, #112	; 0x70
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	2a1f      	cmp	r2, #31
 8002f30:	d80c      	bhi.n	8002f4c <Slave_Complete_Callback+0x1b4>
      for(int i = 0; i < len - 1; i++) {
 8002f32:	3d01      	subs	r5, #1
 8002f34:	2200      	movs	r2, #0
        uint8_t rx_index = rx_data[0]-0x90+i;

        rx_buf[rx_index] = rx_data[1+i];
        rx_mark[rx_index] = 1;
        ((uint8_t *)sys_rgb_color_switch_1)[rx_index] = rx_buf[rx_index];
 8002f36:	4e76      	ldr	r6, [pc, #472]	; (8003110 <Slave_Complete_Callback+0x378>)
        uint8_t rx_index = rx_data[0]-0x90+i;
 8002f38:	7823      	ldrb	r3, [r4, #0]
 8002f3a:	3370      	adds	r3, #112	; 0x70
 8002f3c:	189b      	adds	r3, r3, r2
 8002f3e:	b2db      	uxtb	r3, r3
        rx_buf[rx_index] = rx_data[1+i];
 8002f40:	3201      	adds	r2, #1
 8002f42:	5ca0      	ldrb	r0, [r4, r2]
        ((uint8_t *)sys_rgb_color_switch_1)[rx_index] = rx_buf[rx_index];
 8002f44:	54f0      	strb	r0, [r6, r3]
      for(int i = 0; i < len - 1; i++) {
 8002f46:	42aa      	cmp	r2, r5
 8002f48:	dbf6      	blt.n	8002f38 <Slave_Complete_Callback+0x1a0>
 8002f4a:	e0a4      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      }                
    } 
    else if ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x58)) {
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	3a50      	subs	r2, #80	; 0x50
 8002f50:	2a08      	cmp	r2, #8
 8002f52:	d92a      	bls.n	8002faa <Slave_Complete_Callback+0x212>
          ((uint8_t *)lastest_rgb_233_color)[rx_index] = rx_buf[rx_index];
          ((uint8_t *)rgb_233_buffer->rear->data)[rx_index] = rx_buf[rx_index];
        }
      }                
    } 
    else if (rx_data[0] == 0xFD)
 8002f54:	2bfd      	cmp	r3, #253	; 0xfd
 8002f56:	d000      	beq.n	8002f5a <Slave_Complete_Callback+0x1c2>
 8002f58:	e09d      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
    {
      if (rx_data[1] == 1) {
 8002f5a:	7863      	ldrb	r3, [r4, #1]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d000      	beq.n	8002f62 <Slave_Complete_Callback+0x1ca>
 8002f60:	e099      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
        flag_jump_bootloader = 1;
 8002f62:	4b6c      	ldr	r3, [pc, #432]	; (8003114 <Slave_Complete_Callback+0x37c>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
        if (flag_jump_bootloader) {
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d100      	bne.n	8002f70 <Slave_Complete_Callback+0x1d8>
 8002f6e:	e092      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
          LL_I2C_DeInit(I2C2);
 8002f70:	4c69      	ldr	r4, [pc, #420]	; (8003118 <Slave_Complete_Callback+0x380>)
 8002f72:	0020      	movs	r0, r4
 8002f74:	f002 f9a0 	bl	80052b8 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002f78:	6863      	ldr	r3, [r4, #4]
 8002f7a:	4a68      	ldr	r2, [pc, #416]	; (800311c <Slave_Complete_Callback+0x384>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4393      	bics	r3, r2
 8002f86:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	3207      	adds	r2, #7
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	6023      	str	r3, [r4, #0]
          LL_I2C_DisableAutoEndMode(I2C2);
          LL_I2C_Disable(I2C2);
          LL_I2C_DisableIT_ADDR(I2C2);
          HAL_TIM_PWM_MspDeInit(&htim3);
 8002f90:	4863      	ldr	r0, [pc, #396]	; (8003120 <Slave_Complete_Callback+0x388>)
 8002f92:	f000 fcdf 	bl	8003954 <HAL_TIM_PWM_MspDeInit>
          my_gpio_deinit();
 8002f96:	f7ff fbc1 	bl	800271c <my_gpio_deinit>
          i2c_port_set_to_input();
 8002f9a:	f7ff fdeb 	bl	8002b74 <i2c_port_set_to_input>
          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8002f9e:	2680      	movs	r6, #128	; 0x80
 8002fa0:	0136      	lsls	r6, r6, #4
 8002fa2:	25a0      	movs	r5, #160	; 0xa0
 8002fa4:	05ed      	lsls	r5, r5, #23
          {
            jump_bootloader_timeout++;
 8002fa6:	4c5f      	ldr	r4, [pc, #380]	; (8003124 <Slave_Complete_Callback+0x38c>)
          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8002fa8:	e046      	b.n	8003038 <Slave_Complete_Callback+0x2a0>
      uint8_t *rgb_233_temp = getQueueRear_rgb233(rgb_233_buffer);
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <Slave_Complete_Callback+0x390>)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	f000 fd53 	bl	8003a58 <getQueueRear_rgb233>
 8002fb2:	1e01      	subs	r1, r0, #0
      if (rgb_233_temp != NULL) {
 8002fb4:	d012      	beq.n	8002fdc <Slave_Complete_Callback+0x244>
        memcpy((uint8_t *)lastest_rgb_233_color, (uint8_t *)rgb_233_temp, PIXEL_MAX);
 8002fb6:	4e5d      	ldr	r6, [pc, #372]	; (800312c <Slave_Complete_Callback+0x394>)
 8002fb8:	2209      	movs	r2, #9
 8002fba:	6830      	ldr	r0, [r6, #0]
 8002fbc:	f002 fa32 	bl	8005424 <memcpy>
        enqueue_rgb233(rgb_233_buffer, lastest_rgb_233_color);
 8002fc0:	6831      	ldr	r1, [r6, #0]
 8002fc2:	4b59      	ldr	r3, [pc, #356]	; (8003128 <Slave_Complete_Callback+0x390>)
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	f000 fd19 	bl	80039fc <enqueue_rgb233>
      for(int i = 0; i < len - 1; i++) {
 8002fca:	3d01      	subs	r5, #1
 8002fcc:	2200      	movs	r2, #0
        rx_mark[rx_index] = 1;
 8002fce:	a80a      	add	r0, sp, #40	; 0x28
 8002fd0:	2701      	movs	r7, #1
          ((uint8_t *)lastest_rgb_233_color)[rx_index] = rx_buf[rx_index];
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <Slave_Complete_Callback+0x394>)
 8002fd4:	4698      	mov	r8, r3
          ((uint8_t *)rgb_233_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8002fd6:	4b54      	ldr	r3, [pc, #336]	; (8003128 <Slave_Complete_Callback+0x390>)
 8002fd8:	469c      	mov	ip, r3
 8002fda:	e014      	b.n	8003006 <Slave_Complete_Callback+0x26e>
        uint8_t rgb_temp[PIXEL_MAX] = {0};
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	a802      	add	r0, sp, #8
 8002fe6:	f002 fa26 	bl	8005436 <memset>
        memcpy(rgb_temp, lastest_rgb_233_color, PIXEL_MAX);
 8002fea:	4b50      	ldr	r3, [pc, #320]	; (800312c <Slave_Complete_Callback+0x394>)
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	2209      	movs	r2, #9
 8002ff0:	a801      	add	r0, sp, #4
 8002ff2:	f002 fa17 	bl	8005424 <memcpy>
        enqueue_rgb233(rgb_233_buffer, rgb_temp);
 8002ff6:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <Slave_Complete_Callback+0x390>)
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	a901      	add	r1, sp, #4
 8002ffc:	f000 fcfe 	bl	80039fc <enqueue_rgb233>
 8003000:	e7e3      	b.n	8002fca <Slave_Complete_Callback+0x232>
      for(int i = 0; i < len - 1; i++) {
 8003002:	42aa      	cmp	r2, r5
 8003004:	da47      	bge.n	8003096 <Slave_Complete_Callback+0x2fe>
        uint8_t rx_index = rx_data[0]-0x50+i;
 8003006:	7823      	ldrb	r3, [r4, #0]
 8003008:	3b50      	subs	r3, #80	; 0x50
 800300a:	189b      	adds	r3, r3, r2
 800300c:	b2db      	uxtb	r3, r3
        rx_buf[rx_index] = rx_data[1+i];
 800300e:	3201      	adds	r2, #1
 8003010:	5ca6      	ldrb	r6, [r4, r2]
        rx_mark[rx_index] = 1;
 8003012:	54c7      	strb	r7, [r0, r3]
        if (rx_mark[9] == 0) {
 8003014:	7a41      	ldrb	r1, [r0, #9]
 8003016:	2900      	cmp	r1, #0
 8003018:	d1f3      	bne.n	8003002 <Slave_Complete_Callback+0x26a>
          ((uint8_t *)lastest_rgb_233_color)[rx_index] = rx_buf[rx_index];
 800301a:	4641      	mov	r1, r8
 800301c:	6809      	ldr	r1, [r1, #0]
 800301e:	54ce      	strb	r6, [r1, r3]
          ((uint8_t *)rgb_233_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8003020:	4661      	mov	r1, ip
 8003022:	6809      	ldr	r1, [r1, #0]
 8003024:	6849      	ldr	r1, [r1, #4]
 8003026:	54ce      	strb	r6, [r1, r3]
 8003028:	e7eb      	b.n	8003002 <Slave_Complete_Callback+0x26a>
            jump_bootloader_timeout++;
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	6023      	str	r3, [r4, #0]
            if (jump_bootloader_timeout >= 60000) {
 8003030:	6822      	ldr	r2, [r4, #0]
 8003032:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <Slave_Complete_Callback+0x398>)
 8003034:	429a      	cmp	r2, r3
 8003036:	d80d      	bhi.n	8003054 <Slave_Complete_Callback+0x2bc>
          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8003038:	0031      	movs	r1, r6
 800303a:	0028      	movs	r0, r5
 800303c:	f001 faf6 	bl	800462c <HAL_GPIO_ReadPin>
 8003040:	2800      	cmp	r0, #0
 8003042:	d1f2      	bne.n	800302a <Slave_Complete_Callback+0x292>
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0149      	lsls	r1, r1, #5
 8003048:	0028      	movs	r0, r5
 800304a:	f001 faef 	bl	800462c <HAL_GPIO_ReadPin>
 800304e:	2800      	cmp	r0, #0
 8003050:	d1eb      	bne.n	800302a <Slave_Complete_Callback+0x292>
 8003052:	e002      	b.n	800305a <Slave_Complete_Callback+0x2c2>
              flag_jump_bootloader = 0;
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <Slave_Complete_Callback+0x37c>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
              break;
            }
          }
          if (jump_bootloader_timeout < 60000) {
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <Slave_Complete_Callback+0x38c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <Slave_Complete_Callback+0x398>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d90d      	bls.n	8003080 <Slave_Complete_Callback+0x2e8>
            NVIC_SystemReset();
          } else {
            MX_GPIO_Init();
 8003064:	f7ff fb0e 	bl	8002684 <MX_GPIO_Init>
            MX_DMA_Init();
 8003068:	f7ff fa48 	bl	80024fc <MX_DMA_Init>
            MX_TIM3_Init(); 
 800306c:	f000 fc30 	bl	80038d0 <MX_TIM3_Init>
            user_i2c_init(); 
 8003070:	f7ff fb86 	bl	8002780 <user_i2c_init>
            i2c2_it_enable(); 
 8003074:	f7ff fc12 	bl	800289c <i2c2_it_enable>
            jump_bootloader_timeout = 0;
 8003078:	4b2a      	ldr	r3, [pc, #168]	; (8003124 <Slave_Complete_Callback+0x38c>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	e00a      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003080:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003084:	4b2b      	ldr	r3, [pc, #172]	; (8003134 <Slave_Complete_Callback+0x39c>)
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <Slave_Complete_Callback+0x3a0>)
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800308e:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003090:	e7fd      	b.n	800308e <Slave_Complete_Callback+0x2f6>
          }
        }        
      }   
    }      
  }
  else if (len == 1) {
 8003092:	2d01      	cmp	r5, #1
 8003094:	d005      	beq.n	80030a2 <Slave_Complete_Callback+0x30a>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_1, 8*4);
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x90], 0xAF-rx_data[0]+1);               
    }     
  }
 
}
 8003096:	b022      	add	sp, #136	; 0x88
 8003098:	bce0      	pop	{r5, r6, r7}
 800309a:	46ba      	mov	sl, r7
 800309c:	46b1      	mov	r9, r6
 800309e:	46a8      	mov	r8, r5
 80030a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rx_data[0] == 0xFF) 
 80030a2:	7824      	ldrb	r4, [r4, #0]
 80030a4:	2cff      	cmp	r4, #255	; 0xff
 80030a6:	d013      	beq.n	80030d0 <Slave_Complete_Callback+0x338>
    else if (rx_data[0] == 0xFE) 
 80030a8:	2cfe      	cmp	r4, #254	; 0xfe
 80030aa:	d016      	beq.n	80030da <Slave_Complete_Callback+0x342>
    else if (rx_data[0] == 0xF1) 
 80030ac:	2cf1      	cmp	r4, #241	; 0xf1
 80030ae:	d019      	beq.n	80030e4 <Slave_Complete_Callback+0x34c>
    else if (rx_data[0] == 0) {
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	d147      	bne.n	8003144 <Slave_Complete_Callback+0x3ac>
      if (is_irq_enable)
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <Slave_Complete_Callback+0x364>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <Slave_Complete_Callback+0x32e>
        GPIOA->BSRR = GPIO_PIN_13;
 80030bc:	23a0      	movs	r3, #160	; 0xa0
 80030be:	05db      	lsls	r3, r3, #23
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	0192      	lsls	r2, r2, #6
 80030c4:	619a      	str	r2, [r3, #24]
      i2c2_set_send_data((uint8_t *)&switch_status, 1);
 80030c6:	2101      	movs	r1, #1
 80030c8:	481c      	ldr	r0, [pc, #112]	; (800313c <Slave_Complete_Callback+0x3a4>)
 80030ca:	f7ff fc13 	bl	80028f4 <i2c2_set_send_data>
 80030ce:	e7e2      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      i2c2_set_send_data(i2c_address, 1);
 80030d0:	2101      	movs	r1, #1
 80030d2:	4808      	ldr	r0, [pc, #32]	; (80030f4 <Slave_Complete_Callback+0x35c>)
 80030d4:	f7ff fc0e 	bl	80028f4 <i2c2_set_send_data>
 80030d8:	e7dd      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      i2c2_set_send_data((uint8_t *)&fm_version, 1);
 80030da:	2101      	movs	r1, #1
 80030dc:	4818      	ldr	r0, [pc, #96]	; (8003140 <Slave_Complete_Callback+0x3a8>)
 80030de:	f7ff fc09 	bl	80028f4 <i2c2_set_send_data>
 80030e2:	e7d8      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      i2c2_set_send_data((uint8_t *)&is_irq_enable, 1);
 80030e4:	2101      	movs	r1, #1
 80030e6:	4805      	ldr	r0, [pc, #20]	; (80030fc <Slave_Complete_Callback+0x364>)
 80030e8:	f7ff fc04 	bl	80028f4 <i2c2_set_send_data>
 80030ec:	e7d3      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000768 	.word	0x20000768
 80030f4:	20000758 	.word	0x20000758
 80030f8:	20000760 	.word	0x20000760
 80030fc:	20000761 	.word	0x20000761
 8003100:	20000864 	.word	0x20000864
 8003104:	2000076c 	.word	0x2000076c
 8003108:	20000a44 	.word	0x20000a44
 800310c:	20000a3c 	.word	0x20000a3c
 8003110:	2000078c 	.word	0x2000078c
 8003114:	20000656 	.word	0x20000656
 8003118:	40005800 	.word	0x40005800
 800311c:	fdffffff 	.word	0xfdffffff
 8003120:	2000080c 	.word	0x2000080c
 8003124:	20000764 	.word	0x20000764
 8003128:	20000a40 	.word	0x20000a40
 800312c:	20000a38 	.word	0x20000a38
 8003130:	0000ea5f 	.word	0x0000ea5f
 8003134:	e000ed00 	.word	0xe000ed00
 8003138:	05fa0004 	.word	0x05fa0004
 800313c:	20000769 	.word	0x20000769
 8003140:	200000c0 	.word	0x200000c0
    else if ((rx_data[0] >= 0x60) && (rx_data[0] <= 0x67)) {
 8003144:	0023      	movs	r3, r4
 8003146:	3b60      	subs	r3, #96	; 0x60
 8003148:	2b07      	cmp	r3, #7
 800314a:	d817      	bhi.n	800317c <Slave_Complete_Callback+0x3e4>
 800314c:	a916      	add	r1, sp, #88	; 0x58
      for (int i = 0; i < 8; i++) {
 800314e:	2200      	movs	r2, #0
        switch_status_set[i] = (!!(switch_status & (1 << i)));
 8003150:	4d41      	ldr	r5, [pc, #260]	; (8003258 <Slave_Complete_Callback+0x4c0>)
 8003152:	2001      	movs	r0, #1
 8003154:	782b      	ldrb	r3, [r5, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4113      	asrs	r3, r2
 800315a:	4003      	ands	r3, r0
        buf[i] = switch_status_set[i];
 800315c:	700b      	strb	r3, [r1, #0]
      for (int i = 0; i < 8; i++) {
 800315e:	3201      	adds	r2, #1
 8003160:	3101      	adds	r1, #1
 8003162:	2a08      	cmp	r2, #8
 8003164:	d1f6      	bne.n	8003154 <Slave_Complete_Callback+0x3bc>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x60], 0x67-rx_data[0]+1);
 8003166:	2168      	movs	r1, #104	; 0x68
 8003168:	1b09      	subs	r1, r1, r4
 800316a:	b289      	uxth	r1, r1
 800316c:	2388      	movs	r3, #136	; 0x88
 800316e:	18e4      	adds	r4, r4, r3
 8003170:	446c      	add	r4, sp
 8003172:	0020      	movs	r0, r4
 8003174:	3890      	subs	r0, #144	; 0x90
 8003176:	f7ff fbbd 	bl	80028f4 <i2c2_set_send_data>
 800317a:	e78c      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
    else if ((rx_data[0] >= 0x10) && (rx_data[0] <= 0x19)) {
 800317c:	0023      	movs	r3, r4
 800317e:	3b10      	subs	r3, #16
 8003180:	2b09      	cmp	r3, #9
 8003182:	d923      	bls.n	80031cc <Slave_Complete_Callback+0x434>
    else if ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x43)) {
 8003184:	0023      	movs	r3, r4
 8003186:	3b20      	subs	r3, #32
 8003188:	2b23      	cmp	r3, #35	; 0x23
 800318a:	d931      	bls.n	80031f0 <Slave_Complete_Callback+0x458>
    else if ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x58)) {
 800318c:	0023      	movs	r3, r4
 800318e:	3b50      	subs	r3, #80	; 0x50
 8003190:	2b08      	cmp	r3, #8
 8003192:	d93e      	bls.n	8003212 <Slave_Complete_Callback+0x47a>
    else if ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F)) {
 8003194:	0023      	movs	r3, r4
 8003196:	3b70      	subs	r3, #112	; 0x70
 8003198:	2b1f      	cmp	r3, #31
 800319a:	d94b      	bls.n	8003234 <Slave_Complete_Callback+0x49c>
    else if ((rx_data[0] >= 0x90) && (rx_data[0] <= 0xAF)) {
 800319c:	0023      	movs	r3, r4
 800319e:	3370      	adds	r3, #112	; 0x70
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b1f      	cmp	r3, #31
 80031a4:	d900      	bls.n	80031a8 <Slave_Complete_Callback+0x410>
 80031a6:	e776      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_1, 8*4);
 80031a8:	ad16      	add	r5, sp, #88	; 0x58
 80031aa:	4b2c      	ldr	r3, [pc, #176]	; (800325c <Slave_Complete_Callback+0x4c4>)
 80031ac:	002a      	movs	r2, r5
 80031ae:	cb43      	ldmia	r3!, {r0, r1, r6}
 80031b0:	c243      	stmia	r2!, {r0, r1, r6}
 80031b2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80031b4:	c243      	stmia	r2!, {r0, r1, r6}
 80031b6:	cb03      	ldmia	r3!, {r0, r1}
 80031b8:	c203      	stmia	r2!, {r0, r1}
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x90], 0xAF-rx_data[0]+1);               
 80031ba:	21b0      	movs	r1, #176	; 0xb0
 80031bc:	1b09      	subs	r1, r1, r4
 80031be:	b289      	uxth	r1, r1
 80031c0:	0020      	movs	r0, r4
 80031c2:	3890      	subs	r0, #144	; 0x90
 80031c4:	1828      	adds	r0, r5, r0
 80031c6:	f7ff fb95 	bl	80028f4 <i2c2_set_send_data>
}
 80031ca:	e764      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      memcpy(buf, brightness_index, 9);
 80031cc:	ad16      	add	r5, sp, #88	; 0x58
 80031ce:	2209      	movs	r2, #9
 80031d0:	4923      	ldr	r1, [pc, #140]	; (8003260 <Slave_Complete_Callback+0x4c8>)
 80031d2:	0028      	movs	r0, r5
 80031d4:	f002 f926 	bl	8005424 <memcpy>
      buf[9] = rgb_show_mode;
 80031d8:	4b22      	ldr	r3, [pc, #136]	; (8003264 <Slave_Complete_Callback+0x4cc>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	726b      	strb	r3, [r5, #9]
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x10], 0x19-rx_data[0]+1);
 80031de:	211a      	movs	r1, #26
 80031e0:	1b09      	subs	r1, r1, r4
 80031e2:	b289      	uxth	r1, r1
 80031e4:	0020      	movs	r0, r4
 80031e6:	3810      	subs	r0, #16
 80031e8:	1828      	adds	r0, r5, r0
 80031ea:	f7ff fb83 	bl	80028f4 <i2c2_set_send_data>
 80031ee:	e752      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      memcpy(buf, (uint8_t *)lastest_rgb_color, PIXEL_MAX*4);
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <Slave_Complete_Callback+0x4d0>)
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	2224      	movs	r2, #36	; 0x24
 80031f6:	a816      	add	r0, sp, #88	; 0x58
 80031f8:	f002 f914 	bl	8005424 <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x20], 0x43-rx_data[0]+1);               
 80031fc:	2144      	movs	r1, #68	; 0x44
 80031fe:	1b09      	subs	r1, r1, r4
 8003200:	b289      	uxth	r1, r1
 8003202:	0020      	movs	r0, r4
 8003204:	3820      	subs	r0, #32
 8003206:	ab16      	add	r3, sp, #88	; 0x58
 8003208:	469c      	mov	ip, r3
 800320a:	4460      	add	r0, ip
 800320c:	f7ff fb72 	bl	80028f4 <i2c2_set_send_data>
 8003210:	e741      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      memcpy(buf, (uint8_t *)lastest_rgb_233_color, PIXEL_MAX);
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <Slave_Complete_Callback+0x4d4>)
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	2209      	movs	r2, #9
 8003218:	a816      	add	r0, sp, #88	; 0x58
 800321a:	f002 f903 	bl	8005424 <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x50], 0x58-rx_data[0]+1);               
 800321e:	2159      	movs	r1, #89	; 0x59
 8003220:	1b09      	subs	r1, r1, r4
 8003222:	b289      	uxth	r1, r1
 8003224:	0020      	movs	r0, r4
 8003226:	3850      	subs	r0, #80	; 0x50
 8003228:	ab16      	add	r3, sp, #88	; 0x58
 800322a:	469c      	mov	ip, r3
 800322c:	4460      	add	r0, ip
 800322e:	f7ff fb61 	bl	80028f4 <i2c2_set_send_data>
 8003232:	e730      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_0, 8*4);
 8003234:	ad16      	add	r5, sp, #88	; 0x58
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <Slave_Complete_Callback+0x4d8>)
 8003238:	002a      	movs	r2, r5
 800323a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800323c:	c243      	stmia	r2!, {r0, r1, r6}
 800323e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003240:	c243      	stmia	r2!, {r0, r1, r6}
 8003242:	cb03      	ldmia	r3!, {r0, r1}
 8003244:	c203      	stmia	r2!, {r0, r1}
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x70], 0x8F-rx_data[0]+1);                
 8003246:	2190      	movs	r1, #144	; 0x90
 8003248:	1b09      	subs	r1, r1, r4
 800324a:	b289      	uxth	r1, r1
 800324c:	0020      	movs	r0, r4
 800324e:	3870      	subs	r0, #112	; 0x70
 8003250:	1828      	adds	r0, r5, r0
 8003252:	f7ff fb4f 	bl	80028f4 <i2c2_set_send_data>
 8003256:	e71e      	b.n	8003096 <Slave_Complete_Callback+0x2fe>
 8003258:	20000769 	.word	0x20000769
 800325c:	2000078c 	.word	0x2000078c
 8003260:	20000864 	.word	0x20000864
 8003264:	20000768 	.word	0x20000768
 8003268:	20000a3c 	.word	0x20000a3c
 800326c:	20000a38 	.word	0x20000a38
 8003270:	2000076c 	.word	0x2000076c

08003274 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8003274:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8003276:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800327a:	4b03      	ldr	r3, [pc, #12]	; (8003288 <Error_Handler+0x14>)
 800327c:	4a03      	ldr	r2, [pc, #12]	; (800328c <Error_Handler+0x18>)
 800327e:	60da      	str	r2, [r3, #12]
 8003280:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003284:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003286:	e7fd      	b.n	8003284 <Error_Handler+0x10>
 8003288:	e000ed00 	.word	0xe000ed00
 800328c:	05fa0004 	.word	0x05fa0004

08003290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003290:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003292:	4a28      	ldr	r2, [pc, #160]	; (8003334 <SystemClock_Config+0xa4>)
 8003294:	6813      	ldr	r3, [r2, #0]
 8003296:	2107      	movs	r1, #7
 8003298:	438b      	bics	r3, r1
 800329a:	3905      	subs	r1, #5
 800329c:	430b      	orrs	r3, r1
 800329e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80032a0:	0011      	movs	r1, r2
 80032a2:	2207      	movs	r2, #7
 80032a4:	680b      	ldr	r3, [r1, #0]
 80032a6:	4013      	ands	r3, r2
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d1fb      	bne.n	80032a4 <SystemClock_Config+0x14>
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <SystemClock_Config+0xa8>)
 80032ae:	6811      	ldr	r1, [r2, #0]
 80032b0:	33fe      	adds	r3, #254	; 0xfe
 80032b2:	430b      	orrs	r3, r1
 80032b4:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80032b6:	0011      	movs	r1, r2
 80032b8:	2280      	movs	r2, #128	; 0x80
 80032ba:	00d2      	lsls	r2, r2, #3
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	4213      	tst	r3, r2
 80032c0:	d0fc      	beq.n	80032bc <SystemClock_Config+0x2c>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80032c2:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <SystemClock_Config+0xa8>)
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	491d      	ldr	r1, [pc, #116]	; (800333c <SystemClock_Config+0xac>)
 80032c8:	4011      	ands	r1, r2
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <SystemClock_Config+0xb0>)
 80032cc:	430a      	orrs	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	0452      	lsls	r2, r2, #17
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80032da:	68d9      	ldr	r1, [r3, #12]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	0552      	lsls	r2, r2, #21
 80032e0:	430a      	orrs	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80032e4:	0019      	movs	r1, r3
 80032e6:	2280      	movs	r2, #128	; 0x80
 80032e8:	0492      	lsls	r2, r2, #18
 80032ea:	680b      	ldr	r3, [r1, #0]
 80032ec:	4213      	tst	r3, r2
 80032ee:	d0fc      	beq.n	80032ea <SystemClock_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032f0:	4a11      	ldr	r2, [pc, #68]	; (8003338 <SystemClock_Config+0xa8>)
 80032f2:	6893      	ldr	r3, [r2, #8]
 80032f4:	4913      	ldr	r1, [pc, #76]	; (8003344 <SystemClock_Config+0xb4>)
 80032f6:	400b      	ands	r3, r1
 80032f8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80032fa:	6893      	ldr	r3, [r2, #8]
 80032fc:	2107      	movs	r1, #7
 80032fe:	438b      	bics	r3, r1
 8003300:	3905      	subs	r1, #5
 8003302:	430b      	orrs	r3, r1
 8003304:	6093      	str	r3, [r2, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003306:	0011      	movs	r1, r2
 8003308:	2238      	movs	r2, #56	; 0x38
 800330a:	688b      	ldr	r3, [r1, #8]
 800330c:	4013      	ands	r3, r2
  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800330e:	2b10      	cmp	r3, #16
 8003310:	d1fb      	bne.n	800330a <SystemClock_Config+0x7a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8003312:	4a09      	ldr	r2, [pc, #36]	; (8003338 <SystemClock_Config+0xa8>)
 8003314:	6893      	ldr	r3, [r2, #8]
 8003316:	490c      	ldr	r1, [pc, #48]	; (8003348 <SystemClock_Config+0xb8>)
 8003318:	400b      	ands	r3, r1
 800331a:	6093      	str	r3, [r2, #8]
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <SystemClock_Config+0xbc>)
 800331e:	f002 f833 	bl	8005388 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8003322:	2003      	movs	r0, #3
 8003324:	f000 fcf0 	bl	8003d08 <HAL_InitTick>
 8003328:	2800      	cmp	r0, #0
 800332a:	d100      	bne.n	800332e <SystemClock_Config+0x9e>
  {
    Error_Handler();
  }
}
 800332c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800332e:	f7ff ffa1 	bl	8003274 <Error_Handler>
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40022000 	.word	0x40022000
 8003338:	40021000 	.word	0x40021000
 800333c:	1fff808c 	.word	0x1fff808c
 8003340:	20000802 	.word	0x20000802
 8003344:	fffff0ff 	.word	0xfffff0ff
 8003348:	ffff8fff 	.word	0xffff8fff
 800334c:	03d09000 	.word	0x03d09000

08003350 <main>:
{
 8003350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003352:	46de      	mov	lr, fp
 8003354:	4657      	mov	r7, sl
 8003356:	464e      	mov	r6, r9
 8003358:	4645      	mov	r5, r8
 800335a:	b5e0      	push	{r5, r6, r7, lr}
 800335c:	b08d      	sub	sp, #52	; 0x34
  IAP_Set();
 800335e:	f7ff fbe5 	bl	8002b2c <IAP_Set>
  HAL_Init();
 8003362:	f000 fcf9 	bl	8003d58 <HAL_Init>
  SystemClock_Config();
 8003366:	f7ff ff93 	bl	8003290 <SystemClock_Config>
  MX_GPIO_Init();
 800336a:	f7ff f98b 	bl	8002684 <MX_GPIO_Init>
  MX_DMA_Init();
 800336e:	f7ff f8c5 	bl	80024fc <MX_DMA_Init>
  MX_TIM3_Init();
 8003372:	f000 faad 	bl	80038d0 <MX_TIM3_Init>
  init_flash_data();
 8003376:	f7ff fc4b 	bl	8002c10 <init_flash_data>
  if (is_irq_enable) {
 800337a:	4b67      	ldr	r3, [pc, #412]	; (8003518 <main+0x1c8>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11b      	bne.n	80033ba <main+0x6a>
  sk6812_init(PIXEL_MAX);
 8003382:	2009      	movs	r0, #9
 8003384:	f000 fb6a 	bl	8003a5c <sk6812_init>
  init_swtich_status();
 8003388:	f7ff fcbc 	bl	8002d04 <init_swtich_status>
  fm_version = FIRMWARE_VERSION;
 800338c:	4b63      	ldr	r3, [pc, #396]	; (800351c <main+0x1cc>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
  user_i2c_init(); 
 8003392:	f7ff f9f5 	bl	8002780 <user_i2c_init>
  i2c2_it_enable(); 
 8003396:	f7ff fa81 	bl	800289c <i2c2_it_enable>
  for (int i = 0; i < PIXEL_MAX; i++) {
 800339a:	2400      	movs	r4, #0
    neopixel_set_color(i, 0);
 800339c:	b2e0      	uxtb	r0, r4
 800339e:	2100      	movs	r1, #0
 80033a0:	f000 fb8c 	bl	8003abc <neopixel_set_color>
  for (int i = 0; i < PIXEL_MAX; i++) {
 80033a4:	3401      	adds	r4, #1
 80033a6:	2c09      	cmp	r4, #9
 80033a8:	d1f8      	bne.n	800339c <main+0x4c>
  ws2812_show();  
 80033aa:	f000 fc11 	bl	8003bd0 <ws2812_show>
    i2c_timeout_counter = 0;
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <main+0x1d0>)
 80033b0:	469b      	mov	fp, r3
 80033b2:	2500      	movs	r5, #0
    if (i2c_stop_timeout_flag) {
 80033b4:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <main+0x1d4>)
 80033b6:	469a      	mov	sl, r3
 80033b8:	e068      	b.n	800348c <main+0x13c>
    irq_port_init();
 80033ba:	f7ff fc01 	bl	8002bc0 <irq_port_init>
 80033be:	e7e0      	b.n	8003382 <main+0x32>
      if (i2c_stop_timeout_delay < HAL_GetTick()) {
 80033c0:	f000 fcea 	bl	8003d98 <HAL_GetTick>
 80033c4:	4b58      	ldr	r3, [pc, #352]	; (8003528 <main+0x1d8>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4298      	cmp	r0, r3
 80033ca:	d965      	bls.n	8003498 <main+0x148>
        i2c_stop_timeout_counter++;
 80033cc:	4a57      	ldr	r2, [pc, #348]	; (800352c <main+0x1dc>)
 80033ce:	6813      	ldr	r3, [r2, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	6013      	str	r3, [r2, #0]
        i2c_stop_timeout_delay = HAL_GetTick() + 10;
 80033d4:	f000 fce0 	bl	8003d98 <HAL_GetTick>
 80033d8:	300a      	adds	r0, #10
 80033da:	4b53      	ldr	r3, [pc, #332]	; (8003528 <main+0x1d8>)
 80033dc:	6018      	str	r0, [r3, #0]
 80033de:	e05b      	b.n	8003498 <main+0x148>
      LL_I2C_DeInit(I2C2);
 80033e0:	4c53      	ldr	r4, [pc, #332]	; (8003530 <main+0x1e0>)
 80033e2:	0020      	movs	r0, r4
 80033e4:	f001 ff68 	bl	80052b8 <LL_I2C_DeInit>
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	4a52      	ldr	r2, [pc, #328]	; (8003534 <main+0x1e4>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4393      	bics	r3, r2
 80033f6:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	3207      	adds	r2, #7
 80033fc:	4393      	bics	r3, r2
 80033fe:	6023      	str	r3, [r4, #0]
      user_i2c_init();    
 8003400:	f7ff f9be 	bl	8002780 <user_i2c_init>
      i2c2_it_enable();
 8003404:	f7ff fa4a 	bl	800289c <i2c2_it_enable>
      HAL_Delay(500);
 8003408:	20fa      	movs	r0, #250	; 0xfa
 800340a:	0040      	lsls	r0, r0, #1
 800340c:	f000 fcca 	bl	8003da4 <HAL_Delay>
 8003410:	e046      	b.n	80034a0 <main+0x150>
 8003412:	4f49      	ldr	r7, [pc, #292]	; (8003538 <main+0x1e8>)
 8003414:	4e49      	ldr	r6, [pc, #292]	; (800353c <main+0x1ec>)
          for (int i = 0; i < 8; i++) {
 8003416:	2400      	movs	r4, #0
            if ((switch_status >> i) & 0x01) {
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <main+0x1f0>)
 800341a:	4699      	mov	r9, r3
 800341c:	2301      	movs	r3, #1
 800341e:	4698      	mov	r8, r3
 8003420:	e008      	b.n	8003434 <main+0xe4>
              neopixel_set_color(i, sys_rgb_color_switch_0[i]);
 8003422:	b2e0      	uxtb	r0, r4
 8003424:	6831      	ldr	r1, [r6, #0]
 8003426:	f000 fb49 	bl	8003abc <neopixel_set_color>
          for (int i = 0; i < 8; i++) {
 800342a:	3401      	adds	r4, #1
 800342c:	3704      	adds	r7, #4
 800342e:	3604      	adds	r6, #4
 8003430:	2c08      	cmp	r4, #8
 8003432:	d00b      	beq.n	800344c <main+0xfc>
            if ((switch_status >> i) & 0x01) {
 8003434:	464b      	mov	r3, r9
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	4123      	asrs	r3, r4
 800343c:	4642      	mov	r2, r8
 800343e:	421a      	tst	r2, r3
 8003440:	d0ef      	beq.n	8003422 <main+0xd2>
              neopixel_set_color(i, sys_rgb_color_switch_1[i]);
 8003442:	b2e0      	uxtb	r0, r4
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	f000 fb39 	bl	8003abc <neopixel_set_color>
 800344a:	e7ee      	b.n	800342a <main+0xda>
          neopixel_set_color(8, lastest_rgb_color[8]);
 800344c:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <main+0x1f4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6a19      	ldr	r1, [r3, #32]
 8003452:	2008      	movs	r0, #8
 8003454:	f000 fb32 	bl	8003abc <neopixel_set_color>
          rgb_show_lock = 1;
 8003458:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <main+0x1f8>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
          ws2812_show();        
 800345e:	f000 fbb7 	bl	8003bd0 <ws2812_show>
 8003462:	e030      	b.n	80034c6 <main+0x176>
          rgb_show_lock = 1;
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <main+0x1f8>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
          ws2812_show();
 800346a:	f000 fbb1 	bl	8003bd0 <ws2812_show>
      if (dequeue_rgb233(rgb_233_buffer, rgb_233_show_temp) == 1) {
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <main+0x1fc>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	4669      	mov	r1, sp
 8003474:	f000 fad8 	bl	8003a28 <dequeue_rgb233>
 8003478:	2801      	cmp	r0, #1
 800347a:	d039      	beq.n	80034f0 <main+0x1a0>
    if (is_flash_write_back) {
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <main+0x200>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <main+0x13c>
      flash_data_write_back();
 8003484:	f7ff fc0c 	bl	8002ca0 <flash_data_write_back>
      is_flash_write_back = 0;
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <main+0x200>)
 800348a:	701d      	strb	r5, [r3, #0]
    i2c_timeout_counter = 0;
 800348c:	465b      	mov	r3, fp
 800348e:	601d      	str	r5, [r3, #0]
    if (i2c_stop_timeout_flag) {
 8003490:	4653      	mov	r3, sl
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d193      	bne.n	80033c0 <main+0x70>
    if (i2c_stop_timeout_counter > 50) {
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <main+0x1dc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b32      	cmp	r3, #50	; 0x32
 800349e:	d89f      	bhi.n	80033e0 <main+0x90>
    uint32_t rgb_show_temp[PIXEL_MAX] = {0};
 80034a0:	2224      	movs	r2, #36	; 0x24
 80034a2:	0029      	movs	r1, r5
 80034a4:	a803      	add	r0, sp, #12
 80034a6:	f001 ffc6 	bl	8005436 <memset>
    uint8_t rgb_233_show_temp[PIXEL_MAX] = {0};
 80034aa:	9500      	str	r5, [sp, #0]
 80034ac:	2205      	movs	r2, #5
 80034ae:	0029      	movs	r1, r5
 80034b0:	a801      	add	r0, sp, #4
 80034b2:	f001 ffc0 	bl	8005436 <memset>
    if (!rgb_show_lock) {
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <main+0x1f8>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1de      	bne.n	800347c <main+0x12c>
      if (rgb_show_mode) {
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <main+0x204>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1a5      	bne.n	8003412 <main+0xc2>
      if (dequeue(rgb_buffer, rgb_show_temp) == 1) {
 80034c6:	4b24      	ldr	r3, [pc, #144]	; (8003558 <main+0x208>)
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	a903      	add	r1, sp, #12
 80034cc:	f000 fa74 	bl	80039b8 <dequeue>
 80034d0:	2801      	cmp	r0, #1
 80034d2:	d1cc      	bne.n	800346e <main+0x11e>
        if (!rgb_show_mode) {
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <main+0x204>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1c8      	bne.n	800346e <main+0x11e>
 80034dc:	ae03      	add	r6, sp, #12
          for (int i = 0; i < PIXEL_MAX; i++) {
 80034de:	2400      	movs	r4, #0
            neopixel_set_color(i, rgb_show_temp[i]);
 80034e0:	ce02      	ldmia	r6!, {r1}
 80034e2:	b2e0      	uxtb	r0, r4
 80034e4:	f000 faea 	bl	8003abc <neopixel_set_color>
          for (int i = 0; i < PIXEL_MAX; i++) {
 80034e8:	3401      	adds	r4, #1
 80034ea:	2c09      	cmp	r4, #9
 80034ec:	d1f8      	bne.n	80034e0 <main+0x190>
 80034ee:	e7b9      	b.n	8003464 <main+0x114>
        if (!rgb_show_mode) {
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <main+0x204>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1c1      	bne.n	800347c <main+0x12c>
 80034f8:	466e      	mov	r6, sp
          for (int i = 0; i < PIXEL_MAX; i++) {
 80034fa:	2400      	movs	r4, #0
            rgb233_to_rgb888(i, rgb_233_show_temp[i]);
 80034fc:	7831      	ldrb	r1, [r6, #0]
 80034fe:	b2e0      	uxtb	r0, r4
 8003500:	f000 fb3e 	bl	8003b80 <rgb233_to_rgb888>
          for (int i = 0; i < PIXEL_MAX; i++) {
 8003504:	3401      	adds	r4, #1
 8003506:	3601      	adds	r6, #1
 8003508:	2c09      	cmp	r4, #9
 800350a:	d1f7      	bne.n	80034fc <main+0x1ac>
          rgb_show_lock = 1;
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <main+0x1f8>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
          ws2812_show();
 8003512:	f000 fb5d 	bl	8003bd0 <ws2812_show>
 8003516:	e7b1      	b.n	800347c <main+0x12c>
 8003518:	20000761 	.word	0x20000761
 800351c:	200000c0 	.word	0x200000c0
 8003520:	200003f4 	.word	0x200003f4
 8003524:	200003f0 	.word	0x200003f0
 8003528:	2000075c 	.word	0x2000075c
 800352c:	200003ec 	.word	0x200003ec
 8003530:	40005800 	.word	0x40005800
 8003534:	fdffffff 	.word	0xfdffffff
 8003538:	2000078c 	.word	0x2000078c
 800353c:	2000076c 	.word	0x2000076c
 8003540:	20000769 	.word	0x20000769
 8003544:	20000a3c 	.word	0x20000a3c
 8003548:	20000a48 	.word	0x20000a48
 800354c:	20000a40 	.word	0x20000a40
 8003550:	20000760 	.word	0x20000760
 8003554:	20000768 	.word	0x20000768
 8003558:	20000a44 	.word	0x20000a44

0800355c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800355c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <HAL_MspInit+0x2c>)
 8003560:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003562:	2201      	movs	r2, #1
 8003564:	4311      	orrs	r1, r2
 8003566:	6419      	str	r1, [r3, #64]	; 0x40
 8003568:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800356a:	400a      	ands	r2, r1
 800356c:	9200      	str	r2, [sp, #0]
 800356e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003572:	2180      	movs	r1, #128	; 0x80
 8003574:	0549      	lsls	r1, r1, #21
 8003576:	430a      	orrs	r2, r1
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	400b      	ands	r3, r1
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003582:	b002      	add	sp, #8
 8003584:	4770      	bx	lr
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	40021000 	.word	0x40021000

0800358c <NMI_Handler>:
 800358c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <NMI_Handler+0x14>)
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <NMI_Handler+0x18>)
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	f3bf 8f4f 	dsb	sy
    __NOP();
 800359a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800359c:	e7fd      	b.n	800359a <NMI_Handler+0xe>
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	e000ed00 	.word	0xe000ed00
 80035a4:	05fa0004 	.word	0x05fa0004

080035a8 <HardFault_Handler>:
 80035a8:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HardFault_Handler+0x14>)
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HardFault_Handler+0x18>)
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	f3bf 8f4f 	dsb	sy
    __NOP();
 80035b6:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80035b8:	e7fd      	b.n	80035b6 <HardFault_Handler+0xe>
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	e000ed00 	.word	0xe000ed00
 80035c0:	05fa0004 	.word	0x05fa0004

080035c4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035c4:	4770      	bx	lr

080035c6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035c6:	4770      	bx	lr

080035c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ca:	f000 fbd9 	bl	8003d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80035d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K1_Pin);
 80035d2:	2001      	movs	r0, #1
 80035d4:	f001 f838 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K2_Pin);
 80035d8:	2002      	movs	r0, #2
 80035da:	f001 f835 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  if ((SW_K1_GPIO_Port->IDR&(SW_K1_Pin))>0) {
 80035de:	23a0      	movs	r3, #160	; 0xa0
 80035e0:	05db      	lsls	r3, r3, #23
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	07db      	lsls	r3, r3, #31
 80035e6:	d520      	bpl.n	800362a <EXTI0_1_IRQHandler+0x5a>
    switch_status |= (!!(SW_K1_GPIO_Port->IDR&(SW_K1_Pin)));
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	6918      	ldr	r0, [r3, #16]
 80035ee:	4915      	ldr	r1, [pc, #84]	; (8003644 <EXTI0_1_IRQHandler+0x74>)
 80035f0:	780b      	ldrb	r3, [r1, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4002      	ands	r2, r0
 80035f6:	4313      	orrs	r3, r2
 80035f8:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1));
  }

  if ((SW_K2_GPIO_Port->IDR&(SW_K2_Pin))>0) {
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	05db      	lsls	r3, r3, #23
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	079b      	lsls	r3, r3, #30
 8003602:	d518      	bpl.n	8003636 <EXTI0_1_IRQHandler+0x66>
    switch_status |= ((!!(SW_K2_GPIO_Port->IDR&(SW_K2_Pin))) << 1);
 8003604:	23a0      	movs	r3, #160	; 0xa0
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	6918      	ldr	r0, [r3, #16]
 800360a:	490e      	ldr	r1, [pc, #56]	; (8003644 <EXTI0_1_IRQHandler+0x74>)
 800360c:	780b      	ldrb	r3, [r1, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	4002      	ands	r2, r0
 8003612:	4313      	orrs	r3, r2
 8003614:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 1));
  }

  if (is_irq_enable)
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <EXTI0_1_IRQHandler+0x78>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <EXTI0_1_IRQHandler+0x58>
    GPIOA->BRR = GPIO_PIN_13;
 800361e:	23a0      	movs	r3, #160	; 0xa0
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	2280      	movs	r2, #128	; 0x80
 8003624:	0192      	lsls	r2, r2, #6
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003628:	bd10      	pop	{r4, pc}
    switch_status &= (~(1));
 800362a:	4a06      	ldr	r2, [pc, #24]	; (8003644 <EXTI0_1_IRQHandler+0x74>)
 800362c:	7813      	ldrb	r3, [r2, #0]
 800362e:	2101      	movs	r1, #1
 8003630:	438b      	bics	r3, r1
 8003632:	7013      	strb	r3, [r2, #0]
 8003634:	e7e1      	b.n	80035fa <EXTI0_1_IRQHandler+0x2a>
    switch_status &= (~(1 << 1));
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <EXTI0_1_IRQHandler+0x74>)
 8003638:	7813      	ldrb	r3, [r2, #0]
 800363a:	2102      	movs	r1, #2
 800363c:	438b      	bics	r3, r1
 800363e:	7013      	strb	r3, [r2, #0]
 8003640:	e7e9      	b.n	8003616 <EXTI0_1_IRQHandler+0x46>
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	20000769 	.word	0x20000769
 8003648:	20000761 	.word	0x20000761

0800364c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800364c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K7_Pin);
 800364e:	2008      	movs	r0, #8
 8003650:	f000 fffa 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  if ((SW_K7_GPIO_Port->IDR&(SW_K7_Pin))>0) {
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <EXTI2_3_IRQHandler+0x44>)
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	071b      	lsls	r3, r3, #28
 800365a:	d512      	bpl.n	8003682 <EXTI2_3_IRQHandler+0x36>
    switch_status |= ((!!(SW_K7_GPIO_Port->IDR&(SW_K7_Pin))) << 6);
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <EXTI2_3_IRQHandler+0x44>)
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	0fdb      	lsrs	r3, r3, #31
 8003664:	019b      	lsls	r3, r3, #6
 8003666:	490b      	ldr	r1, [pc, #44]	; (8003694 <EXTI2_3_IRQHandler+0x48>)
 8003668:	780a      	ldrb	r2, [r1, #0]
 800366a:	4313      	orrs	r3, r2
 800366c:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 6));
  }

  if (is_irq_enable)
 800366e:	4b0a      	ldr	r3, [pc, #40]	; (8003698 <EXTI2_3_IRQHandler+0x4c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <EXTI2_3_IRQHandler+0x34>
    GPIOA->BRR = GPIO_PIN_13;  
 8003676:	23a0      	movs	r3, #160	; 0xa0
 8003678:	05db      	lsls	r3, r3, #23
 800367a:	2280      	movs	r2, #128	; 0x80
 800367c:	0192      	lsls	r2, r2, #6
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003680:	bd10      	pop	{r4, pc}
    switch_status &= (~(1 << 6));
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <EXTI2_3_IRQHandler+0x48>)
 8003684:	7813      	ldrb	r3, [r2, #0]
 8003686:	2140      	movs	r1, #64	; 0x40
 8003688:	438b      	bics	r3, r1
 800368a:	7013      	strb	r3, [r2, #0]
 800368c:	e7ef      	b.n	800366e <EXTI2_3_IRQHandler+0x22>
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	50000400 	.word	0x50000400
 8003694:	20000769 	.word	0x20000769
 8003698:	20000761 	.word	0x20000761

0800369c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800369c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K3_Pin);
 800369e:	2020      	movs	r0, #32
 80036a0:	f000 ffd2 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K4_Pin);
 80036a4:	2040      	movs	r0, #64	; 0x40
 80036a6:	f000 ffcf 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K5_Pin);
 80036aa:	2080      	movs	r0, #128	; 0x80
 80036ac:	f000 ffcc 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K8_Pin);
 80036b0:	2080      	movs	r0, #128	; 0x80
 80036b2:	0040      	lsls	r0, r0, #1
 80036b4:	f000 ffc8 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K6_Pin);
 80036b8:	2080      	movs	r0, #128	; 0x80
 80036ba:	0200      	lsls	r0, r0, #8
 80036bc:	f000 ffc4 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  if ((SW_K3_GPIO_Port->IDR&(SW_K3_Pin))>0) {
 80036c0:	23a0      	movs	r3, #160	; 0xa0
 80036c2:	05db      	lsls	r3, r3, #23
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	069b      	lsls	r3, r3, #26
 80036c8:	d54f      	bpl.n	800376a <EXTI4_15_IRQHandler+0xce>
    switch_status |= ((!!(SW_K3_GPIO_Port->IDR&(SW_K3_Pin))) << 2);
 80036ca:	23a0      	movs	r3, #160	; 0xa0
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	069b      	lsls	r3, r3, #26
 80036d2:	0fdb      	lsrs	r3, r3, #31
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4934      	ldr	r1, [pc, #208]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 80036d8:	780a      	ldrb	r2, [r1, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 2));
  }

  if ((SW_K4_GPIO_Port->IDR&(SW_K4_Pin))>0) {
 80036de:	23a0      	movs	r3, #160	; 0xa0
 80036e0:	05db      	lsls	r3, r3, #23
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	065b      	lsls	r3, r3, #25
 80036e6:	d546      	bpl.n	8003776 <EXTI4_15_IRQHandler+0xda>
    switch_status |= ((!!(SW_K4_GPIO_Port->IDR&(SW_K4_Pin))) << 3);
 80036e8:	23a0      	movs	r3, #160	; 0xa0
 80036ea:	05db      	lsls	r3, r3, #23
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	065b      	lsls	r3, r3, #25
 80036f0:	0fdb      	lsrs	r3, r3, #31
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	492c      	ldr	r1, [pc, #176]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 80036f6:	780a      	ldrb	r2, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 3));
  }  

  if ((SW_K5_GPIO_Port->IDR&(SW_K5_Pin))>0) {
 80036fc:	23a0      	movs	r3, #160	; 0xa0
 80036fe:	05db      	lsls	r3, r3, #23
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	061b      	lsls	r3, r3, #24
 8003704:	d53d      	bpl.n	8003782 <EXTI4_15_IRQHandler+0xe6>
    switch_status |= ((!!(SW_K5_GPIO_Port->IDR&(SW_K5_Pin))) << 4);
 8003706:	23a0      	movs	r3, #160	; 0xa0
 8003708:	05db      	lsls	r3, r3, #23
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	0fdb      	lsrs	r3, r3, #31
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003714:	780a      	ldrb	r2, [r1, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 4));
  }  

  if ((SW_K8_GPIO_Port->IDR&(SW_K8_Pin))>0) {
 800371a:	23a0      	movs	r3, #160	; 0xa0
 800371c:	05db      	lsls	r3, r3, #23
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	05db      	lsls	r3, r3, #23
 8003722:	d534      	bpl.n	800378e <EXTI4_15_IRQHandler+0xf2>
    switch_status |= ((!!(SW_K8_GPIO_Port->IDR&(SW_K8_Pin))) << 7);
 8003724:	23a0      	movs	r3, #160	; 0xa0
 8003726:	05db      	lsls	r3, r3, #23
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	05db      	lsls	r3, r3, #23
 800372c:	0fdb      	lsrs	r3, r3, #31
 800372e:	01db      	lsls	r3, r3, #7
 8003730:	491d      	ldr	r1, [pc, #116]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003732:	780a      	ldrb	r2, [r1, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 7));
  }  

  if ((SW_K6_GPIO_Port->IDR&(SW_K6_Pin))>0) {
 8003738:	23a0      	movs	r3, #160	; 0xa0
 800373a:	05db      	lsls	r3, r3, #23
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	d52b      	bpl.n	800379a <EXTI4_15_IRQHandler+0xfe>
    switch_status |= ((!!(SW_K6_GPIO_Port->IDR&(SW_K6_Pin))) << 5);
 8003742:	23a0      	movs	r3, #160	; 0xa0
 8003744:	05db      	lsls	r3, r3, #23
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	0fdb      	lsrs	r3, r3, #31
 800374c:	015b      	lsls	r3, r3, #5
 800374e:	4916      	ldr	r1, [pc, #88]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003750:	780a      	ldrb	r2, [r1, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	700b      	strb	r3, [r1, #0]
  }
  else {
    switch_status &= (~(1 << 5));
  }  

  if (is_irq_enable)
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <EXTI4_15_IRQHandler+0x110>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <EXTI4_15_IRQHandler+0xcc>
    GPIOA->BRR = GPIO_PIN_13;
 800375e:	23a0      	movs	r3, #160	; 0xa0
 8003760:	05db      	lsls	r3, r3, #23
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	0192      	lsls	r2, r2, #6
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003768:	bd10      	pop	{r4, pc}
    switch_status &= (~(1 << 2));
 800376a:	4a0f      	ldr	r2, [pc, #60]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 800376c:	7813      	ldrb	r3, [r2, #0]
 800376e:	2104      	movs	r1, #4
 8003770:	438b      	bics	r3, r1
 8003772:	7013      	strb	r3, [r2, #0]
 8003774:	e7b3      	b.n	80036de <EXTI4_15_IRQHandler+0x42>
    switch_status &= (~(1 << 3));
 8003776:	4a0c      	ldr	r2, [pc, #48]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003778:	7813      	ldrb	r3, [r2, #0]
 800377a:	2108      	movs	r1, #8
 800377c:	438b      	bics	r3, r1
 800377e:	7013      	strb	r3, [r2, #0]
 8003780:	e7bc      	b.n	80036fc <EXTI4_15_IRQHandler+0x60>
    switch_status &= (~(1 << 4));
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003784:	7813      	ldrb	r3, [r2, #0]
 8003786:	2110      	movs	r1, #16
 8003788:	438b      	bics	r3, r1
 800378a:	7013      	strb	r3, [r2, #0]
 800378c:	e7c5      	b.n	800371a <EXTI4_15_IRQHandler+0x7e>
    switch_status &= (~(1 << 7));
 800378e:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 8003790:	7813      	ldrb	r3, [r2, #0]
 8003792:	217f      	movs	r1, #127	; 0x7f
 8003794:	400b      	ands	r3, r1
 8003796:	7013      	strb	r3, [r2, #0]
 8003798:	e7ce      	b.n	8003738 <EXTI4_15_IRQHandler+0x9c>
    switch_status &= (~(1 << 5));
 800379a:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <EXTI4_15_IRQHandler+0x10c>)
 800379c:	7813      	ldrb	r3, [r2, #0]
 800379e:	2120      	movs	r1, #32
 80037a0:	438b      	bics	r3, r1
 80037a2:	7013      	strb	r3, [r2, #0]
 80037a4:	e7d7      	b.n	8003756 <EXTI4_15_IRQHandler+0xba>
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	20000769 	.word	0x20000769
 80037ac:	20000761 	.word	0x20000761

080037b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80037b2:	4802      	ldr	r0, [pc, #8]	; (80037bc <DMA1_Channel1_IRQHandler+0xc>)
 80037b4:	f000 fcf2 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	200007b0 	.word	0x200007b0

080037c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c0:	b510      	push	{r4, lr}
 80037c2:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c4:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <_sbrk+0x38>)
 80037c6:	490d      	ldr	r1, [pc, #52]	; (80037fc <_sbrk+0x3c>)
 80037c8:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ca:	490d      	ldr	r1, [pc, #52]	; (8003800 <_sbrk+0x40>)
 80037cc:	6809      	ldr	r1, [r1, #0]
 80037ce:	2900      	cmp	r1, #0
 80037d0:	d007      	beq.n	80037e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d2:	490b      	ldr	r1, [pc, #44]	; (8003800 <_sbrk+0x40>)
 80037d4:	6808      	ldr	r0, [r1, #0]
 80037d6:	18c3      	adds	r3, r0, r3
 80037d8:	4293      	cmp	r3, r2
 80037da:	d806      	bhi.n	80037ea <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80037dc:	4a08      	ldr	r2, [pc, #32]	; (8003800 <_sbrk+0x40>)
 80037de:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80037e0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80037e2:	4907      	ldr	r1, [pc, #28]	; (8003800 <_sbrk+0x40>)
 80037e4:	4807      	ldr	r0, [pc, #28]	; (8003804 <_sbrk+0x44>)
 80037e6:	6008      	str	r0, [r1, #0]
 80037e8:	e7f3      	b.n	80037d2 <_sbrk+0x12>
    errno = ENOMEM;
 80037ea:	f001 fddd 	bl	80053a8 <__errno>
 80037ee:	230c      	movs	r3, #12
 80037f0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80037f2:	2001      	movs	r0, #1
 80037f4:	4240      	negs	r0, r0
 80037f6:	e7f3      	b.n	80037e0 <_sbrk+0x20>
 80037f8:	20002000 	.word	0x20002000
 80037fc:	00000400 	.word	0x00000400
 8003800:	200007ac 	.word	0x200007ac
 8003804:	20000a88 	.word	0x20000a88

08003808 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003808:	4770      	bx	lr
	...

0800380c <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim3);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800380c:	b510      	push	{r4, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	0004      	movs	r4, r0

  if(tim_pwmHandle->Instance==TIM3)
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_TIM_PWM_MspInit+0x64>)
 8003814:	6802      	ldr	r2, [r0, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_TIM_PWM_MspInit+0x12>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800381a:	b002      	add	sp, #8
 800381c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800381e:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_TIM_PWM_MspInit+0x68>)
 8003820:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003822:	2302      	movs	r3, #2
 8003824:	4319      	orrs	r1, r3
 8003826:	63d1      	str	r1, [r2, #60]	; 0x3c
 8003828:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800382a:	4013      	ands	r3, r2
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	9b01      	ldr	r3, [sp, #4]
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8003830:	4811      	ldr	r0, [pc, #68]	; (8003878 <HAL_TIM_PWM_MspInit+0x6c>)
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_TIM_PWM_MspInit+0x70>)
 8003834:	6003      	str	r3, [r0, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003836:	2321      	movs	r3, #33	; 0x21
 8003838:	6043      	str	r3, [r0, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800383a:	3b11      	subs	r3, #17
 800383c:	6083      	str	r3, [r0, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	60c3      	str	r3, [r0, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	6102      	str	r2, [r0, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003846:	3280      	adds	r2, #128	; 0x80
 8003848:	6142      	str	r2, [r0, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	00d2      	lsls	r2, r2, #3
 800384e:	6182      	str	r2, [r0, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003850:	61c3      	str	r3, [r0, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	015b      	lsls	r3, r3, #5
 8003856:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003858:	f000 fb5e 	bl	8003f18 <HAL_DMA_Init>
 800385c:	2800      	cmp	r0, #0
 800385e:	d103      	bne.n	8003868 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_TIM_PWM_MspInit+0x6c>)
 8003862:	62a3      	str	r3, [r4, #40]	; 0x28
 8003864:	629c      	str	r4, [r3, #40]	; 0x28
}
 8003866:	e7d8      	b.n	800381a <HAL_TIM_PWM_MspInit+0xe>
      Error_Handler();
 8003868:	f7ff fd04 	bl	8003274 <Error_Handler>
 800386c:	e7f8      	b.n	8003860 <HAL_TIM_PWM_MspInit+0x54>
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	40000400 	.word	0x40000400
 8003874:	40021000 	.word	0x40021000
 8003878:	200007b0 	.word	0x200007b0
 800387c:	40020008 	.word	0x40020008

08003880 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003880:	b510      	push	{r4, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003886:	2214      	movs	r2, #20
 8003888:	2100      	movs	r1, #0
 800388a:	a801      	add	r0, sp, #4
 800388c:	f001 fdd3 	bl	8005436 <memset>
  if(timHandle->Instance==TIM3)
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_TIM_MspPostInit+0x44>)
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003898:	b006      	add	sp, #24
 800389a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	4a0a      	ldr	r2, [pc, #40]	; (80038c8 <HAL_TIM_MspPostInit+0x48>)
 800389e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80038a0:	2302      	movs	r3, #2
 80038a2:	4319      	orrs	r1, r3
 80038a4:	6351      	str	r1, [r2, #52]	; 0x34
 80038a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038a8:	401a      	ands	r2, r3
 80038aa:	9200      	str	r2, [sp, #0]
 80038ac:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = RGB_Pin;
 80038ae:	2220      	movs	r2, #32
 80038b0:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80038b4:	3b01      	subs	r3, #1
 80038b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);
 80038b8:	a901      	add	r1, sp, #4
 80038ba:	4804      	ldr	r0, [pc, #16]	; (80038cc <HAL_TIM_MspPostInit+0x4c>)
 80038bc:	f000 fdc8 	bl	8004450 <HAL_GPIO_Init>
}
 80038c0:	e7ea      	b.n	8003898 <HAL_TIM_MspPostInit+0x18>
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	40000400 	.word	0x40000400
 80038c8:	40021000 	.word	0x40021000
 80038cc:	50000400 	.word	0x50000400

080038d0 <MX_TIM3_Init>:
{
 80038d0:	b500      	push	{lr}
 80038d2:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	220c      	movs	r2, #12
 80038d6:	2100      	movs	r1, #0
 80038d8:	a807      	add	r0, sp, #28
 80038da:	f001 fdac 	bl	8005436 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038de:	221c      	movs	r2, #28
 80038e0:	2100      	movs	r1, #0
 80038e2:	4668      	mov	r0, sp
 80038e4:	f001 fda7 	bl	8005436 <memset>
  htim3.Instance = TIM3;
 80038e8:	4818      	ldr	r0, [pc, #96]	; (800394c <MX_TIM3_Init+0x7c>)
 80038ea:	4b19      	ldr	r3, [pc, #100]	; (8003950 <MX_TIM3_Init+0x80>)
 80038ec:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 80-1;
 80038f4:	224f      	movs	r2, #79	; 0x4f
 80038f6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038fc:	f001 f8de 	bl	8004abc <HAL_TIM_PWM_Init>
 8003900:	2800      	cmp	r0, #0
 8003902:	d11a      	bne.n	800393a <MX_TIM3_Init+0x6a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003904:	2300      	movs	r3, #0
 8003906:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003908:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800390a:	a907      	add	r1, sp, #28
 800390c:	480f      	ldr	r0, [pc, #60]	; (800394c <MX_TIM3_Init+0x7c>)
 800390e:	f001 fc2f 	bl	8005170 <HAL_TIMEx_MasterConfigSynchronization>
 8003912:	2800      	cmp	r0, #0
 8003914:	d114      	bne.n	8003940 <MX_TIM3_Init+0x70>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003916:	2360      	movs	r3, #96	; 0x60
 8003918:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800391e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003920:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003922:	2204      	movs	r2, #4
 8003924:	4669      	mov	r1, sp
 8003926:	4809      	ldr	r0, [pc, #36]	; (800394c <MX_TIM3_Init+0x7c>)
 8003928:	f001 f934 	bl	8004b94 <HAL_TIM_PWM_ConfigChannel>
 800392c:	2800      	cmp	r0, #0
 800392e:	d10a      	bne.n	8003946 <MX_TIM3_Init+0x76>
  HAL_TIM_MspPostInit(&htim3);
 8003930:	4806      	ldr	r0, [pc, #24]	; (800394c <MX_TIM3_Init+0x7c>)
 8003932:	f7ff ffa5 	bl	8003880 <HAL_TIM_MspPostInit>
}
 8003936:	b00b      	add	sp, #44	; 0x2c
 8003938:	bd00      	pop	{pc}
    Error_Handler();
 800393a:	f7ff fc9b 	bl	8003274 <Error_Handler>
 800393e:	e7e1      	b.n	8003904 <MX_TIM3_Init+0x34>
    Error_Handler();
 8003940:	f7ff fc98 	bl	8003274 <Error_Handler>
 8003944:	e7e7      	b.n	8003916 <MX_TIM3_Init+0x46>
    Error_Handler();
 8003946:	f7ff fc95 	bl	8003274 <Error_Handler>
 800394a:	e7f1      	b.n	8003930 <MX_TIM3_Init+0x60>
 800394c:	2000080c 	.word	0x2000080c
 8003950:	40000400 	.word	0x40000400

08003954 <HAL_TIM_PWM_MspDeInit>:

void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003954:	b510      	push	{r4, lr}

  if(tim_pwmHandle->Instance==TIM3)
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_TIM_PWM_MspDeInit+0x20>)
 8003958:	6802      	ldr	r2, [r0, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d000      	beq.n	8003960 <HAL_TIM_PWM_MspDeInit+0xc>
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_CC2]);
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
}
 800395e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_DISABLE();
 8003960:	4a05      	ldr	r2, [pc, #20]	; (8003978 <HAL_TIM_PWM_MspDeInit+0x24>)
 8003962:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003964:	2102      	movs	r1, #2
 8003966:	438b      	bics	r3, r1
 8003968:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_CC2]);
 800396a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800396c:	f000 fb38 	bl	8003fe0 <HAL_DMA_DeInit>
}
 8003970:	e7f5      	b.n	800395e <HAL_TIM_PWM_MspDeInit+0xa>
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	40000400 	.word	0x40000400
 8003978:	40021000 	.word	0x40021000

0800397c <createBuffer>:
	.head[1] = 0,
	.head[2] = 0,
	.tail = 0,
};

FIFOBuffer* createBuffer() {
 800397c:	b510      	push	{r4, lr}
    FIFOBuffer* buffer = (FIFOBuffer*)malloc(sizeof(FIFOBuffer));
 800397e:	2008      	movs	r0, #8
 8003980:	f001 fd3c 	bl	80053fc <malloc>
    buffer->front = buffer->rear = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	6043      	str	r3, [r0, #4]
 8003988:	6003      	str	r3, [r0, #0]
    return buffer;
}
 800398a:	bd10      	pop	{r4, pc}

0800398c <enqueue>:

void enqueue(FIFOBuffer* buffer, uint32_t newData[PIXEL_MAX]) {
 800398c:	b570      	push	{r4, r5, r6, lr}
 800398e:	0005      	movs	r5, r0
 8003990:	000e      	movs	r6, r1
    Node* newNode = (Node*)malloc(sizeof(Node));
 8003992:	2028      	movs	r0, #40	; 0x28
 8003994:	f001 fd32 	bl	80053fc <malloc>
 8003998:	0004      	movs	r4, r0
    memcpy(newNode->data, newData, PIXEL_MAX * sizeof(uint32_t));
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	0031      	movs	r1, r6
 800399e:	f001 fd41 	bl	8005424 <memcpy>
    newNode->next = NULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	6263      	str	r3, [r4, #36]	; 0x24
    
    if (buffer->rear == NULL) {
 80039a6:	686b      	ldr	r3, [r5, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <enqueue+0x26>
        buffer->front = buffer->rear = newNode;
        return;
    }
    
    buffer->rear->next = newNode;
 80039ac:	625c      	str	r4, [r3, #36]	; 0x24
    buffer->rear = newNode;
 80039ae:	606c      	str	r4, [r5, #4]
}
 80039b0:	bd70      	pop	{r4, r5, r6, pc}
        buffer->front = buffer->rear = newNode;
 80039b2:	606c      	str	r4, [r5, #4]
 80039b4:	602c      	str	r4, [r5, #0]
        return;
 80039b6:	e7fb      	b.n	80039b0 <enqueue+0x24>

080039b8 <dequeue>:

int8_t dequeue(FIFOBuffer* buffer, uint32_t result[PIXEL_MAX]) {
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	0004      	movs	r4, r0
 80039bc:	0008      	movs	r0, r1
    if (buffer->front == NULL) {
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	d00f      	beq.n	80039e4 <dequeue+0x2c>
        return 0;
    }

    Node* temp = buffer->front;
    memcpy(result, temp->data, PIXEL_MAX * sizeof(uint32_t));
 80039c4:	2224      	movs	r2, #36	; 0x24
 80039c6:	0029      	movs	r1, r5
 80039c8:	f001 fd2c 	bl	8005424 <memcpy>
    buffer->front = buffer->front->next;
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	6023      	str	r3, [r4, #0]

    if (buffer->front == NULL) {
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <dequeue+0x28>
        buffer->rear = NULL;
    }

    free(temp);
 80039d6:	0028      	movs	r0, r5
 80039d8:	f001 fd1a 	bl	8005410 <free>

    return 1;
 80039dc:	2001      	movs	r0, #1
}
 80039de:	bd70      	pop	{r4, r5, r6, pc}
        buffer->rear = NULL;
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	e7f8      	b.n	80039d6 <dequeue+0x1e>
        return 0;
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7fa      	b.n	80039de <dequeue+0x26>

080039e8 <getQueueRear>:
    if (buffer->rear != NULL) {
        return buffer->rear->data;
    } else {
        return NULL; // 如果队列为空，返回 NULL
    }
}
 80039e8:	6840      	ldr	r0, [r0, #4]
 80039ea:	4770      	bx	lr

080039ec <createBuffer_rgb233>:

FIFOBuffer_RGB233* createBuffer_rgb233() {
 80039ec:	b510      	push	{r4, lr}
    FIFOBuffer_RGB233* buffer = (FIFOBuffer_RGB233*)malloc(sizeof(FIFOBuffer_RGB233));
 80039ee:	2008      	movs	r0, #8
 80039f0:	f001 fd04 	bl	80053fc <malloc>
    buffer->front = buffer->rear = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	6043      	str	r3, [r0, #4]
 80039f8:	6003      	str	r3, [r0, #0]
    return buffer;
}
 80039fa:	bd10      	pop	{r4, pc}

080039fc <enqueue_rgb233>:

void enqueue_rgb233(FIFOBuffer_RGB233* buffer, uint8_t newData[PIXEL_MAX]) {
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	0005      	movs	r5, r0
 8003a00:	000e      	movs	r6, r1
    Node_RGB233* newNode = (Node_RGB233*)malloc(sizeof(Node_RGB233));
 8003a02:	2010      	movs	r0, #16
 8003a04:	f001 fcfa 	bl	80053fc <malloc>
 8003a08:	0004      	movs	r4, r0
    memcpy(newNode->data, newData, PIXEL_MAX * sizeof(uint8_t));
 8003a0a:	2209      	movs	r2, #9
 8003a0c:	0031      	movs	r1, r6
 8003a0e:	f001 fd09 	bl	8005424 <memcpy>
    newNode->next = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60e3      	str	r3, [r4, #12]
    
    if (buffer->rear == NULL) {
 8003a16:	686b      	ldr	r3, [r5, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <enqueue_rgb233+0x26>
        buffer->front = buffer->rear = newNode;
        return;
    }
    
    buffer->rear->next = newNode;
 8003a1c:	60dc      	str	r4, [r3, #12]
    buffer->rear = newNode;
 8003a1e:	606c      	str	r4, [r5, #4]
}
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
        buffer->front = buffer->rear = newNode;
 8003a22:	606c      	str	r4, [r5, #4]
 8003a24:	602c      	str	r4, [r5, #0]
        return;
 8003a26:	e7fb      	b.n	8003a20 <enqueue_rgb233+0x24>

08003a28 <dequeue_rgb233>:

int8_t dequeue_rgb233(FIFOBuffer_RGB233* buffer, uint8_t result[PIXEL_MAX]) {
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	0004      	movs	r4, r0
 8003a2c:	0008      	movs	r0, r1
    if (buffer->front == NULL) {
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	d00f      	beq.n	8003a54 <dequeue_rgb233+0x2c>
        return 0;
    }

    Node_RGB233* temp = buffer->front;
    memcpy(result, temp->data, PIXEL_MAX * sizeof(uint8_t));
 8003a34:	2209      	movs	r2, #9
 8003a36:	0029      	movs	r1, r5
 8003a38:	f001 fcf4 	bl	8005424 <memcpy>
    buffer->front = buffer->front->next;
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	6023      	str	r3, [r4, #0]

    if (buffer->front == NULL) {
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <dequeue_rgb233+0x28>
        buffer->rear = NULL;
    }

    free(temp);
 8003a46:	0028      	movs	r0, r5
 8003a48:	f001 fce2 	bl	8005410 <free>

    return 1;
 8003a4c:	2001      	movs	r0, #1
}
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
        buffer->rear = NULL;
 8003a50:	6063      	str	r3, [r4, #4]
 8003a52:	e7f8      	b.n	8003a46 <dequeue_rgb233+0x1e>
        return 0;
 8003a54:	2000      	movs	r0, #0
 8003a56:	e7fa      	b.n	8003a4e <dequeue_rgb233+0x26>

08003a58 <getQueueRear_rgb233>:
    if (buffer->rear != NULL) {
        return buffer->rear->data;
    } else {
        return NULL; // 如果队列为空，返回 NULL
    }
}
 8003a58:	6840      	ldr	r0, [r0, #4]
 8003a5a:	4770      	bx	lr

08003a5c <sk6812_init>:

void sk6812_init(uint8_t num) {
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	0004      	movs	r4, r0
  color_buf = (uint32_t *)calloc(num, sizeof(uint32_t));
 8003a60:	2104      	movs	r1, #4
 8003a62:	f001 fc97 	bl	8005394 <calloc>
 8003a66:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <sk6812_init+0x48>)
 8003a68:	6018      	str	r0, [r3, #0]
  lastest_rgb_color = (uint32_t *)calloc(num, sizeof(uint32_t));
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f001 fc91 	bl	8005394 <calloc>
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <sk6812_init+0x4c>)
 8003a74:	6018      	str	r0, [r3, #0]
  lastest_rgb_233_color = (uint8_t *)calloc(num, sizeof(uint8_t));
 8003a76:	2101      	movs	r1, #1
 8003a78:	0020      	movs	r0, r4
 8003a7a:	f001 fc8b 	bl	8005394 <calloc>
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <sk6812_init+0x50>)
 8003a80:	6018      	str	r0, [r3, #0]
  rgb_buffer = createBuffer();
 8003a82:	f7ff ff7b 	bl	800397c <createBuffer>
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <sk6812_init+0x54>)
 8003a88:	6018      	str	r0, [r3, #0]
  rgb_233_buffer = createBuffer_rgb233();
 8003a8a:	f7ff ffaf 	bl	80039ec <createBuffer_rgb233>
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <sk6812_init+0x58>)
 8003a90:	6018      	str	r0, [r3, #0]
  for (int i = 0; i < PIXEL_MAX; i++) {
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <sk6812_init+0x5c>)
 8003a94:	0019      	movs	r1, r3
 8003a96:	3109      	adds	r1, #9
    brightness_index[i] = 255;
 8003a98:	22ff      	movs	r2, #255	; 0xff
 8003a9a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < PIXEL_MAX; i++) {
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	428b      	cmp	r3, r1
 8003aa0:	d1fb      	bne.n	8003a9a <sk6812_init+0x3e>
  }
}
 8003aa2:	bd10      	pop	{r4, pc}
 8003aa4:	20000870 	.word	0x20000870
 8003aa8:	20000a3c 	.word	0x20000a3c
 8003aac:	20000a38 	.word	0x20000a38
 8003ab0:	20000a44 	.word	0x20000a44
 8003ab4:	20000a40 	.word	0x20000a40
 8003ab8:	20000864 	.word	0x20000864

08003abc <neopixel_set_color>:

void neopixel_set_color(uint8_t num, uint32_t color) {
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	46ce      	mov	lr, r9
 8003ac0:	4647      	mov	r7, r8
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	0004      	movs	r4, r0
 8003ac6:	000d      	movs	r5, r1
  uint16_t r, g, b;
  if (num >= PIXEL_MAX)
 8003ac8:	2808      	cmp	r0, #8
 8003aca:	d848      	bhi.n	8003b5e <neopixel_set_color+0xa2>
    return;
  
  if (brightness_index[num] < 10 && brightness_index[num])
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <neopixel_set_color+0xac>)
 8003ace:	5c1b      	ldrb	r3, [r3, r0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d802      	bhi.n	8003adc <neopixel_set_color+0x20>
    brightness_index[num] = 10;
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <neopixel_set_color+0xac>)
 8003ad8:	220a      	movs	r2, #10
 8003ada:	541a      	strb	r2, [r3, r0]

  r = ((color >> 16) & 0xff) * ((float)brightness_index[num] / 255.0f);
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <neopixel_set_color+0xac>)
 8003ade:	5d18      	ldrb	r0, [r3, r4]
 8003ae0:	f7fe fbc2 	bl	8002268 <__aeabi_ui2f>
 8003ae4:	4921      	ldr	r1, [pc, #132]	; (8003b6c <neopixel_set_color+0xb0>)
 8003ae6:	f7fd ffb3 	bl	8001a50 <__aeabi_fdiv>
 8003aea:	1c06      	adds	r6, r0, #0
 8003aec:	0c28      	lsrs	r0, r5, #16
 8003aee:	27ff      	movs	r7, #255	; 0xff
 8003af0:	4038      	ands	r0, r7
 8003af2:	f7fe fbb9 	bl	8002268 <__aeabi_ui2f>
 8003af6:	1c31      	adds	r1, r6, #0
 8003af8:	f7fe f8c2 	bl	8001c80 <__aeabi_fmul>
 8003afc:	f7fd ff90 	bl	8001a20 <__aeabi_f2uiz>
 8003b00:	b283      	uxth	r3, r0
 8003b02:	4699      	mov	r9, r3
  g = ((color >> 8) & 0xff) * ((float)brightness_index[num] / 255.0f);
 8003b04:	0a28      	lsrs	r0, r5, #8
 8003b06:	4038      	ands	r0, r7
 8003b08:	f7fe fbae 	bl	8002268 <__aeabi_ui2f>
 8003b0c:	1c31      	adds	r1, r6, #0
 8003b0e:	f7fe f8b7 	bl	8001c80 <__aeabi_fmul>
 8003b12:	f7fd ff85 	bl	8001a20 <__aeabi_f2uiz>
 8003b16:	b283      	uxth	r3, r0
 8003b18:	4698      	mov	r8, r3
  b = (color & 0xff) * ((float)brightness_index[num] / 255.0f);
 8003b1a:	0038      	movs	r0, r7
 8003b1c:	4028      	ands	r0, r5
 8003b1e:	f7fe fba3 	bl	8002268 <__aeabi_ui2f>
 8003b22:	1c31      	adds	r1, r6, #0
 8003b24:	f7fe f8ac 	bl	8001c80 <__aeabi_fmul>
 8003b28:	f7fd ff7a 	bl	8001a20 <__aeabi_f2uiz>
 8003b2c:	b280      	uxth	r0, r0

  if (r > 255) r = 255;
  if (g > 255) g = 255;
  if (b > 255) b = 255;
	rled[num] = r;
 8003b2e:	464a      	mov	r2, r9
 8003b30:	464b      	mov	r3, r9
 8003b32:	2bff      	cmp	r3, #255	; 0xff
 8003b34:	d900      	bls.n	8003b38 <neopixel_set_color+0x7c>
 8003b36:	22ff      	movs	r2, #255	; 0xff
 8003b38:	490d      	ldr	r1, [pc, #52]	; (8003b70 <neopixel_set_color+0xb4>)
 8003b3a:	550a      	strb	r2, [r1, r4]
	gled[num] = g;
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	4643      	mov	r3, r8
 8003b40:	2bff      	cmp	r3, #255	; 0xff
 8003b42:	d900      	bls.n	8003b46 <neopixel_set_color+0x8a>
 8003b44:	22ff      	movs	r2, #255	; 0xff
 8003b46:	490b      	ldr	r1, [pc, #44]	; (8003b74 <neopixel_set_color+0xb8>)
 8003b48:	550a      	strb	r2, [r1, r4]
	bled[num] = b;
 8003b4a:	1c02      	adds	r2, r0, #0
 8003b4c:	28ff      	cmp	r0, #255	; 0xff
 8003b4e:	d900      	bls.n	8003b52 <neopixel_set_color+0x96>
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <neopixel_set_color+0xbc>)
 8003b54:	551a      	strb	r2, [r3, r4]
	color_buf[num] = color;
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <neopixel_set_color+0xc0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	00a4      	lsls	r4, r4, #2
 8003b5c:	50e5      	str	r5, [r4, r3]
}
 8003b5e:	bcc0      	pop	{r6, r7}
 8003b60:	46b9      	mov	r9, r7
 8003b62:	46b0      	mov	r8, r6
 8003b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	20000864 	.word	0x20000864
 8003b6c:	437f0000 	.word	0x437f0000
 8003b70:	20000a4c 	.word	0x20000a4c
 8003b74:	20000a2c 	.word	0x20000a2c
 8003b78:	20000858 	.word	0x20000858
 8003b7c:	20000870 	.word	0x20000870

08003b80 <rgb233_to_rgb888>:

uint32_t rgb233_to_rgb888(uint8_t num, uint8_t color)
{
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t rgb_888 = 0;
  uint8_t r_led, g_led, b_led;

  if (num >= PIXEL_MAX)
 8003b82:	2808      	cmp	r0, #8
 8003b84:	d81f      	bhi.n	8003bc6 <rgb233_to_rgb888+0x46>
    return 0xFFFFFF;  

  r_led = ((color & 0xC0) >> 6);
 8003b86:	098b      	lsrs	r3, r1, #6
 8003b88:	469c      	mov	ip, r3
  g_led = ((color & 0x38) >> 3);
 8003b8a:	10ce      	asrs	r6, r1, #3
 8003b8c:	2507      	movs	r5, #7
 8003b8e:	402e      	ands	r6, r5
  b_led = (color & 0x07);
 8003b90:	4029      	ands	r1, r5

  b_led = ((b_led << 5) | ((b_led & 0x03) << 3) | b_led);
 8003b92:	00cf      	lsls	r7, r1, #3
 8003b94:	2318      	movs	r3, #24
 8003b96:	401f      	ands	r7, r3
 8003b98:	014c      	lsls	r4, r1, #5
 8003b9a:	4321      	orrs	r1, r4
  g_led = ((g_led << 5) | ((g_led & 0x03) << 3) | g_led);
 8003b9c:	00f4      	lsls	r4, r6, #3
 8003b9e:	4023      	ands	r3, r4
 8003ba0:	0174      	lsls	r4, r6, #5
 8003ba2:	4334      	orrs	r4, r6
  r_led |= (r_led << 2);
 8003ba4:	4662      	mov	r2, ip
 8003ba6:	0092      	lsls	r2, r2, #2
 8003ba8:	4665      	mov	r5, ip
 8003baa:	4315      	orrs	r5, r2
  r_led |= (r_led << 4);
 8003bac:	012a      	lsls	r2, r5, #4

  rgb_888 = ((r_led << 16) | (g_led << 8) | b_led);
 8003bae:	431c      	orrs	r4, r3
 8003bb0:	0224      	lsls	r4, r4, #8
 8003bb2:	4339      	orrs	r1, r7
 8003bb4:	430c      	orrs	r4, r1
 8003bb6:	432a      	orrs	r2, r5
 8003bb8:	0412      	lsls	r2, r2, #16
 8003bba:	4314      	orrs	r4, r2

  neopixel_set_color(num, rgb_888);
 8003bbc:	0021      	movs	r1, r4
 8003bbe:	f7ff ff7d 	bl	8003abc <neopixel_set_color>
  return rgb_888;
}
 8003bc2:	0020      	movs	r0, r4
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0xFFFFFF;  
 8003bc6:	4c01      	ldr	r4, [pc, #4]	; (8003bcc <rgb233_to_rgb888+0x4c>)
 8003bc8:	e7fb      	b.n	8003bc2 <rgb233_to_rgb888+0x42>
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	00ffffff 	.word	0x00ffffff

08003bd0 <ws2812_show>:

  return rgb_233;
}

void ws2812_show(void)
{
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	46de      	mov	lr, fp
 8003bd4:	4657      	mov	r7, sl
 8003bd6:	464e      	mov	r6, r9
 8003bd8:	4645      	mov	r5, r8
 8003bda:	b5e0      	push	{r5, r6, r7, lr}
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003bdc:	4c28      	ldr	r4, [pc, #160]	; (8003c80 <ws2812_show+0xb0>)
 8003bde:	2104      	movs	r1, #4
 8003be0:	0020      	movs	r0, r4
 8003be2:	f001 f887 	bl	8004cf4 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8003be6:	2104      	movs	r1, #4
 8003be8:	0020      	movs	r0, r4
 8003bea:	f001 fa2b 	bl	8005044 <HAL_TIM_PWM_Stop_DMA>
	uint8_t i, j;

	for(i = 0; i < PIXEL_MAX; i++) {
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <ws2812_show+0xb4>)
 8003bf0:	4699      	mov	r9, r3
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	4698      	mov	r8, r3
		for(j = 0; j < 8; j++) {														// G->R->B
			 frame.data[24 * i + j] = (gled[i] & (0x80 >> j)) ? BIT_1 : BIT_0; 			// 将高低位扩展到16bit
 8003bf6:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <ws2812_show+0xb8>)
 8003bf8:	469a      	mov	sl, r3
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	469c      	mov	ip, r3
 8003bfe:	2427      	movs	r4, #39	; 0x27
 8003c00:	46c3      	mov	fp, r8
 8003c02:	e007      	b.n	8003c14 <ws2812_show+0x44>
	for(i = 0; i < PIXEL_MAX; i++) {
 8003c04:	465b      	mov	r3, fp
 8003c06:	3301      	adds	r3, #1
 8003c08:	469b      	mov	fp, r3
 8003c0a:	2230      	movs	r2, #48	; 0x30
 8003c0c:	4690      	mov	r8, r2
 8003c0e:	44c1      	add	r9, r8
 8003c10:	2b09      	cmp	r3, #9
 8003c12:	d028      	beq.n	8003c66 <ws2812_show+0x96>
			 frame.data[24 * i + j] = (gled[i] & (0x80 >> j)) ? BIT_1 : BIT_0; 			// 将高低位扩展到16bit
 8003c14:	4652      	mov	r2, sl
 8003c16:	465b      	mov	r3, fp
 8003c18:	5c9e      	ldrb	r6, [r3, r2]
			 frame.data[24 * i + j + 8]   = (rled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;	
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	; (8003c8c <ws2812_show+0xbc>)
 8003c1c:	5c9d      	ldrb	r5, [r3, r2]
			 frame.data[24 * i + j + 16]  = (bled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <ws2812_show+0xc0>)
 8003c20:	5c98      	ldrb	r0, [r3, r2]
 8003c22:	464a      	mov	r2, r9
 8003c24:	2100      	movs	r1, #0
 8003c26:	4680      	mov	r8, r0
			 frame.data[24 * i + j] = (gled[i] & (0x80 >> j)) ? BIT_1 : BIT_0; 			// 将高低位扩展到16bit
 8003c28:	4663      	mov	r3, ip
 8003c2a:	410b      	asrs	r3, r1
 8003c2c:	001f      	movs	r7, r3
 8003c2e:	4037      	ands	r7, r6
 8003c30:	1e78      	subs	r0, r7, #1
 8003c32:	4187      	sbcs	r7, r0
 8003c34:	427f      	negs	r7, r7
 8003c36:	4027      	ands	r7, r4
 8003c38:	3714      	adds	r7, #20
 8003c3a:	8017      	strh	r7, [r2, #0]
			 frame.data[24 * i + j + 8]   = (rled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;	
 8003c3c:	002f      	movs	r7, r5
 8003c3e:	401f      	ands	r7, r3
 8003c40:	1e78      	subs	r0, r7, #1
 8003c42:	4187      	sbcs	r7, r0
 8003c44:	427f      	negs	r7, r7
 8003c46:	4027      	ands	r7, r4
 8003c48:	3714      	adds	r7, #20
 8003c4a:	8217      	strh	r7, [r2, #16]
			 frame.data[24 * i + j + 16]  = (bled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;
 8003c4c:	4640      	mov	r0, r8
 8003c4e:	4003      	ands	r3, r0
 8003c50:	1e5f      	subs	r7, r3, #1
 8003c52:	41bb      	sbcs	r3, r7
 8003c54:	425b      	negs	r3, r3
 8003c56:	4023      	ands	r3, r4
 8003c58:	3314      	adds	r3, #20
 8003c5a:	8413      	strh	r3, [r2, #32]
		for(j = 0; j < 8; j++) {														// G->R->B
 8003c5c:	3101      	adds	r1, #1
 8003c5e:	3202      	adds	r2, #2
 8003c60:	2908      	cmp	r1, #8
 8003c62:	d1e1      	bne.n	8003c28 <ws2812_show+0x58>
 8003c64:	e7ce      	b.n	8003c04 <ws2812_show+0x34>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)&frame, 3 + 24 * PIXEL_MAX + 1);
 8003c66:	23dc      	movs	r3, #220	; 0xdc
 8003c68:	4a0a      	ldr	r2, [pc, #40]	; (8003c94 <ws2812_show+0xc4>)
 8003c6a:	2104      	movs	r1, #4
 8003c6c:	4804      	ldr	r0, [pc, #16]	; (8003c80 <ws2812_show+0xb0>)
 8003c6e:	f001 f89b 	bl	8004da8 <HAL_TIM_PWM_Start_DMA>
}
 8003c72:	bcf0      	pop	{r4, r5, r6, r7}
 8003c74:	46bb      	mov	fp, r7
 8003c76:	46b2      	mov	sl, r6
 8003c78:	46a9      	mov	r9, r5
 8003c7a:	46a0      	mov	r8, r4
 8003c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	2000080c 	.word	0x2000080c
 8003c84:	2000087a 	.word	0x2000087a
 8003c88:	20000a2c 	.word	0x20000a2c
 8003c8c:	20000a4c 	.word	0x20000a4c
 8003c90:	20000858 	.word	0x20000858
 8003c94:	20000874 	.word	0x20000874

08003c98 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE BEGIN 2 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b510      	push	{r4, lr}
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	4803      	ldr	r0, [pc, #12]	; (8003cac <HAL_TIM_PWM_PulseFinishedCallback+0x14>)
 8003c9e:	f001 f829 	bl	8004cf4 <HAL_TIM_PWM_Stop>
  rgb_show_lock = 0;
 8003ca2:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	701a      	strb	r2, [r3, #0]
}
 8003ca8:	bd10      	pop	{r4, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	2000080c 	.word	0x2000080c
 8003cb0:	20000a48 	.word	0x20000a48

08003cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003cb4:	480d      	ldr	r0, [pc, #52]	; (8003cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003cb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003cb8:	f7ff fda6 	bl	8003808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cbc:	480c      	ldr	r0, [pc, #48]	; (8003cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cbe:	490d      	ldr	r1, [pc, #52]	; (8003cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <LoopForever+0xe>)
  movs r3, #0
 8003cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cc4:	e002      	b.n	8003ccc <LoopCopyDataInit>

08003cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cca:	3304      	adds	r3, #4

08003ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cd0:	d3f9      	bcc.n	8003cc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cd4:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <LoopForever+0x16>)
  movs r3, #0
 8003cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cd8:	e001      	b.n	8003cde <LoopFillZerobss>

08003cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cdc:	3204      	adds	r2, #4

08003cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ce0:	d3fb      	bcc.n	8003cda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003ce2:	f001 fb67 	bl	80053b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003ce6:	f7ff fb33 	bl	8003350 <main>

08003cea <LoopForever>:

LoopForever:
  b LoopForever
 8003cea:	e7fe      	b.n	8003cea <LoopForever>
  ldr   r0, =_estack
 8003cec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003cf0:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 8003cf4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8003cf8:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8003cfc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8003d00:	20000a88 	.word	0x20000a88

08003d04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <ADC1_IRQHandler>
	...

08003d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_InitTick+0x44>)
 8003d0e:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d10:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8003d12:	2900      	cmp	r1, #0
 8003d14:	d100      	bne.n	8003d18 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 8003d16:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d18:	20fa      	movs	r0, #250	; 0xfa
 8003d1a:	0080      	lsls	r0, r0, #2
 8003d1c:	f7fd fdf4 	bl	8001908 <__udivsi3>
 8003d20:	0001      	movs	r1, r0
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <HAL_InitTick+0x48>)
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	f7fd fdef 	bl	8001908 <__udivsi3>
 8003d2a:	f000 f89b 	bl	8003e64 <HAL_SYSTICK_Config>
 8003d2e:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8003d30:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ef      	bne.n	8003d16 <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d36:	2c03      	cmp	r4, #3
 8003d38:	d8ed      	bhi.n	8003d16 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	0021      	movs	r1, r4
 8003d3e:	4240      	negs	r0, r0
 8003d40:	f000 f842 	bl	8003dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_InitTick+0x4c>)
 8003d46:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7e4      	b.n	8003d16 <HAL_InitTick+0xe>
 8003d4c:	200000c8 	.word	0x200000c8
 8003d50:	200000c4 	.word	0x200000c4
 8003d54:	200000cc 	.word	0x200000cc

08003d58 <HAL_Init>:
{
 8003d58:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d5a:	4a08      	ldr	r2, [pc, #32]	; (8003d7c <HAL_Init+0x24>)
 8003d5c:	6811      	ldr	r1, [r2, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d66:	2003      	movs	r0, #3
 8003d68:	f7ff ffce 	bl	8003d08 <HAL_InitTick>
 8003d6c:	1e04      	subs	r4, r0, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8003d70:	2401      	movs	r4, #1
}
 8003d72:	0020      	movs	r0, r4
 8003d74:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8003d76:	f7ff fbf1 	bl	800355c <HAL_MspInit>
 8003d7a:	e7fa      	b.n	8003d72 <HAL_Init+0x1a>
 8003d7c:	40022000 	.word	0x40022000

08003d80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_IncTick+0x10>)
 8003d82:	6811      	ldr	r1, [r2, #0]
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_IncTick+0x14>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	185b      	adds	r3, r3, r1
 8003d8a:	6013      	str	r3, [r2, #0]
}
 8003d8c:	4770      	bx	lr
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	20000a58 	.word	0x20000a58
 8003d94:	200000c8 	.word	0x200000c8

08003d98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003d98:	4b01      	ldr	r3, [pc, #4]	; (8003da0 <HAL_GetTick+0x8>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
}
 8003d9c:	4770      	bx	lr
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	20000a58 	.word	0x20000a58

08003da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003da8:	f7ff fff6 	bl	8003d98 <HAL_GetTick>
 8003dac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dae:	1c63      	adds	r3, r4, #1
 8003db0:	d002      	beq.n	8003db8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <HAL_Delay+0x20>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003db8:	f7ff ffee 	bl	8003d98 <HAL_GetTick>
 8003dbc:	1b40      	subs	r0, r0, r5
 8003dbe:	42a0      	cmp	r0, r4
 8003dc0:	d3fa      	bcc.n	8003db8 <HAL_Delay+0x14>
  {
  }
}
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	200000c8 	.word	0x200000c8

08003dc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	db14      	blt.n	8003df8 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dce:	0884      	lsrs	r4, r0, #2
 8003dd0:	00a4      	lsls	r4, r4, #2
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <HAL_NVIC_SetPriority+0x5c>)
 8003dd4:	469c      	mov	ip, r3
 8003dd6:	4464      	add	r4, ip
 8003dd8:	26c0      	movs	r6, #192	; 0xc0
 8003dda:	00b6      	lsls	r6, r6, #2
 8003ddc:	59a5      	ldr	r5, [r4, r6]
 8003dde:	2203      	movs	r2, #3
 8003de0:	4010      	ands	r0, r2
 8003de2:	00c0      	lsls	r0, r0, #3
 8003de4:	23ff      	movs	r3, #255	; 0xff
 8003de6:	001a      	movs	r2, r3
 8003de8:	4082      	lsls	r2, r0
 8003dea:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dec:	0189      	lsls	r1, r1, #6
 8003dee:	400b      	ands	r3, r1
 8003df0:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df2:	432b      	orrs	r3, r5
 8003df4:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8003df6:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003df8:	230f      	movs	r3, #15
 8003dfa:	4003      	ands	r3, r0
 8003dfc:	3b08      	subs	r3, #8
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_NVIC_SetPriority+0x60>)
 8003e04:	4694      	mov	ip, r2
 8003e06:	4463      	add	r3, ip
 8003e08:	69dc      	ldr	r4, [r3, #28]
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	4010      	ands	r0, r2
 8003e0e:	00c0      	lsls	r0, r0, #3
 8003e10:	32fc      	adds	r2, #252	; 0xfc
 8003e12:	0015      	movs	r5, r2
 8003e14:	4085      	lsls	r5, r0
 8003e16:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e18:	0189      	lsls	r1, r1, #6
 8003e1a:	400a      	ands	r2, r1
 8003e1c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e1e:	4322      	orrs	r2, r4
 8003e20:	61da      	str	r2, [r3, #28]
 8003e22:	e7e8      	b.n	8003df6 <HAL_NVIC_SetPriority+0x2e>
 8003e24:	e000e100 	.word	0xe000e100
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	db05      	blt.n	8003e3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e30:	231f      	movs	r3, #31
 8003e32:	4018      	ands	r0, r3
 8003e34:	3b1e      	subs	r3, #30
 8003e36:	4083      	lsls	r3, r0
 8003e38:	4a01      	ldr	r2, [pc, #4]	; (8003e40 <HAL_NVIC_EnableIRQ+0x14>)
 8003e3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e3c:	4770      	bx	lr
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e44:	2800      	cmp	r0, #0
 8003e46:	db0a      	blt.n	8003e5e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e48:	231f      	movs	r3, #31
 8003e4a:	4018      	ands	r0, r3
 8003e4c:	3b1e      	subs	r3, #30
 8003e4e:	4083      	lsls	r3, r0
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_NVIC_DisableIRQ+0x1c>)
 8003e52:	2280      	movs	r2, #128	; 0x80
 8003e54:	508b      	str	r3, [r1, r2]
 8003e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e5a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003e5e:	4770      	bx	lr
 8003e60:	e000e100 	.word	0xe000e100

08003e64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e64:	3801      	subs	r0, #1
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	045b      	lsls	r3, r3, #17
 8003e6a:	4298      	cmp	r0, r3
 8003e6c:	d20f      	bcs.n	8003e8e <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_SYSTICK_Config+0x30>)
 8003e70:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e72:	4809      	ldr	r0, [pc, #36]	; (8003e98 <HAL_SYSTICK_Config+0x34>)
 8003e74:	6a03      	ldr	r3, [r0, #32]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	21c0      	movs	r1, #192	; 0xc0
 8003e7c:	0609      	lsls	r1, r1, #24
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e82:	2300      	movs	r3, #0
 8003e84:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e86:	3307      	adds	r3, #7
 8003e88:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e8a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003e8c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e8e:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8003e90:	e7fc      	b.n	8003e8c <HAL_SYSTICK_Config+0x28>
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	e000e010 	.word	0xe000e010
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e9e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003ea0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8003ea2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ea4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8003ea6:	2c00      	cmp	r4, #0
 8003ea8:	d002      	beq.n	8003eb0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eaa:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003eac:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003eae:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003eb0:	4e0b      	ldr	r6, [pc, #44]	; (8003ee0 <DMA_SetConfig+0x44>)
 8003eb2:	6877      	ldr	r7, [r6, #4]
 8003eb4:	251c      	movs	r5, #28
 8003eb6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003eb8:	4025      	ands	r5, r4
 8003eba:	2401      	movs	r4, #1
 8003ebc:	40ac      	lsls	r4, r5
 8003ebe:	433c      	orrs	r4, r7
 8003ec0:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec2:	6804      	ldr	r4, [r0, #0]
 8003ec4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ec6:	6883      	ldr	r3, [r0, #8]
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d004      	beq.n	8003ed6 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003ed0:	6803      	ldr	r3, [r0, #0]
 8003ed2:	60da      	str	r2, [r3, #12]
  }
}
 8003ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8003ed6:	6803      	ldr	r3, [r0, #0]
 8003ed8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	60d9      	str	r1, [r3, #12]
 8003ede:	e7f9      	b.n	8003ed4 <DMA_SetConfig+0x38>
 8003ee0:	40020000 	.word	0x40020000

08003ee4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ee8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8003eee:	4694      	mov	ip, r2
 8003ef0:	4463      	add	r3, ip
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ef6:	7800      	ldrb	r0, [r0, #0]
 8003ef8:	3808      	subs	r0, #8
 8003efa:	2114      	movs	r1, #20
 8003efc:	f7fd fd04 	bl	8001908 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8003f02:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f04:	231f      	movs	r3, #31
 8003f06:	4018      	ands	r0, r3
 8003f08:	3b1e      	subs	r3, #30
 8003f0a:	4083      	lsls	r3, r0
 8003f0c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8003f0e:	bd10      	pop	{r4, pc}
 8003f10:	10008200 	.word	0x10008200
 8003f14:	40020880 	.word	0x40020880

08003f18 <HAL_DMA_Init>:
{
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8003f1c:	d055      	beq.n	8003fca <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003f1e:	6805      	ldr	r5, [r0, #0]
 8003f20:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <HAL_DMA_Init+0xb8>)
 8003f22:	18e8      	adds	r0, r5, r3
 8003f24:	2114      	movs	r1, #20
 8003f26:	f7fd fcef 	bl	8001908 <__udivsi3>
 8003f2a:	0080      	lsls	r0, r0, #2
 8003f2c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f2e:	2325      	movs	r3, #37	; 0x25
 8003f30:	2202      	movs	r2, #2
 8003f32:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_DMA_Init+0xbc>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	6811      	ldr	r1, [r2, #0]
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	68e0      	ldr	r0, [r4, #12]
 8003f44:	4303      	orrs	r3, r0
 8003f46:	6920      	ldr	r0, [r4, #16]
 8003f48:	4303      	orrs	r3, r0
 8003f4a:	6960      	ldr	r0, [r4, #20]
 8003f4c:	4303      	orrs	r3, r0
 8003f4e:	69a0      	ldr	r0, [r4, #24]
 8003f50:	4303      	orrs	r3, r0
 8003f52:	69e0      	ldr	r0, [r4, #28]
 8003f54:	4303      	orrs	r3, r0
 8003f56:	6a20      	ldr	r0, [r4, #32]
 8003f58:	4303      	orrs	r3, r0
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f5e:	0020      	movs	r0, r4
 8003f60:	f7ff ffc0 	bl	8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	01db      	lsls	r3, r3, #7
 8003f68:	68a2      	ldr	r2, [r4, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d018      	beq.n	8003fa0 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f70:	233f      	movs	r3, #63	; 0x3f
 8003f72:	6861      	ldr	r1, [r4, #4]
 8003f74:	400b      	ands	r3, r1
 8003f76:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003f7a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003f7c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f7e:	6863      	ldr	r3, [r4, #4]
 8003f80:	1e5a      	subs	r2, r3, #1
 8003f82:	2a03      	cmp	r2, #3
 8003f84:	d90f      	bls.n	8003fa6 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f8a:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f8c:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003f92:	2225      	movs	r2, #37	; 0x25
 8003f94:	2101      	movs	r1, #1
 8003f96:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003f98:	3a01      	subs	r2, #1
 8003f9a:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	e7e3      	b.n	8003f6e <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fa6:	223f      	movs	r2, #63	; 0x3f
 8003fa8:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003faa:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <HAL_DMA_Init+0xc0>)
 8003fac:	189a      	adds	r2, r3, r2
 8003fae:	0092      	lsls	r2, r2, #2
 8003fb0:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fb2:	490a      	ldr	r1, [pc, #40]	; (8003fdc <HAL_DMA_Init+0xc4>)
 8003fb4:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4099      	lsls	r1, r3
 8003fbc:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003fc4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	e7e1      	b.n	8003f8e <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
 8003fcc:	e7e7      	b.n	8003f9e <HAL_DMA_Init+0x86>
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	bffdfff8 	.word	0xbffdfff8
 8003fd4:	ffff800f 	.word	0xffff800f
 8003fd8:	1000823f 	.word	0x1000823f
 8003fdc:	40020940 	.word	0x40020940

08003fe0 <HAL_DMA_DeInit>:
{
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	1e04      	subs	r4, r0, #0
  if (NULL == hdma)
 8003fe4:	d042      	beq.n	800406c <HAL_DMA_DeInit+0x8c>
  __HAL_DMA_DISABLE(hdma);
 8003fe6:	6802      	ldr	r2, [r0, #0]
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	2501      	movs	r5, #1
 8003fec:	43ab      	bics	r3, r5
 8003fee:	6013      	str	r3, [r2, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ff0:	6807      	ldr	r7, [r0, #0]
 8003ff2:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_DMA_DeInit+0x90>)
 8003ff4:	18f8      	adds	r0, r7, r3
 8003ff6:	2114      	movs	r1, #20
 8003ff8:	f7fd fc86 	bl	8001908 <__udivsi3>
 8003ffc:	0080      	lsls	r0, r0, #2
 8003ffe:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8004000:	2600      	movs	r6, #0
 8004002:	603e      	str	r6, [r7, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004004:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_DMA_DeInit+0x94>)
 8004006:	6851      	ldr	r1, [r2, #4]
 8004008:	231c      	movs	r3, #28
 800400a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800400c:	4003      	ands	r3, r0
 800400e:	409d      	lsls	r5, r3
 8004010:	430d      	orrs	r5, r1
 8004012:	6055      	str	r5, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004014:	0020      	movs	r0, r4
 8004016:	f7ff ff65 	bl	8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 800401a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800401c:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800401e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004020:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004022:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	1e5a      	subs	r2, r3, #1
 8004028:	2a03      	cmp	r2, #3
 800402a:	d90e      	bls.n	800404a <HAL_DMA_DeInit+0x6a>
  hdma->DMAmuxRequestGen = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	6523      	str	r3, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8004030:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004032:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->XferCpltCallback = NULL;
 8004034:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004036:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004038:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800403a:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800403e:	2225      	movs	r2, #37	; 0x25
 8004040:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004042:	3a01      	subs	r2, #1
 8004044:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004046:	2000      	movs	r0, #0
}
 8004048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800404a:	223f      	movs	r2, #63	; 0x3f
 800404c:	4013      	ands	r3, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800404e:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <HAL_DMA_DeInit+0x98>)
 8004050:	189a      	adds	r2, r3, r2
 8004052:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004054:	4909      	ldr	r1, [pc, #36]	; (800407c <HAL_DMA_DeInit+0x9c>)
 8004056:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004058:	3b01      	subs	r3, #1
 800405a:	2101      	movs	r1, #1
 800405c:	4099      	lsls	r1, r3
 800405e:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004064:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004066:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	e7df      	b.n	800402c <HAL_DMA_DeInit+0x4c>
    return HAL_ERROR;
 800406c:	2001      	movs	r0, #1
 800406e:	e7eb      	b.n	8004048 <HAL_DMA_DeInit+0x68>
 8004070:	bffdfff8 	.word	0xbffdfff8
 8004074:	40020000 	.word	0x40020000
 8004078:	1000823f 	.word	0x1000823f
 800407c:	40020940 	.word	0x40020940

08004080 <HAL_DMA_Start_IT>:
{
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004084:	2024      	movs	r0, #36	; 0x24
 8004086:	5c20      	ldrb	r0, [r4, r0]
 8004088:	2801      	cmp	r0, #1
 800408a:	d045      	beq.n	8004118 <HAL_DMA_Start_IT+0x98>
 800408c:	2024      	movs	r0, #36	; 0x24
 800408e:	2501      	movs	r5, #1
 8004090:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8004092:	3001      	adds	r0, #1
 8004094:	5c20      	ldrb	r0, [r4, r0]
 8004096:	2801      	cmp	r0, #1
 8004098:	d006      	beq.n	80040a8 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800409e:	3b5c      	subs	r3, #92	; 0x5c
 80040a0:	2200      	movs	r2, #0
 80040a2:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 80040a4:	2001      	movs	r0, #1
}
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80040a8:	3024      	adds	r0, #36	; 0x24
 80040aa:	3501      	adds	r5, #1
 80040ac:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ae:	2000      	movs	r0, #0
 80040b0:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	6828      	ldr	r0, [r5, #0]
 80040b6:	2601      	movs	r6, #1
 80040b8:	43b0      	bics	r0, r6
 80040ba:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040bc:	0020      	movs	r0, r4
 80040be:	f7ff feed 	bl	8003e9c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80040c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040c8:	6822      	ldr	r2, [r4, #0]
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	210e      	movs	r1, #14
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	03d2      	lsls	r2, r2, #15
 80040d8:	d504      	bpl.n	80040e4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	2280      	movs	r2, #128	; 0x80
 80040de:	0052      	lsls	r2, r2, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80040e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	2280      	movs	r2, #128	; 0x80
 80040ee:	0052      	lsls	r2, r2, #1
 80040f0:	430a      	orrs	r2, r1
 80040f2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fe:	2000      	movs	r0, #0
 8004100:	e7d1      	b.n	80040a6 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004102:	6822      	ldr	r2, [r4, #0]
 8004104:	6813      	ldr	r3, [r2, #0]
 8004106:	2104      	movs	r1, #4
 8004108:	438b      	bics	r3, r1
 800410a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	6813      	ldr	r3, [r2, #0]
 8004110:	3106      	adds	r1, #6
 8004112:	430b      	orrs	r3, r1
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e7dc      	b.n	80040d2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004118:	2002      	movs	r0, #2
 800411a:	e7c4      	b.n	80040a6 <HAL_DMA_Start_IT+0x26>

0800411c <HAL_DMA_Abort_IT>:
{
 800411c:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800411e:	2325      	movs	r3, #37	; 0x25
 8004120:	5cc3      	ldrb	r3, [r0, r3]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004126:	2304      	movs	r3, #4
 8004128:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800412a:	2001      	movs	r0, #1
}
 800412c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800412e:	6802      	ldr	r2, [r0, #0]
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	210e      	movs	r1, #14
 8004134:	438b      	bics	r3, r1
 8004136:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004138:	6801      	ldr	r1, [r0, #0]
 800413a:	680a      	ldr	r2, [r1, #0]
 800413c:	2301      	movs	r3, #1
 800413e:	439a      	bics	r2, r3
 8004140:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004142:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004144:	680a      	ldr	r2, [r1, #0]
 8004146:	4c13      	ldr	r4, [pc, #76]	; (8004194 <HAL_DMA_Abort_IT+0x78>)
 8004148:	4022      	ands	r2, r4
 800414a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800414c:	4912      	ldr	r1, [pc, #72]	; (8004198 <HAL_DMA_Abort_IT+0x7c>)
 800414e:	684c      	ldr	r4, [r1, #4]
 8004150:	221c      	movs	r2, #28
 8004152:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004154:	402a      	ands	r2, r5
 8004156:	4093      	lsls	r3, r2
 8004158:	4323      	orrs	r3, r4
 800415a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800415c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800415e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004160:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004162:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	490a      	ldr	r1, [pc, #40]	; (8004194 <HAL_DMA_Abort_IT+0x78>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004170:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004172:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004174:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004176:	2325      	movs	r3, #37	; 0x25
 8004178:	2201      	movs	r2, #1
 800417a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800417c:	3b01      	subs	r3, #1
 800417e:	2200      	movs	r2, #0
 8004180:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8004182:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8004188:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800418a:	2000      	movs	r0, #0
 800418c:	e7ce      	b.n	800412c <HAL_DMA_Abort_IT+0x10>
 800418e:	2000      	movs	r0, #0
 8004190:	e7cc      	b.n	800412c <HAL_DMA_Abort_IT+0x10>
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	fffffeff 	.word	0xfffffeff
 8004198:	40020000 	.word	0x40020000

0800419c <HAL_DMA_IRQHandler>:
{
 800419c:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_DMA_IRQHandler+0xc8>)
 80041a0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80041a2:	6804      	ldr	r4, [r0, #0]
 80041a4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041a6:	231c      	movs	r3, #28
 80041a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80041aa:	4013      	ands	r3, r2
 80041ac:	2204      	movs	r2, #4
 80041ae:	409a      	lsls	r2, r3
 80041b0:	4211      	tst	r1, r2
 80041b2:	d016      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x46>
 80041b4:	076a      	lsls	r2, r5, #29
 80041b6:	d514      	bpl.n	80041e2 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	d403      	bmi.n	80041c6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	2204      	movs	r2, #4
 80041c2:	4393      	bics	r3, r2
 80041c4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80041c6:	4927      	ldr	r1, [pc, #156]	; (8004264 <HAL_DMA_IRQHandler+0xc8>)
 80041c8:	684c      	ldr	r4, [r1, #4]
 80041ca:	221c      	movs	r2, #28
 80041cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80041ce:	401a      	ands	r2, r3
 80041d0:	2304      	movs	r3, #4
 80041d2:	4093      	lsls	r3, r2
 80041d4:	4323      	orrs	r3, r4
 80041d6:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80041d8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d000      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80041de:	4798      	blx	r3
}
 80041e0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80041e2:	2202      	movs	r2, #2
 80041e4:	409a      	lsls	r2, r3
 80041e6:	4211      	tst	r1, r2
 80041e8:	d01c      	beq.n	8004224 <HAL_DMA_IRQHandler+0x88>
 80041ea:	07aa      	lsls	r2, r5, #30
 80041ec:	d51a      	bpl.n	8004224 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	069b      	lsls	r3, r3, #26
 80041f2:	d406      	bmi.n	8004202 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	220a      	movs	r2, #10
 80041f8:	4393      	bics	r3, r2
 80041fa:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80041fc:	2325      	movs	r3, #37	; 0x25
 80041fe:	3a09      	subs	r2, #9
 8004200:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004202:	4918      	ldr	r1, [pc, #96]	; (8004264 <HAL_DMA_IRQHandler+0xc8>)
 8004204:	684c      	ldr	r4, [r1, #4]
 8004206:	221c      	movs	r2, #28
 8004208:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800420a:	401a      	ands	r2, r3
 800420c:	2302      	movs	r3, #2
 800420e:	4093      	lsls	r3, r2
 8004210:	4323      	orrs	r3, r4
 8004212:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8004214:	2324      	movs	r3, #36	; 0x24
 8004216:	2200      	movs	r2, #0
 8004218:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800421a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0df      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8004220:	4798      	blx	r3
 8004222:	e7dd      	b.n	80041e0 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004224:	2208      	movs	r2, #8
 8004226:	409a      	lsls	r2, r3
 8004228:	4211      	tst	r1, r2
 800422a:	d0d9      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x44>
 800422c:	072b      	lsls	r3, r5, #28
 800422e:	d5d7      	bpl.n	80041e0 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	220e      	movs	r2, #14
 8004234:	4393      	bics	r3, r2
 8004236:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004238:	4c0a      	ldr	r4, [pc, #40]	; (8004264 <HAL_DMA_IRQHandler+0xc8>)
 800423a:	6865      	ldr	r5, [r4, #4]
 800423c:	211c      	movs	r1, #28
 800423e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004240:	4019      	ands	r1, r3
 8004242:	2301      	movs	r3, #1
 8004244:	001a      	movs	r2, r3
 8004246:	408a      	lsls	r2, r1
 8004248:	432a      	orrs	r2, r5
 800424a:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800424c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800424e:	2225      	movs	r2, #37	; 0x25
 8004250:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8004252:	3323      	adds	r3, #35	; 0x23
 8004254:	2200      	movs	r2, #0
 8004256:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8004258:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0c0      	beq.n	80041e0 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800425e:	4798      	blx	r3
  return;
 8004260:	e7be      	b.n	80041e0 <HAL_DMA_IRQHandler+0x44>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40020000 	.word	0x40020000

08004268 <HAL_FLASH_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_FLASH_Unlock+0x1c>)
 800426a:	695b      	ldr	r3, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2000      	movs	r0, #0
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800426e:	2b00      	cmp	r3, #0
 8004270:	db00      	blt.n	8004274 <HAL_FLASH_Unlock+0xc>
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004272:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004274:	4b03      	ldr	r3, [pc, #12]	; (8004284 <HAL_FLASH_Unlock+0x1c>)
 8004276:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_FLASH_Unlock+0x20>)
 8004278:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800427a:	4a04      	ldr	r2, [pc, #16]	; (800428c <HAL_FLASH_Unlock+0x24>)
 800427c:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 800427e:	6958      	ldr	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	0fc0      	lsrs	r0, r0, #31
 8004282:	e7f6      	b.n	8004272 <HAL_FLASH_Unlock+0xa>
 8004284:	40022000 	.word	0x40022000
 8004288:	45670123 	.word	0x45670123
 800428c:	cdef89ab 	.word	0xcdef89ab

08004290 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	0004      	movs	r4, r0
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff fd80 	bl	8003d98 <HAL_GetTick>
 8004298:	0007      	movs	r7, r0
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800429a:	4e16      	ldr	r6, [pc, #88]	; (80042f4 <FLASH_WaitForLastOperation+0x64>)
 800429c:	2580      	movs	r5, #128	; 0x80
 800429e:	026d      	lsls	r5, r5, #9
 80042a0:	6933      	ldr	r3, [r6, #16]
 80042a2:	422b      	tst	r3, r5
 80042a4:	d008      	beq.n	80042b8 <FLASH_WaitForLastOperation+0x28>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042a6:	1c63      	adds	r3, r4, #1
 80042a8:	d0fa      	beq.n	80042a0 <FLASH_WaitForLastOperation+0x10>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80042aa:	f7ff fd75 	bl	8003d98 <HAL_GetTick>
 80042ae:	1bc0      	subs	r0, r0, r7
 80042b0:	42a0      	cmp	r0, r4
 80042b2:	d3f5      	bcc.n	80042a0 <FLASH_WaitForLastOperation+0x10>
      {
        return HAL_TIMEOUT;
 80042b4:	2003      	movs	r0, #3
 80042b6:	e01c      	b.n	80042f2 <FLASH_WaitForLastOperation+0x62>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80042b8:	490e      	ldr	r1, [pc, #56]	; (80042f4 <FLASH_WaitForLastOperation+0x64>)
 80042ba:	690a      	ldr	r2, [r1, #16]
 80042bc:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <FLASH_WaitForLastOperation+0x68>)
 80042be:	0015      	movs	r5, r2
 80042c0:	401d      	ands	r5, r3

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80042c2:	480e      	ldr	r0, [pc, #56]	; (80042fc <FLASH_WaitForLastOperation+0x6c>)
 80042c4:	6108      	str	r0, [r1, #16]

  if (error != 0x00U)
 80042c6:	421a      	tst	r2, r3
 80042c8:	d10e      	bne.n	80042e8 <FLASH_WaitForLastOperation+0x58>
    pFlash.ErrorCode = error;
    return HAL_ERROR;
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80042ca:	000e      	movs	r6, r1
 80042cc:	2580      	movs	r5, #128	; 0x80
 80042ce:	02ed      	lsls	r5, r5, #11
 80042d0:	6933      	ldr	r3, [r6, #16]
 80042d2:	422b      	tst	r3, r5
 80042d4:	d00c      	beq.n	80042f0 <FLASH_WaitForLastOperation+0x60>
  {
    if(Timeout != HAL_MAX_DELAY)
 80042d6:	1c63      	adds	r3, r4, #1
 80042d8:	d0fa      	beq.n	80042d0 <FLASH_WaitForLastOperation+0x40>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80042da:	f7ff fd5d 	bl	8003d98 <HAL_GetTick>
 80042de:	1bc0      	subs	r0, r0, r7
 80042e0:	42a0      	cmp	r0, r4
 80042e2:	d3f5      	bcc.n	80042d0 <FLASH_WaitForLastOperation+0x40>
      {
        return HAL_TIMEOUT;
 80042e4:	2003      	movs	r0, #3
 80042e6:	e004      	b.n	80042f2 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode = error;
 80042e8:	4b05      	ldr	r3, [pc, #20]	; (8004300 <FLASH_WaitForLastOperation+0x70>)
 80042ea:	605d      	str	r5, [r3, #4]
    return HAL_ERROR;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e000      	b.n	80042f2 <FLASH_WaitForLastOperation+0x62>
      }
    }
  }

  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
}
 80042f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f4:	40022000 	.word	0x40022000
 80042f8:	0000c3fa 	.word	0x0000c3fa
 80042fc:	0000c3fb 	.word	0x0000c3fb
 8004300:	20000a5c 	.word	0x20000a5c

08004304 <HAL_FLASH_Program>:
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	0006      	movs	r6, r0
 8004308:	000f      	movs	r7, r1
 800430a:	0014      	movs	r4, r2
 800430c:	001d      	movs	r5, r3
  __HAL_LOCK(&pFlash);
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <HAL_FLASH_Program+0x64>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d026      	beq.n	8004364 <HAL_FLASH_Program+0x60>
 8004316:	4b14      	ldr	r3, [pc, #80]	; (8004368 <HAL_FLASH_Program+0x64>)
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004320:	20fa      	movs	r0, #250	; 0xfa
 8004322:	0080      	lsls	r0, r0, #2
 8004324:	f7ff ffb4 	bl	8004290 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004328:	2800      	cmp	r0, #0
 800432a:	d10d      	bne.n	8004348 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800432c:	2e01      	cmp	r6, #1
 800432e:	d00f      	beq.n	8004350 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004330:	0021      	movs	r1, r4
 8004332:	0038      	movs	r0, r7
 8004334:	f001 f9c8 	bl	80056c8 <__FLASH_Program_Fast_veneer>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004338:	20fa      	movs	r0, #250	; 0xfa
 800433a:	0080      	lsls	r0, r0, #2
 800433c:	f7ff ffa8 	bl	8004290 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_FLASH_Program+0x68>)
 8004342:	6953      	ldr	r3, [r2, #20]
 8004344:	43b3      	bics	r3, r6
 8004346:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004348:	4b07      	ldr	r3, [pc, #28]	; (8004368 <HAL_FLASH_Program+0x64>)
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
}
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <HAL_FLASH_Program+0x68>)
 8004352:	6953      	ldr	r3, [r2, #20]
 8004354:	2101      	movs	r1, #1
 8004356:	430b      	orrs	r3, r1
 8004358:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800435a:	603c      	str	r4, [r7, #0]
 800435c:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004360:	607d      	str	r5, [r7, #4]
}
 8004362:	e7e9      	b.n	8004338 <HAL_FLASH_Program+0x34>
  __HAL_LOCK(&pFlash);
 8004364:	2002      	movs	r0, #2
 8004366:	e7f2      	b.n	800434e <HAL_FLASH_Program+0x4a>
 8004368:	20000a5c 	.word	0x20000a5c
 800436c:	40022000 	.word	0x40022000

08004370 <HAL_FLASH_Lock>:
{
 8004370:	b510      	push	{r4, lr}
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004372:	20fa      	movs	r0, #250	; 0xfa
 8004374:	0080      	lsls	r0, r0, #2
 8004376:	f7ff ff8b 	bl	8004290 <FLASH_WaitForLastOperation>
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_FLASH_Lock+0x20>)
 800437c:	6959      	ldr	r1, [r3, #20]
 800437e:	2280      	movs	r2, #128	; 0x80
 8004380:	0612      	lsls	r2, r2, #24
 8004382:	430a      	orrs	r2, r1
 8004384:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8004386:	6958      	ldr	r0, [r3, #20]
 8004388:	43c0      	mvns	r0, r0
  return status;
 800438a:	0fc0      	lsrs	r0, r0, #31
}
 800438c:	bd10      	pop	{r4, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40022000 	.word	0x40022000

08004394 <FLASH_PageErase>:
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <FLASH_PageErase+0x14>)
 8004396:	6953      	ldr	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8004398:	00c9      	lsls	r1, r1, #3
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800439a:	4804      	ldr	r0, [pc, #16]	; (80043ac <FLASH_PageErase+0x18>)
 800439c:	4003      	ands	r3, r0
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800439e:	4319      	orrs	r1, r3
 80043a0:	4b03      	ldr	r3, [pc, #12]	; (80043b0 <FLASH_PageErase+0x1c>)
 80043a2:	4319      	orrs	r1, r3
 80043a4:	6151      	str	r1, [r2, #20]
}
 80043a6:	4770      	bx	lr
 80043a8:	40022000 	.word	0x40022000
 80043ac:	ffffe007 	.word	0xffffe007
 80043b0:	00010002 	.word	0x00010002

080043b4 <HAL_FLASHEx_Erase>:
{
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	0005      	movs	r5, r0
 80043b8:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80043ba:	4b22      	ldr	r3, [pc, #136]	; (8004444 <HAL_FLASHEx_Erase+0x90>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d03e      	beq.n	8004440 <HAL_FLASHEx_Erase+0x8c>
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_FLASHEx_Erase+0x90>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043c8:	2200      	movs	r2, #0
 80043ca:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043cc:	20fa      	movs	r0, #250	; 0xfa
 80043ce:	0080      	lsls	r0, r0, #2
 80043d0:	f7ff ff5e 	bl	8004290 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d12f      	bne.n	8004438 <HAL_FLASHEx_Erase+0x84>
    pEraseInit->Banks = FLASH_BANK_1;
 80043d8:	2304      	movs	r3, #4
 80043da:	606b      	str	r3, [r5, #4]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80043dc:	682b      	ldr	r3, [r5, #0]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d01a      	beq.n	8004418 <HAL_FLASHEx_Erase+0x64>
      *PageError = 0xFFFFFFFFU;
 80043e2:	2301      	movs	r3, #1
 80043e4:	425b      	negs	r3, r3
 80043e6:	6033      	str	r3, [r6, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80043e8:	68ac      	ldr	r4, [r5, #8]
 80043ea:	68eb      	ldr	r3, [r5, #12]
 80043ec:	18e3      	adds	r3, r4, r3
 80043ee:	429c      	cmp	r4, r3
 80043f0:	d21d      	bcs.n	800442e <HAL_FLASHEx_Erase+0x7a>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043f2:	27fa      	movs	r7, #250	; 0xfa
 80043f4:	00bf      	lsls	r7, r7, #2
        FLASH_PageErase(pEraseInit->Banks, index);
 80043f6:	0021      	movs	r1, r4
 80043f8:	6868      	ldr	r0, [r5, #4]
 80043fa:	f7ff ffcb 	bl	8004394 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80043fe:	0038      	movs	r0, r7
 8004400:	f7ff ff46 	bl	8004290 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004404:	2800      	cmp	r0, #0
 8004406:	d111      	bne.n	800442c <HAL_FLASHEx_Erase+0x78>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004408:	3401      	adds	r4, #1
 800440a:	68ab      	ldr	r3, [r5, #8]
 800440c:	68ea      	ldr	r2, [r5, #12]
 800440e:	4694      	mov	ip, r2
 8004410:	4463      	add	r3, ip
 8004412:	42a3      	cmp	r3, r4
 8004414:	d8ef      	bhi.n	80043f6 <HAL_FLASHEx_Erase+0x42>
 8004416:	e00a      	b.n	800442e <HAL_FLASHEx_Erase+0x7a>
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8004418:	4a0b      	ldr	r2, [pc, #44]	; (8004448 <HAL_FLASHEx_Erase+0x94>)
 800441a:	6951      	ldr	r1, [r2, #20]
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_FLASHEx_Erase+0x98>)
 800441e:	430b      	orrs	r3, r1
 8004420:	6153      	str	r3, [r2, #20]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004422:	30fa      	adds	r0, #250	; 0xfa
 8004424:	0080      	lsls	r0, r0, #2
 8004426:	f7ff ff33 	bl	8004290 <FLASH_WaitForLastOperation>
 800442a:	e005      	b.n	8004438 <HAL_FLASHEx_Erase+0x84>
          *PageError = index;
 800442c:	6034      	str	r4, [r6, #0]
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800442e:	4a06      	ldr	r2, [pc, #24]	; (8004448 <HAL_FLASHEx_Erase+0x94>)
 8004430:	6953      	ldr	r3, [r2, #20]
 8004432:	2102      	movs	r1, #2
 8004434:	438b      	bics	r3, r1
 8004436:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004438:	4b02      	ldr	r3, [pc, #8]	; (8004444 <HAL_FLASHEx_Erase+0x90>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
}
 800443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004440:	2002      	movs	r0, #2
 8004442:	e7fc      	b.n	800443e <HAL_FLASHEx_Erase+0x8a>
 8004444:	20000a5c 	.word	0x20000a5c
 8004448:	40022000 	.word	0x40022000
 800444c:	00010004 	.word	0x00010004

08004450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	46de      	mov	lr, fp
 8004454:	4657      	mov	r7, sl
 8004456:	464e      	mov	r6, r9
 8004458:	4645      	mov	r5, r8
 800445a:	b5e0      	push	{r5, r6, r7, lr}
 800445c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445e:	680e      	ldr	r6, [r1, #0]
 8004460:	2e00      	cmp	r6, #0
 8004462:	d100      	bne.n	8004466 <HAL_GPIO_Init+0x16>
 8004464:	e0d3      	b.n	800460e <HAL_GPIO_Init+0x1be>
 8004466:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8004468:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800446a:	2401      	movs	r4, #1
 800446c:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800446e:	3402      	adds	r4, #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004470:	25c0      	movs	r5, #192	; 0xc0
 8004472:	02ad      	lsls	r5, r5, #10
 8004474:	46a9      	mov	r9, r5
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004476:	250f      	movs	r5, #15
 8004478:	46aa      	mov	sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800447a:	4d68      	ldr	r5, [pc, #416]	; (800461c <HAL_GPIO_Init+0x1cc>)
 800447c:	1945      	adds	r5, r0, r5
 800447e:	426f      	negs	r7, r5
 8004480:	417d      	adcs	r5, r7
 8004482:	426d      	negs	r5, r5
 8004484:	9503      	str	r5, [sp, #12]
 8004486:	e04f      	b.n	8004528 <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 8004488:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800448a:	0027      	movs	r7, r4
 800448c:	4097      	lsls	r7, r2
 800448e:	43be      	bics	r6, r7
 8004490:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004492:	68ce      	ldr	r6, [r1, #12]
 8004494:	4096      	lsls	r6, r2
 8004496:	4647      	mov	r7, r8
 8004498:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800449a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800449c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800449e:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044a0:	684d      	ldr	r5, [r1, #4]
 80044a2:	092d      	lsrs	r5, r5, #4
 80044a4:	4667      	mov	r7, ip
 80044a6:	403d      	ands	r5, r7
 80044a8:	409d      	lsls	r5, r3
 80044aa:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80044ac:	6045      	str	r5, [r0, #4]
 80044ae:	e047      	b.n	8004540 <HAL_GPIO_Init+0xf0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80044b0:	2600      	movs	r6, #0
 80044b2:	465f      	mov	r7, fp
 80044b4:	40be      	lsls	r6, r7
 80044b6:	4647      	mov	r7, r8
 80044b8:	433e      	orrs	r6, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80044ba:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044bc:	4d58      	ldr	r5, [pc, #352]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 80044be:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80044c0:	9e01      	ldr	r6, [sp, #4]
 80044c2:	43f6      	mvns	r6, r6
 80044c4:	9602      	str	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044c6:	684f      	ldr	r7, [r1, #4]
 80044c8:	02fe      	lsls	r6, r7, #11
 80044ca:	d500      	bpl.n	80044ce <HAL_GPIO_Init+0x7e>
 80044cc:	e093      	b.n	80045f6 <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 80044ce:	9e02      	ldr	r6, [sp, #8]
 80044d0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80044d2:	4f53      	ldr	r7, [pc, #332]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 80044d4:	603d      	str	r5, [r7, #0]

        temp = EXTI->FTSR1;
 80044d6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044d8:	684f      	ldr	r7, [r1, #4]
 80044da:	02be      	lsls	r6, r7, #10
 80044dc:	d500      	bpl.n	80044e0 <HAL_GPIO_Init+0x90>
 80044de:	e08d      	b.n	80045fc <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80044e0:	9e02      	ldr	r6, [sp, #8]
 80044e2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80044e4:	4f4e      	ldr	r7, [pc, #312]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 80044e6:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044e8:	2584      	movs	r5, #132	; 0x84
 80044ea:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ec:	684f      	ldr	r7, [r1, #4]
 80044ee:	03be      	lsls	r6, r7, #14
 80044f0:	d500      	bpl.n	80044f4 <HAL_GPIO_Init+0xa4>
 80044f2:	e086      	b.n	8004602 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80044f4:	9e02      	ldr	r6, [sp, #8]
 80044f6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80044f8:	4f49      	ldr	r7, [pc, #292]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 80044fa:	46b8      	mov	r8, r7
 80044fc:	2784      	movs	r7, #132	; 0x84
 80044fe:	46bb      	mov	fp, r7
 8004500:	4647      	mov	r7, r8
 8004502:	465e      	mov	r6, fp
 8004504:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 8004506:	2580      	movs	r5, #128	; 0x80
 8004508:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800450a:	684e      	ldr	r6, [r1, #4]
 800450c:	03f6      	lsls	r6, r6, #15
 800450e:	d47b      	bmi.n	8004608 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8004510:	9e02      	ldr	r6, [sp, #8]
 8004512:	4035      	ands	r5, r6
 8004514:	002f      	movs	r7, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004516:	4e42      	ldr	r6, [pc, #264]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 8004518:	2580      	movs	r5, #128	; 0x80
 800451a:	5177      	str	r7, [r6, r5]
      }
    }

    position++;
 800451c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800451e:	680e      	ldr	r6, [r1, #0]
 8004520:	3202      	adds	r2, #2
 8004522:	0035      	movs	r5, r6
 8004524:	40dd      	lsrs	r5, r3
 8004526:	d072      	beq.n	800460e <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004528:	4665      	mov	r5, ip
 800452a:	409d      	lsls	r5, r3
 800452c:	0037      	movs	r7, r6
 800452e:	402f      	ands	r7, r5
 8004530:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8004532:	422e      	tst	r6, r5
 8004534:	d0f2      	beq.n	800451c <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004536:	684e      	ldr	r6, [r1, #4]
 8004538:	4026      	ands	r6, r4
 800453a:	3e01      	subs	r6, #1
 800453c:	2e01      	cmp	r6, #1
 800453e:	d9a3      	bls.n	8004488 <HAL_GPIO_Init+0x38>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004540:	684d      	ldr	r5, [r1, #4]
 8004542:	4025      	ands	r5, r4
 8004544:	2d03      	cmp	r5, #3
 8004546:	d023      	beq.n	8004590 <HAL_GPIO_Init+0x140>
        temp = GPIOx->PUPDR;
 8004548:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800454a:	0026      	movs	r6, r4
 800454c:	4096      	lsls	r6, r2
 800454e:	43b5      	bics	r5, r6
 8004550:	002e      	movs	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004552:	688d      	ldr	r5, [r1, #8]
 8004554:	4095      	lsls	r5, r2
 8004556:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8004558:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800455a:	684d      	ldr	r5, [r1, #4]
 800455c:	4025      	ands	r5, r4
 800455e:	2d02      	cmp	r5, #2
 8004560:	d116      	bne.n	8004590 <HAL_GPIO_Init+0x140>
        temp = GPIOx->AFR[position >> 3u];
 8004562:	08dd      	lsrs	r5, r3, #3
 8004564:	00ad      	lsls	r5, r5, #2
 8004566:	1945      	adds	r5, r0, r5
 8004568:	9502      	str	r5, [sp, #8]
 800456a:	6a2e      	ldr	r6, [r5, #32]
 800456c:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800456e:	2607      	movs	r6, #7
 8004570:	401e      	ands	r6, r3
 8004572:	00b6      	lsls	r6, r6, #2
 8004574:	4657      	mov	r7, sl
 8004576:	40b7      	lsls	r7, r6
 8004578:	46bb      	mov	fp, r7
 800457a:	4647      	mov	r7, r8
 800457c:	465d      	mov	r5, fp
 800457e:	43af      	bics	r7, r5
 8004580:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004582:	690f      	ldr	r7, [r1, #16]
 8004584:	40b7      	lsls	r7, r6
 8004586:	003e      	movs	r6, r7
 8004588:	4645      	mov	r5, r8
 800458a:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800458c:	9d02      	ldr	r5, [sp, #8]
 800458e:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 8004590:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004592:	0026      	movs	r6, r4
 8004594:	4096      	lsls	r6, r2
 8004596:	43b5      	bics	r5, r6
 8004598:	002e      	movs	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800459a:	684d      	ldr	r5, [r1, #4]
 800459c:	4025      	ands	r5, r4
 800459e:	4095      	lsls	r5, r2
 80045a0:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80045a2:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045a4:	684d      	ldr	r5, [r1, #4]
 80045a6:	464e      	mov	r6, r9
 80045a8:	4235      	tst	r5, r6
 80045aa:	d0b7      	beq.n	800451c <HAL_GPIO_Init+0xcc>
        temp = EXTI->EXTICR[position >> 2u];
 80045ac:	089d      	lsrs	r5, r3, #2
 80045ae:	00ad      	lsls	r5, r5, #2
 80045b0:	4e1b      	ldr	r6, [pc, #108]	; (8004620 <HAL_GPIO_Init+0x1d0>)
 80045b2:	46b0      	mov	r8, r6
 80045b4:	4445      	add	r5, r8
 80045b6:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 80045b8:	9602      	str	r6, [sp, #8]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045ba:	0027      	movs	r7, r4
 80045bc:	401f      	ands	r7, r3
 80045be:	00ff      	lsls	r7, r7, #3
 80045c0:	46bb      	mov	fp, r7
 80045c2:	4657      	mov	r7, sl
 80045c4:	465e      	mov	r6, fp
 80045c6:	40b7      	lsls	r7, r6
 80045c8:	9e02      	ldr	r6, [sp, #8]
 80045ca:	43be      	bics	r6, r7
 80045cc:	46b0      	mov	r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045ce:	26a0      	movs	r6, #160	; 0xa0
 80045d0:	05f6      	lsls	r6, r6, #23
 80045d2:	42b0      	cmp	r0, r6
 80045d4:	d100      	bne.n	80045d8 <HAL_GPIO_Init+0x188>
 80045d6:	e76b      	b.n	80044b0 <HAL_GPIO_Init+0x60>
 80045d8:	4e12      	ldr	r6, [pc, #72]	; (8004624 <HAL_GPIO_Init+0x1d4>)
 80045da:	42b0      	cmp	r0, r6
 80045dc:	d007      	beq.n	80045ee <HAL_GPIO_Init+0x19e>
 80045de:	4e12      	ldr	r6, [pc, #72]	; (8004628 <HAL_GPIO_Init+0x1d8>)
 80045e0:	42b0      	cmp	r0, r6
 80045e2:	d006      	beq.n	80045f2 <HAL_GPIO_Init+0x1a2>
 80045e4:	9e03      	ldr	r6, [sp, #12]
 80045e6:	4667      	mov	r7, ip
 80045e8:	43be      	bics	r6, r7
 80045ea:	3605      	adds	r6, #5
 80045ec:	e761      	b.n	80044b2 <HAL_GPIO_Init+0x62>
 80045ee:	2601      	movs	r6, #1
 80045f0:	e75f      	b.n	80044b2 <HAL_GPIO_Init+0x62>
 80045f2:	2602      	movs	r6, #2
 80045f4:	e75d      	b.n	80044b2 <HAL_GPIO_Init+0x62>
          temp |= iocurrent;
 80045f6:	9e01      	ldr	r6, [sp, #4]
 80045f8:	4335      	orrs	r5, r6
 80045fa:	e76a      	b.n	80044d2 <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 80045fc:	9e01      	ldr	r6, [sp, #4]
 80045fe:	4335      	orrs	r5, r6
 8004600:	e770      	b.n	80044e4 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 8004602:	9e01      	ldr	r6, [sp, #4]
 8004604:	4335      	orrs	r5, r6
 8004606:	e777      	b.n	80044f8 <HAL_GPIO_Init+0xa8>
          temp |= iocurrent;
 8004608:	9f01      	ldr	r7, [sp, #4]
 800460a:	432f      	orrs	r7, r5
 800460c:	e783      	b.n	8004516 <HAL_GPIO_Init+0xc6>
  }
}
 800460e:	b005      	add	sp, #20
 8004610:	bcf0      	pop	{r4, r5, r6, r7}
 8004612:	46bb      	mov	fp, r7
 8004614:	46b2      	mov	sl, r6
 8004616:	46a9      	mov	r9, r5
 8004618:	46a0      	mov	r8, r4
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	affff400 	.word	0xaffff400
 8004620:	40021800 	.word	0x40021800
 8004624:	50000400 	.word	0x50000400
 8004628:	50000800 	.word	0x50000800

0800462c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800462c:	6900      	ldr	r0, [r0, #16]
 800462e:	4008      	ands	r0, r1
 8004630:	1e43      	subs	r3, r0, #1
 8004632:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004634:	b2c0      	uxtb	r0, r0
}
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004638:	2a00      	cmp	r2, #0
 800463a:	d001      	beq.n	8004640 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800463c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800463e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004640:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004642:	e7fc      	b.n	800463e <HAL_GPIO_WritePin+0x6>

08004644 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004644:	4770      	bx	lr

08004646 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004646:	4770      	bx	lr

08004648 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004648:	b510      	push	{r4, lr}
 800464a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4218      	tst	r0, r3
 8004652:	d104      	bne.n	800465e <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	4223      	tst	r3, r4
 800465a:	d105      	bne.n	8004668 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 800465c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004660:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004662:	f7ff ffef 	bl	8004644 <HAL_GPIO_EXTI_Rising_Callback>
 8004666:	e7f5      	b.n	8004654 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800466a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800466c:	0020      	movs	r0, r4
 800466e:	f7ff ffea 	bl	8004646 <HAL_GPIO_EXTI_Falling_Callback>
}
 8004672:	e7f3      	b.n	800465c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8004674:	40021800 	.word	0x40021800

08004678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467c:	6a02      	ldr	r2, [r0, #32]
 800467e:	2401      	movs	r4, #1
 8004680:	43a2      	bics	r2, r4
 8004682:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004688:	4d18      	ldr	r5, [pc, #96]	; (80046ec <TIM_OC1_SetConfig+0x74>)
 800468a:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800468c:	680d      	ldr	r5, [r1, #0]
 800468e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004690:	2502      	movs	r5, #2
 8004692:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004694:	688d      	ldr	r5, [r1, #8]
 8004696:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004698:	4d15      	ldr	r5, [pc, #84]	; (80046f0 <TIM_OC1_SetConfig+0x78>)
 800469a:	42a8      	cmp	r0, r5
 800469c:	d013      	beq.n	80046c6 <TIM_OC1_SetConfig+0x4e>
 800469e:	4d15      	ldr	r5, [pc, #84]	; (80046f4 <TIM_OC1_SetConfig+0x7c>)
 80046a0:	42a8      	cmp	r0, r5
 80046a2:	d009      	beq.n	80046b8 <TIM_OC1_SetConfig+0x40>
 80046a4:	4d14      	ldr	r5, [pc, #80]	; (80046f8 <TIM_OC1_SetConfig+0x80>)
 80046a6:	42a8      	cmp	r0, r5
 80046a8:	d119      	bne.n	80046de <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046aa:	2508      	movs	r5, #8
 80046ac:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046ae:	68cd      	ldr	r5, [r1, #12]
 80046b0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046b2:	2504      	movs	r5, #4
 80046b4:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	e00c      	b.n	80046d2 <TIM_OC1_SetConfig+0x5a>
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b8:	2508      	movs	r5, #8
 80046ba:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80046bc:	68cd      	ldr	r5, [r1, #12]
 80046be:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80046c0:	2504      	movs	r5, #4
 80046c2:	43ab      	bics	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c4:	e005      	b.n	80046d2 <TIM_OC1_SetConfig+0x5a>
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c6:	2508      	movs	r5, #8
 80046c8:	43ab      	bics	r3, r5
    tmpccer |= OC_Config->OCNPolarity;
 80046ca:	68cd      	ldr	r5, [r1, #12]
 80046cc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ce:	2504      	movs	r5, #4
 80046d0:	43ab      	bics	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d2:	4d0a      	ldr	r5, [pc, #40]	; (80046fc <TIM_OC1_SetConfig+0x84>)
 80046d4:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d6:	694d      	ldr	r5, [r1, #20]
 80046d8:	698e      	ldr	r6, [r1, #24]
 80046da:	4335      	orrs	r5, r6
 80046dc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046de:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046e2:	684a      	ldr	r2, [r1, #4]
 80046e4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e6:	6203      	str	r3, [r0, #32]
}
 80046e8:	bd70      	pop	{r4, r5, r6, pc}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	fffeff8c 	.word	0xfffeff8c
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40014400 	.word	0x40014400
 80046f8:	40014800 	.word	0x40014800
 80046fc:	fffffcff 	.word	0xfffffcff

08004700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004704:	6a02      	ldr	r2, [r0, #32]
 8004706:	4c16      	ldr	r4, [pc, #88]	; (8004760 <TIM_OC3_SetConfig+0x60>)
 8004708:	4022      	ands	r2, r4
 800470a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004710:	4d14      	ldr	r5, [pc, #80]	; (8004764 <TIM_OC3_SetConfig+0x64>)
 8004712:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004714:	680e      	ldr	r6, [r1, #0]
 8004716:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <TIM_OC3_SetConfig+0x68>)
 800471a:	4013      	ands	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471c:	688a      	ldr	r2, [r1, #8]
 800471e:	0212      	lsls	r2, r2, #8
 8004720:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <TIM_OC3_SetConfig+0x6c>)
 8004724:	4290      	cmp	r0, r2
 8004726:	d006      	beq.n	8004736 <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <TIM_OC3_SetConfig+0x70>)
 800472a:	4290      	cmp	r0, r2
 800472c:	d00a      	beq.n	8004744 <TIM_OC3_SetConfig+0x44>
 800472e:	4a11      	ldr	r2, [pc, #68]	; (8004774 <TIM_OC3_SetConfig+0x74>)
 8004730:	4290      	cmp	r0, r2
 8004732:	d10e      	bne.n	8004752 <TIM_OC3_SetConfig+0x52>
 8004734:	e006      	b.n	8004744 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004736:	4a10      	ldr	r2, [pc, #64]	; (8004778 <TIM_OC3_SetConfig+0x78>)
 8004738:	401a      	ands	r2, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800473a:	68cb      	ldr	r3, [r1, #12]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8004740:	4a0e      	ldr	r2, [pc, #56]	; (800477c <TIM_OC3_SetConfig+0x7c>)
 8004742:	4013      	ands	r3, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004744:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <TIM_OC3_SetConfig+0x80>)
 8004746:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004748:	698c      	ldr	r4, [r1, #24]
 800474a:	694d      	ldr	r5, [r1, #20]
 800474c:	432c      	orrs	r4, r5
 800474e:	0124      	lsls	r4, r4, #4
 8004750:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004752:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004754:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004756:	684a      	ldr	r2, [r1, #4]
 8004758:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	6203      	str	r3, [r0, #32]
}
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	fffffeff 	.word	0xfffffeff
 8004764:	fffeff8c 	.word	0xfffeff8c
 8004768:	fffffdff 	.word	0xfffffdff
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800
 8004778:	fffff7ff 	.word	0xfffff7ff
 800477c:	fffffbff 	.word	0xfffffbff
 8004780:	ffffcfff 	.word	0xffffcfff

08004784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004784:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004788:	6a02      	ldr	r2, [r0, #32]
 800478a:	4c11      	ldr	r4, [pc, #68]	; (80047d0 <TIM_OC4_SetConfig+0x4c>)
 800478c:	4022      	ands	r2, r4
 800478e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004792:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004794:	4c0f      	ldr	r4, [pc, #60]	; (80047d4 <TIM_OC4_SetConfig+0x50>)
 8004796:	4022      	ands	r2, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004798:	680c      	ldr	r4, [r1, #0]
 800479a:	0224      	lsls	r4, r4, #8
 800479c:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800479e:	4c0e      	ldr	r4, [pc, #56]	; (80047d8 <TIM_OC4_SetConfig+0x54>)
 80047a0:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a2:	688b      	ldr	r3, [r1, #8]
 80047a4:	031b      	lsls	r3, r3, #12
 80047a6:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a8:	4c0c      	ldr	r4, [pc, #48]	; (80047dc <TIM_OC4_SetConfig+0x58>)
 80047aa:	42a0      	cmp	r0, r4
 80047ac:	d005      	beq.n	80047ba <TIM_OC4_SetConfig+0x36>
 80047ae:	4c0c      	ldr	r4, [pc, #48]	; (80047e0 <TIM_OC4_SetConfig+0x5c>)
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d002      	beq.n	80047ba <TIM_OC4_SetConfig+0x36>
 80047b4:	4c0b      	ldr	r4, [pc, #44]	; (80047e4 <TIM_OC4_SetConfig+0x60>)
 80047b6:	42a0      	cmp	r0, r4
 80047b8:	d104      	bne.n	80047c4 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047ba:	4c0b      	ldr	r4, [pc, #44]	; (80047e8 <TIM_OC4_SetConfig+0x64>)
 80047bc:	4025      	ands	r5, r4

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047be:	694c      	ldr	r4, [r1, #20]
 80047c0:	01a4      	lsls	r4, r4, #6
 80047c2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047c6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c8:	684a      	ldr	r2, [r1, #4]
 80047ca:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	6203      	str	r3, [r0, #32]
}
 80047ce:	bd30      	pop	{r4, r5, pc}
 80047d0:	ffffefff 	.word	0xffffefff
 80047d4:	feff8cff 	.word	0xfeff8cff
 80047d8:	ffffdfff 	.word	0xffffdfff
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40014400 	.word	0x40014400
 80047e4:	40014800 	.word	0x40014800
 80047e8:	ffffbfff 	.word	0xffffbfff

080047ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047ec:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047f0:	6a02      	ldr	r2, [r0, #32]
 80047f2:	4c11      	ldr	r4, [pc, #68]	; (8004838 <TIM_OC5_SetConfig+0x4c>)
 80047f4:	4022      	ands	r2, r4
 80047f6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f8:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047fa:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047fc:	4c0f      	ldr	r4, [pc, #60]	; (800483c <TIM_OC5_SetConfig+0x50>)
 80047fe:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004800:	680c      	ldr	r4, [r1, #0]
 8004802:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004804:	4c0e      	ldr	r4, [pc, #56]	; (8004840 <TIM_OC5_SetConfig+0x54>)
 8004806:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004808:	688b      	ldr	r3, [r1, #8]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480e:	4c0d      	ldr	r4, [pc, #52]	; (8004844 <TIM_OC5_SetConfig+0x58>)
 8004810:	42a0      	cmp	r0, r4
 8004812:	d005      	beq.n	8004820 <TIM_OC5_SetConfig+0x34>
 8004814:	4c0c      	ldr	r4, [pc, #48]	; (8004848 <TIM_OC5_SetConfig+0x5c>)
 8004816:	42a0      	cmp	r0, r4
 8004818:	d002      	beq.n	8004820 <TIM_OC5_SetConfig+0x34>
 800481a:	4c0c      	ldr	r4, [pc, #48]	; (800484c <TIM_OC5_SetConfig+0x60>)
 800481c:	42a0      	cmp	r0, r4
 800481e:	d104      	bne.n	800482a <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004820:	4c05      	ldr	r4, [pc, #20]	; (8004838 <TIM_OC5_SetConfig+0x4c>)
 8004822:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004824:	694c      	ldr	r4, [r1, #20]
 8004826:	0224      	lsls	r4, r4, #8
 8004828:	4325      	orrs	r5, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800482a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800482c:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800482e:	684a      	ldr	r2, [r1, #4]
 8004830:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	6203      	str	r3, [r0, #32]
}
 8004834:	bd30      	pop	{r4, r5, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	fffeffff 	.word	0xfffeffff
 800483c:	fffeff8f 	.word	0xfffeff8f
 8004840:	fffdffff 	.word	0xfffdffff
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004852:	6a03      	ldr	r3, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004854:	6a02      	ldr	r2, [r0, #32]
 8004856:	4c11      	ldr	r4, [pc, #68]	; (800489c <TIM_OC6_SetConfig+0x4c>)
 8004858:	4022      	ands	r2, r4
 800485a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485e:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004860:	4c0f      	ldr	r4, [pc, #60]	; (80048a0 <TIM_OC6_SetConfig+0x50>)
 8004862:	4022      	ands	r2, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004864:	680c      	ldr	r4, [r1, #0]
 8004866:	0224      	lsls	r4, r4, #8
 8004868:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800486a:	4c0e      	ldr	r4, [pc, #56]	; (80048a4 <TIM_OC6_SetConfig+0x54>)
 800486c:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800486e:	688b      	ldr	r3, [r1, #8]
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004874:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <TIM_OC6_SetConfig+0x58>)
 8004876:	42a0      	cmp	r0, r4
 8004878:	d005      	beq.n	8004886 <TIM_OC6_SetConfig+0x36>
 800487a:	4c0c      	ldr	r4, [pc, #48]	; (80048ac <TIM_OC6_SetConfig+0x5c>)
 800487c:	42a0      	cmp	r0, r4
 800487e:	d002      	beq.n	8004886 <TIM_OC6_SetConfig+0x36>
 8004880:	4c0b      	ldr	r4, [pc, #44]	; (80048b0 <TIM_OC6_SetConfig+0x60>)
 8004882:	42a0      	cmp	r0, r4
 8004884:	d104      	bne.n	8004890 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004886:	4c0b      	ldr	r4, [pc, #44]	; (80048b4 <TIM_OC6_SetConfig+0x64>)
 8004888:	4025      	ands	r5, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800488a:	694c      	ldr	r4, [r1, #20]
 800488c:	02a4      	lsls	r4, r4, #10
 800488e:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004890:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004892:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004894:	684a      	ldr	r2, [r1, #4]
 8004896:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004898:	6203      	str	r3, [r0, #32]
}
 800489a:	bd30      	pop	{r4, r5, pc}
 800489c:	ffefffff 	.word	0xffefffff
 80048a0:	feff8fff 	.word	0xfeff8fff
 80048a4:	ffdfffff 	.word	0xffdfffff
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40014400 	.word	0x40014400
 80048b0:	40014800 	.word	0x40014800
 80048b4:	fffbffff 	.word	0xfffbffff

080048b8 <TIM_DMADelayPulseCplt>:
{
 80048b8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80048bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048be:	4283      	cmp	r3, r0
 80048c0:	d00e      	beq.n	80048e0 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80048c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048c4:	4283      	cmp	r3, r0
 80048c6:	d014      	beq.n	80048f2 <TIM_DMADelayPulseCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80048c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048ca:	4283      	cmp	r3, r0
 80048cc:	d01a      	beq.n	8004904 <TIM_DMADelayPulseCplt+0x4c>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80048ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048d0:	4283      	cmp	r3, r0
 80048d2:	d020      	beq.n	8004916 <TIM_DMADelayPulseCplt+0x5e>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	0020      	movs	r0, r4
 80048d6:	f7ff f9df 	bl	8003c98 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	2300      	movs	r3, #0
 80048dc:	7723      	strb	r3, [r4, #28]
}
 80048de:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80048e4:	69c3      	ldr	r3, [r0, #28]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f4      	bne.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048ea:	333e      	adds	r3, #62	; 0x3e
 80048ec:	2201      	movs	r2, #1
 80048ee:	54e2      	strb	r2, [r4, r3]
 80048f0:	e7f0      	b.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f2:	2302      	movs	r3, #2
 80048f4:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80048f6:	69c3      	ldr	r3, [r0, #28]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1eb      	bne.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	333f      	adds	r3, #63	; 0x3f
 80048fe:	2201      	movs	r2, #1
 8004900:	54e2      	strb	r2, [r4, r3]
 8004902:	e7e7      	b.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004904:	2304      	movs	r3, #4
 8004906:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004908:	69c3      	ldr	r3, [r0, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e2      	bne.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	3340      	adds	r3, #64	; 0x40
 8004910:	2201      	movs	r2, #1
 8004912:	54e2      	strb	r2, [r4, r3]
 8004914:	e7de      	b.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004916:	2308      	movs	r3, #8
 8004918:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800491a:	69c3      	ldr	r3, [r0, #28]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1d9      	bne.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	3341      	adds	r3, #65	; 0x41
 8004922:	2201      	movs	r2, #1
 8004924:	54e2      	strb	r2, [r4, r3]
 8004926:	e7d5      	b.n	80048d4 <TIM_DMADelayPulseCplt+0x1c>

08004928 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
}
 8004928:	4770      	bx	lr

0800492a <TIM_DMADelayPulseHalfCplt>:
{
 800492a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800492c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800492e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004930:	4283      	cmp	r3, r0
 8004932:	d00b      	beq.n	800494c <TIM_DMADelayPulseHalfCplt+0x22>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004934:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004936:	4283      	cmp	r3, r0
 8004938:	d010      	beq.n	800495c <TIM_DMADelayPulseHalfCplt+0x32>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800493a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800493c:	4283      	cmp	r3, r0
 800493e:	d010      	beq.n	8004962 <TIM_DMADelayPulseHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004940:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004942:	4283      	cmp	r3, r0
 8004944:	d104      	bne.n	8004950 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004946:	2308      	movs	r3, #8
 8004948:	7723      	strb	r3, [r4, #28]
 800494a:	e001      	b.n	8004950 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494c:	2301      	movs	r3, #1
 800494e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004950:	0020      	movs	r0, r4
 8004952:	f7ff ffe9 	bl	8004928 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	2300      	movs	r3, #0
 8004958:	7723      	strb	r3, [r4, #28]
}
 800495a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800495c:	2302      	movs	r3, #2
 800495e:	7723      	strb	r3, [r4, #28]
 8004960:	e7f6      	b.n	8004950 <TIM_DMADelayPulseHalfCplt+0x26>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	2304      	movs	r3, #4
 8004964:	7723      	strb	r3, [r4, #28]
 8004966:	e7f3      	b.n	8004950 <TIM_DMADelayPulseHalfCplt+0x26>

08004968 <HAL_TIM_ErrorCallback>:
}
 8004968:	4770      	bx	lr

0800496a <TIM_DMAError>:
{
 800496a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800496c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800496e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004970:	4283      	cmp	r3, r0
 8004972:	d00c      	beq.n	800498e <TIM_DMAError+0x24>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004974:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004976:	4283      	cmp	r3, r0
 8004978:	d013      	beq.n	80049a2 <TIM_DMAError+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800497a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800497c:	4283      	cmp	r3, r0
 800497e:	d016      	beq.n	80049ae <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004980:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004982:	4283      	cmp	r3, r0
 8004984:	d019      	beq.n	80049ba <TIM_DMAError+0x50>
    htim->State = HAL_TIM_STATE_READY;
 8004986:	233d      	movs	r3, #61	; 0x3d
 8004988:	2201      	movs	r2, #1
 800498a:	54e2      	strb	r2, [r4, r3]
 800498c:	e003      	b.n	8004996 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800498e:	2301      	movs	r3, #1
 8004990:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	223e      	movs	r2, #62	; 0x3e
 8004994:	54a3      	strb	r3, [r4, r2]
  HAL_TIM_ErrorCallback(htim);
 8004996:	0020      	movs	r0, r4
 8004998:	f7ff ffe6 	bl	8004968 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499c:	2300      	movs	r3, #0
 800499e:	7723      	strb	r3, [r4, #28]
}
 80049a0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a2:	2302      	movs	r3, #2
 80049a4:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a6:	333d      	adds	r3, #61	; 0x3d
 80049a8:	2201      	movs	r2, #1
 80049aa:	54e2      	strb	r2, [r4, r3]
 80049ac:	e7f3      	b.n	8004996 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ae:	2304      	movs	r3, #4
 80049b0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	333c      	adds	r3, #60	; 0x3c
 80049b4:	2201      	movs	r2, #1
 80049b6:	54e2      	strb	r2, [r4, r3]
 80049b8:	e7ed      	b.n	8004996 <TIM_DMAError+0x2c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	2308      	movs	r3, #8
 80049bc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80049be:	3339      	adds	r3, #57	; 0x39
 80049c0:	2201      	movs	r2, #1
 80049c2:	54e2      	strb	r2, [r4, r3]
 80049c4:	e7e7      	b.n	8004996 <TIM_DMAError+0x2c>
	...

080049c8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80049c8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ca:	4a36      	ldr	r2, [pc, #216]	; (8004aa4 <TIM_Base_SetConfig+0xdc>)
 80049cc:	4290      	cmp	r0, r2
 80049ce:	d03a      	beq.n	8004a46 <TIM_Base_SetConfig+0x7e>
 80049d0:	2280      	movs	r2, #128	; 0x80
 80049d2:	05d2      	lsls	r2, r2, #23
 80049d4:	4290      	cmp	r0, r2
 80049d6:	d053      	beq.n	8004a80 <TIM_Base_SetConfig+0xb8>
 80049d8:	4a33      	ldr	r2, [pc, #204]	; (8004aa8 <TIM_Base_SetConfig+0xe0>)
 80049da:	4290      	cmp	r0, r2
 80049dc:	d02e      	beq.n	8004a3c <TIM_Base_SetConfig+0x74>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	4a33      	ldr	r2, [pc, #204]	; (8004aac <TIM_Base_SetConfig+0xe4>)
 80049e0:	4290      	cmp	r0, r2
 80049e2:	d051      	beq.n	8004a88 <TIM_Base_SetConfig+0xc0>
 80049e4:	4a32      	ldr	r2, [pc, #200]	; (8004ab0 <TIM_Base_SetConfig+0xe8>)
 80049e6:	4290      	cmp	r0, r2
 80049e8:	d00c      	beq.n	8004a04 <TIM_Base_SetConfig+0x3c>
 80049ea:	4a32      	ldr	r2, [pc, #200]	; (8004ab4 <TIM_Base_SetConfig+0xec>)
 80049ec:	4290      	cmp	r0, r2
 80049ee:	d017      	beq.n	8004a20 <TIM_Base_SetConfig+0x58>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	4393      	bics	r3, r2
 80049f4:	694a      	ldr	r2, [r1, #20]
 80049f6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80049f8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fa:	688b      	ldr	r3, [r1, #8]
 80049fc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049fe:	680b      	ldr	r3, [r1, #0]
 8004a00:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a02:	e033      	b.n	8004a6c <TIM_Base_SetConfig+0xa4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a04:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a06:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a08:	68ca      	ldr	r2, [r1, #12]
 8004a0a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	4393      	bics	r3, r2
 8004a10:	694a      	ldr	r2, [r1, #20]
 8004a12:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a14:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a16:	688b      	ldr	r3, [r1, #8]
 8004a18:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a1a:	680b      	ldr	r3, [r1, #0]
 8004a1c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a1e:	e023      	b.n	8004a68 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a20:	4a25      	ldr	r2, [pc, #148]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a22:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a24:	68ca      	ldr	r2, [r1, #12]
 8004a26:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	4393      	bics	r3, r2
 8004a2c:	694a      	ldr	r2, [r1, #20]
 8004a2e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a30:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a32:	688b      	ldr	r3, [r1, #8]
 8004a34:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a36:	680b      	ldr	r3, [r1, #0]
 8004a38:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a3a:	e015      	b.n	8004a68 <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a3c:	2270      	movs	r2, #112	; 0x70
 8004a3e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004a40:	684a      	ldr	r2, [r1, #4]
 8004a42:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a44:	e020      	b.n	8004a88 <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a46:	2270      	movs	r2, #112	; 0x70
 8004a48:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004a4a:	684a      	ldr	r2, [r1, #4]
 8004a4c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a50:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	68ca      	ldr	r2, [r1, #12]
 8004a54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	4393      	bics	r3, r2
 8004a5a:	694a      	ldr	r2, [r1, #20]
 8004a5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	688b      	ldr	r3, [r1, #8]
 8004a62:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a64:	680b      	ldr	r3, [r1, #0]
 8004a66:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	690b      	ldr	r3, [r1, #16]
 8004a6a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a70:	6902      	ldr	r2, [r0, #16]
 8004a72:	4213      	tst	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0xb6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a76:	6903      	ldr	r3, [r0, #16]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	4393      	bics	r3, r2
 8004a7c:	6103      	str	r3, [r0, #16]
}
 8004a7e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a80:	2270      	movs	r2, #112	; 0x70
 8004a82:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004a84:	684a      	ldr	r2, [r1, #4]
 8004a86:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a88:	4a0b      	ldr	r2, [pc, #44]	; (8004ab8 <TIM_Base_SetConfig+0xf0>)
 8004a8a:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8c:	68ca      	ldr	r2, [r1, #12]
 8004a8e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	4393      	bics	r3, r2
 8004a94:	694a      	ldr	r2, [r1, #20]
 8004a96:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004a98:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a9a:	688b      	ldr	r3, [r1, #8]
 8004a9c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a9e:	680b      	ldr	r3, [r1, #0]
 8004aa0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa2:	e7e3      	b.n	8004a6c <TIM_Base_SetConfig+0xa4>
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	40000400 	.word	0x40000400
 8004aac:	40002000 	.word	0x40002000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800
 8004ab8:	fffffcff 	.word	0xfffffcff

08004abc <HAL_TIM_PWM_Init>:
{
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004ac0:	d02a      	beq.n	8004b18 <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ac2:	233d      	movs	r3, #61	; 0x3d
 8004ac4:	5cc3      	ldrb	r3, [r0, r3]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_PWM_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004aca:	253d      	movs	r5, #61	; 0x3d
 8004acc:	2302      	movs	r3, #2
 8004ace:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad0:	0021      	movs	r1, r4
 8004ad2:	c901      	ldmia	r1!, {r0}
 8004ad4:	f7ff ff78 	bl	80049c8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	2248      	movs	r2, #72	; 0x48
 8004adc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ade:	3a0a      	subs	r2, #10
 8004ae0:	54a3      	strb	r3, [r4, r2]
 8004ae2:	3201      	adds	r2, #1
 8004ae4:	54a3      	strb	r3, [r4, r2]
 8004ae6:	3201      	adds	r2, #1
 8004ae8:	54a3      	strb	r3, [r4, r2]
 8004aea:	3201      	adds	r2, #1
 8004aec:	54a3      	strb	r3, [r4, r2]
 8004aee:	3201      	adds	r2, #1
 8004af0:	54a3      	strb	r3, [r4, r2]
 8004af2:	3201      	adds	r2, #1
 8004af4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	3201      	adds	r2, #1
 8004af8:	54a3      	strb	r3, [r4, r2]
 8004afa:	3201      	adds	r2, #1
 8004afc:	54a3      	strb	r3, [r4, r2]
 8004afe:	3201      	adds	r2, #1
 8004b00:	54a3      	strb	r3, [r4, r2]
 8004b02:	3201      	adds	r2, #1
 8004b04:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004b08:	2000      	movs	r0, #0
}
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b0c:	333c      	adds	r3, #60	; 0x3c
 8004b0e:	2200      	movs	r2, #0
 8004b10:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004b12:	f7fe fe7b 	bl	800380c <HAL_TIM_PWM_MspInit>
 8004b16:	e7d8      	b.n	8004aca <HAL_TIM_PWM_Init+0xe>
    return HAL_ERROR;
 8004b18:	2001      	movs	r0, #1
 8004b1a:	e7f6      	b.n	8004b0a <HAL_TIM_PWM_Init+0x4e>

08004b1c <TIM_OC2_SetConfig>:
{
 8004b1c:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8004b1e:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b20:	6a03      	ldr	r3, [r0, #32]
 8004b22:	2410      	movs	r4, #16
 8004b24:	43a3      	bics	r3, r4
 8004b26:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004b28:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b2a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b2c:	4c14      	ldr	r4, [pc, #80]	; (8004b80 <TIM_OC2_SetConfig+0x64>)
 8004b2e:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	680c      	ldr	r4, [r1, #0]
 8004b32:	0224      	lsls	r4, r4, #8
 8004b34:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8004b36:	2420      	movs	r4, #32
 8004b38:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3a:	688c      	ldr	r4, [r1, #8]
 8004b3c:	0124      	lsls	r4, r4, #4
 8004b3e:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b40:	4c10      	ldr	r4, [pc, #64]	; (8004b84 <TIM_OC2_SetConfig+0x68>)
 8004b42:	42a0      	cmp	r0, r4
 8004b44:	d006      	beq.n	8004b54 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	4c10      	ldr	r4, [pc, #64]	; (8004b88 <TIM_OC2_SetConfig+0x6c>)
 8004b48:	42a0      	cmp	r0, r4
 8004b4a:	d00b      	beq.n	8004b64 <TIM_OC2_SetConfig+0x48>
 8004b4c:	4c0f      	ldr	r4, [pc, #60]	; (8004b8c <TIM_OC2_SetConfig+0x70>)
 8004b4e:	42a0      	cmp	r0, r4
 8004b50:	d10f      	bne.n	8004b72 <TIM_OC2_SetConfig+0x56>
 8004b52:	e007      	b.n	8004b64 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b54:	2480      	movs	r4, #128	; 0x80
 8004b56:	43a2      	bics	r2, r4
 8004b58:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b5a:	68ca      	ldr	r2, [r1, #12]
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b60:	2440      	movs	r4, #64	; 0x40
 8004b62:	43a2      	bics	r2, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b64:	4e0a      	ldr	r6, [pc, #40]	; (8004b90 <TIM_OC2_SetConfig+0x74>)
 8004b66:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b68:	698b      	ldr	r3, [r1, #24]
 8004b6a:	694c      	ldr	r4, [r1, #20]
 8004b6c:	4323      	orrs	r3, r4
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 8004b72:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b74:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b76:	684b      	ldr	r3, [r1, #4]
 8004b78:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b7a:	6202      	str	r2, [r0, #32]
}
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	feff8cff 	.word	0xfeff8cff
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800
 8004b90:	fffff3ff 	.word	0xfffff3ff

08004b94 <HAL_TIM_PWM_ConfigChannel>:
{
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	0004      	movs	r4, r0
 8004b98:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8004b9a:	233c      	movs	r3, #60	; 0x3c
 8004b9c:	5cc3      	ldrb	r3, [r0, r3]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d100      	bne.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x10>
 8004ba2:	e092      	b.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x136>
 8004ba4:	233c      	movs	r3, #60	; 0x3c
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 8004baa:	2a14      	cmp	r2, #20
 8004bac:	d900      	bls.n	8004bb0 <HAL_TIM_PWM_ConfigChannel+0x1c>
 8004bae:	e087      	b.n	8004cc0 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004bb0:	0092      	lsls	r2, r2, #2
 8004bb2:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_TIM_PWM_ConfigChannel+0x13c>)
 8004bb4:	589b      	ldr	r3, [r3, r2]
 8004bb6:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bb8:	0029      	movs	r1, r5
 8004bba:	6800      	ldr	r0, [r0, #0]
 8004bbc:	f7ff fd5c 	bl	8004678 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	6993      	ldr	r3, [r2, #24]
 8004bc4:	2108      	movs	r1, #8
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	6993      	ldr	r3, [r2, #24]
 8004bce:	3904      	subs	r1, #4
 8004bd0:	438b      	bics	r3, r1
 8004bd2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd4:	6822      	ldr	r2, [r4, #0]
 8004bd6:	6993      	ldr	r3, [r2, #24]
 8004bd8:	6929      	ldr	r1, [r5, #16]
 8004bda:	430b      	orrs	r3, r1
 8004bdc:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2000      	movs	r0, #0
      break;
 8004be0:	e06f      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be2:	0029      	movs	r1, r5
 8004be4:	6800      	ldr	r0, [r0, #0]
 8004be6:	f7ff ff99 	bl	8004b1c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	6991      	ldr	r1, [r2, #24]
 8004bee:	2380      	movs	r3, #128	; 0x80
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf6:	6822      	ldr	r2, [r4, #0]
 8004bf8:	6993      	ldr	r3, [r2, #24]
 8004bfa:	4936      	ldr	r1, [pc, #216]	; (8004cd4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8004bfc:	400b      	ands	r3, r1
 8004bfe:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	6991      	ldr	r1, [r2, #24]
 8004c04:	692b      	ldr	r3, [r5, #16]
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	430b      	orrs	r3, r1
 8004c0a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0c:	2000      	movs	r0, #0
      break;
 8004c0e:	e058      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c10:	0029      	movs	r1, r5
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	f7ff fd74 	bl	8004700 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c18:	6822      	ldr	r2, [r4, #0]
 8004c1a:	69d3      	ldr	r3, [r2, #28]
 8004c1c:	2108      	movs	r1, #8
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	69d3      	ldr	r3, [r2, #28]
 8004c26:	3904      	subs	r1, #4
 8004c28:	438b      	bics	r3, r1
 8004c2a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	69d3      	ldr	r3, [r2, #28]
 8004c30:	6929      	ldr	r1, [r5, #16]
 8004c32:	430b      	orrs	r3, r1
 8004c34:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2000      	movs	r0, #0
      break;
 8004c38:	e043      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c3a:	0029      	movs	r1, r5
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f7ff fda1 	bl	8004784 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c42:	6822      	ldr	r2, [r4, #0]
 8004c44:	69d1      	ldr	r1, [r2, #28]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	6822      	ldr	r2, [r4, #0]
 8004c50:	69d3      	ldr	r3, [r2, #28]
 8004c52:	4920      	ldr	r1, [pc, #128]	; (8004cd4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c58:	6822      	ldr	r2, [r4, #0]
 8004c5a:	69d1      	ldr	r1, [r2, #28]
 8004c5c:	692b      	ldr	r3, [r5, #16]
 8004c5e:	021b      	lsls	r3, r3, #8
 8004c60:	430b      	orrs	r3, r1
 8004c62:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2000      	movs	r0, #0
      break;
 8004c66:	e02c      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c68:	0029      	movs	r1, r5
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	f7ff fdbe 	bl	80047ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004c74:	2108      	movs	r1, #8
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004c7e:	3904      	subs	r1, #4
 8004c80:	438b      	bics	r3, r1
 8004c82:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c84:	6822      	ldr	r2, [r4, #0]
 8004c86:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004c88:	6929      	ldr	r1, [r5, #16]
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004c8e:	2000      	movs	r0, #0
      break;
 8004c90:	e017      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c92:	0029      	movs	r1, r5
 8004c94:	6800      	ldr	r0, [r0, #0]
 8004c96:	f7ff fddb 	bl	8004850 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004caa:	490a      	ldr	r1, [pc, #40]	; (8004cd4 <HAL_TIM_PWM_ConfigChannel+0x140>)
 8004cac:	400b      	ands	r3, r1
 8004cae:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004cb4:	692b      	ldr	r3, [r5, #16]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004cbc:	2000      	movs	r0, #0
      break;
 8004cbe:	e000      	b.n	8004cc2 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004cc0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004cc2:	233c      	movs	r3, #60	; 0x3c
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	54e2      	strb	r2, [r4, r3]
}
 8004cc8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8004cca:	2002      	movs	r0, #2
 8004ccc:	e7fc      	b.n	8004cc8 <HAL_TIM_PWM_ConfigChannel+0x134>
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	08005798 	.word	0x08005798
 8004cd4:	fffffbff 	.word	0xfffffbff

08004cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cda:	231f      	movs	r3, #31
 8004cdc:	4019      	ands	r1, r3

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cde:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ce0:	2401      	movs	r4, #1
 8004ce2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004ce4:	43a3      	bics	r3, r4
 8004ce6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce8:	6a03      	ldr	r3, [r0, #32]
 8004cea:	408a      	lsls	r2, r1
 8004cec:	431a      	orrs	r2, r3
 8004cee:	6202      	str	r2, [r0, #32]
}
 8004cf0:	bd10      	pop	{r4, pc}
	...

08004cf4 <HAL_TIM_PWM_Stop>:
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	0004      	movs	r4, r0
 8004cf8:	000d      	movs	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6800      	ldr	r0, [r0, #0]
 8004cfe:	f7ff ffeb 	bl	8004cd8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	4a22      	ldr	r2, [pc, #136]	; (8004d90 <HAL_TIM_PWM_Stop+0x9c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d019      	beq.n	8004d3e <HAL_TIM_PWM_Stop+0x4a>
 8004d0a:	4a22      	ldr	r2, [pc, #136]	; (8004d94 <HAL_TIM_PWM_Stop+0xa0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d016      	beq.n	8004d3e <HAL_TIM_PWM_Stop+0x4a>
 8004d10:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <HAL_TIM_PWM_Stop+0xa4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIM_PWM_Stop+0x4a>
  __HAL_TIM_DISABLE(htim);
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	6a19      	ldr	r1, [r3, #32]
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_TIM_PWM_Stop+0xa8>)
 8004d1c:	4211      	tst	r1, r2
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_PWM_Stop+0x3c>
 8004d20:	6a19      	ldr	r1, [r3, #32]
 8004d22:	4a1f      	ldr	r2, [pc, #124]	; (8004da0 <HAL_TIM_PWM_Stop+0xac>)
 8004d24:	4211      	tst	r1, r2
 8004d26:	d103      	bne.n	8004d30 <HAL_TIM_PWM_Stop+0x3c>
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	d111      	bne.n	8004d58 <HAL_TIM_PWM_Stop+0x64>
 8004d34:	233e      	movs	r3, #62	; 0x3e
 8004d36:	2201      	movs	r2, #1
 8004d38:	54e2      	strb	r2, [r4, r3]
}
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8004d3e:	6a19      	ldr	r1, [r3, #32]
 8004d40:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_TIM_PWM_Stop+0xa8>)
 8004d42:	4211      	tst	r1, r2
 8004d44:	d1e7      	bne.n	8004d16 <HAL_TIM_PWM_Stop+0x22>
 8004d46:	6a19      	ldr	r1, [r3, #32]
 8004d48:	4a15      	ldr	r2, [pc, #84]	; (8004da0 <HAL_TIM_PWM_Stop+0xac>)
 8004d4a:	4211      	tst	r1, r2
 8004d4c:	d1e3      	bne.n	8004d16 <HAL_TIM_PWM_Stop+0x22>
 8004d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d50:	4914      	ldr	r1, [pc, #80]	; (8004da4 <HAL_TIM_PWM_Stop+0xb0>)
 8004d52:	400a      	ands	r2, r1
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
 8004d56:	e7de      	b.n	8004d16 <HAL_TIM_PWM_Stop+0x22>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	2d04      	cmp	r5, #4
 8004d5a:	d009      	beq.n	8004d70 <HAL_TIM_PWM_Stop+0x7c>
 8004d5c:	2d08      	cmp	r5, #8
 8004d5e:	d00b      	beq.n	8004d78 <HAL_TIM_PWM_Stop+0x84>
 8004d60:	2d0c      	cmp	r5, #12
 8004d62:	d00d      	beq.n	8004d80 <HAL_TIM_PWM_Stop+0x8c>
 8004d64:	2d10      	cmp	r5, #16
 8004d66:	d00f      	beq.n	8004d88 <HAL_TIM_PWM_Stop+0x94>
 8004d68:	2343      	movs	r3, #67	; 0x43
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	54e2      	strb	r2, [r4, r3]
 8004d6e:	e7e4      	b.n	8004d3a <HAL_TIM_PWM_Stop+0x46>
 8004d70:	233f      	movs	r3, #63	; 0x3f
 8004d72:	2201      	movs	r2, #1
 8004d74:	54e2      	strb	r2, [r4, r3]
 8004d76:	e7e0      	b.n	8004d3a <HAL_TIM_PWM_Stop+0x46>
 8004d78:	2340      	movs	r3, #64	; 0x40
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	54e2      	strb	r2, [r4, r3]
 8004d7e:	e7dc      	b.n	8004d3a <HAL_TIM_PWM_Stop+0x46>
 8004d80:	2341      	movs	r3, #65	; 0x41
 8004d82:	2201      	movs	r2, #1
 8004d84:	54e2      	strb	r2, [r4, r3]
 8004d86:	e7d8      	b.n	8004d3a <HAL_TIM_PWM_Stop+0x46>
 8004d88:	2342      	movs	r3, #66	; 0x42
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	54e2      	strb	r2, [r4, r3]
 8004d8e:	e7d4      	b.n	8004d3a <HAL_TIM_PWM_Stop+0x46>
 8004d90:	40012c00 	.word	0x40012c00
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800
 8004d9c:	00001111 	.word	0x00001111
 8004da0:	00000444 	.word	0x00000444
 8004da4:	ffff7fff 	.word	0xffff7fff

08004da8 <HAL_TIM_PWM_Start_DMA>:
{
 8004da8:	b570      	push	{r4, r5, r6, lr}
 8004daa:	0006      	movs	r6, r0
 8004dac:	000d      	movs	r5, r1
 8004dae:	0011      	movs	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004db0:	2d00      	cmp	r5, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_TIM_PWM_Start_DMA+0x20>
 8004db4:	223e      	movs	r2, #62	; 0x3e
 8004db6:	5c84      	ldrb	r4, [r0, r2]
 8004db8:	3c02      	subs	r4, #2
 8004dba:	4262      	negs	r2, r4
 8004dbc:	4154      	adcs	r4, r2
 8004dbe:	b2e4      	uxtb	r4, r4
 8004dc0:	2c00      	cmp	r4, #0
 8004dc2:	d02c      	beq.n	8004e1e <HAL_TIM_PWM_Start_DMA+0x76>
    return HAL_BUSY;
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	e11f      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004dc8:	2d04      	cmp	r5, #4
 8004dca:	d00c      	beq.n	8004de6 <HAL_TIM_PWM_Start_DMA+0x3e>
 8004dcc:	2d08      	cmp	r5, #8
 8004dce:	d011      	beq.n	8004df4 <HAL_TIM_PWM_Start_DMA+0x4c>
 8004dd0:	2d0c      	cmp	r5, #12
 8004dd2:	d016      	beq.n	8004e02 <HAL_TIM_PWM_Start_DMA+0x5a>
 8004dd4:	2d10      	cmp	r5, #16
 8004dd6:	d01b      	beq.n	8004e10 <HAL_TIM_PWM_Start_DMA+0x68>
 8004dd8:	2243      	movs	r2, #67	; 0x43
 8004dda:	5c84      	ldrb	r4, [r0, r2]
 8004ddc:	3c02      	subs	r4, #2
 8004dde:	4262      	negs	r2, r4
 8004de0:	4154      	adcs	r4, r2
 8004de2:	b2e4      	uxtb	r4, r4
 8004de4:	e7ec      	b.n	8004dc0 <HAL_TIM_PWM_Start_DMA+0x18>
 8004de6:	223f      	movs	r2, #63	; 0x3f
 8004de8:	5c84      	ldrb	r4, [r0, r2]
 8004dea:	3c02      	subs	r4, #2
 8004dec:	4262      	negs	r2, r4
 8004dee:	4154      	adcs	r4, r2
 8004df0:	b2e4      	uxtb	r4, r4
 8004df2:	e7e5      	b.n	8004dc0 <HAL_TIM_PWM_Start_DMA+0x18>
 8004df4:	2240      	movs	r2, #64	; 0x40
 8004df6:	5c84      	ldrb	r4, [r0, r2]
 8004df8:	3c02      	subs	r4, #2
 8004dfa:	4262      	negs	r2, r4
 8004dfc:	4154      	adcs	r4, r2
 8004dfe:	b2e4      	uxtb	r4, r4
 8004e00:	e7de      	b.n	8004dc0 <HAL_TIM_PWM_Start_DMA+0x18>
 8004e02:	2241      	movs	r2, #65	; 0x41
 8004e04:	5c84      	ldrb	r4, [r0, r2]
 8004e06:	3c02      	subs	r4, #2
 8004e08:	4262      	negs	r2, r4
 8004e0a:	4154      	adcs	r4, r2
 8004e0c:	b2e4      	uxtb	r4, r4
 8004e0e:	e7d7      	b.n	8004dc0 <HAL_TIM_PWM_Start_DMA+0x18>
 8004e10:	2242      	movs	r2, #66	; 0x42
 8004e12:	5c84      	ldrb	r4, [r0, r2]
 8004e14:	3c02      	subs	r4, #2
 8004e16:	4262      	negs	r2, r4
 8004e18:	4154      	adcs	r4, r2
 8004e1a:	b2e4      	uxtb	r4, r4
 8004e1c:	e7d0      	b.n	8004dc0 <HAL_TIM_PWM_Start_DMA+0x18>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d153      	bne.n	8004eca <HAL_TIM_PWM_Start_DMA+0x122>
 8004e22:	223e      	movs	r2, #62	; 0x3e
 8004e24:	5cb2      	ldrb	r2, [r6, r2]
 8004e26:	3a01      	subs	r2, #1
 8004e28:	4250      	negs	r0, r2
 8004e2a:	4142      	adcs	r2, r0
 8004e2c:	b2d2      	uxtb	r2, r2
    return HAL_ERROR;
 8004e2e:	2001      	movs	r0, #1
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	d100      	bne.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x8e>
 8004e34:	e0e8      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
    if ((pData == NULL) || (Length == 0U))
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d100      	bne.n	8004e3c <HAL_TIM_PWM_Start_DMA+0x94>
 8004e3a:	e0e2      	b.n	8005002 <HAL_TIM_PWM_Start_DMA+0x25a>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d100      	bne.n	8004e42 <HAL_TIM_PWM_Start_DMA+0x9a>
 8004e40:	e0e1      	b.n	8005006 <HAL_TIM_PWM_Start_DMA+0x25e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	d16f      	bne.n	8004f26 <HAL_TIM_PWM_Start_DMA+0x17e>
 8004e46:	223e      	movs	r2, #62	; 0x3e
 8004e48:	2002      	movs	r0, #2
 8004e4a:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e4c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004e4e:	4875      	ldr	r0, [pc, #468]	; (8005024 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8004e50:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e52:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004e54:	4874      	ldr	r0, [pc, #464]	; (8005028 <HAL_TIM_PWM_Start_DMA+0x280>)
 8004e56:	6310      	str	r0, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004e58:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8004e5a:	4874      	ldr	r0, [pc, #464]	; (800502c <HAL_TIM_PWM_Start_DMA+0x284>)
 8004e5c:	6350      	str	r0, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004e5e:	6832      	ldr	r2, [r6, #0]
 8004e60:	3234      	adds	r2, #52	; 0x34
 8004e62:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8004e64:	f7ff f90c 	bl	8004080 <HAL_DMA_Start_IT>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d000      	beq.n	8004e6e <HAL_TIM_PWM_Start_DMA+0xc6>
 8004e6c:	e0cd      	b.n	800500a <HAL_TIM_PWM_Start_DMA+0x262>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004e6e:	6832      	ldr	r2, [r6, #0]
 8004e70:	68d1      	ldr	r1, [r2, #12]
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	430b      	orrs	r3, r1
 8004e78:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	0029      	movs	r1, r5
 8004e7e:	6830      	ldr	r0, [r6, #0]
 8004e80:	f7ff ff2a 	bl	8004cd8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e84:	6833      	ldr	r3, [r6, #0]
 8004e86:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x288>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d005      	beq.n	8004e98 <HAL_TIM_PWM_Start_DMA+0xf0>
 8004e8c:	4a69      	ldr	r2, [pc, #420]	; (8005034 <HAL_TIM_PWM_Start_DMA+0x28c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d002      	beq.n	8004e98 <HAL_TIM_PWM_Start_DMA+0xf0>
 8004e92:	4a69      	ldr	r2, [pc, #420]	; (8005038 <HAL_TIM_PWM_Start_DMA+0x290>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d109      	bne.n	8004eac <HAL_TIM_PWM_Start_DMA+0x104>
      __HAL_TIM_MOE_ENABLE(htim);
 8004e98:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e9a:	2280      	movs	r2, #128	; 0x80
 8004e9c:	0212      	lsls	r2, r2, #8
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	6833      	ldr	r3, [r6, #0]
 8004ea4:	4a62      	ldr	r2, [pc, #392]	; (8005030 <HAL_TIM_PWM_Start_DMA+0x288>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d100      	bne.n	8004eac <HAL_TIM_PWM_Start_DMA+0x104>
 8004eaa:	e09c      	b.n	8004fe6 <HAL_TIM_PWM_Start_DMA+0x23e>
 8004eac:	2280      	movs	r2, #128	; 0x80
 8004eae:	05d2      	lsls	r2, r2, #23
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8004eb4:	e097      	b.n	8004fe6 <HAL_TIM_PWM_Start_DMA+0x23e>
 8004eb6:	4a61      	ldr	r2, [pc, #388]	; (800503c <HAL_TIM_PWM_Start_DMA+0x294>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d100      	bne.n	8004ebe <HAL_TIM_PWM_Start_DMA+0x116>
 8004ebc:	e093      	b.n	8004fe6 <HAL_TIM_PWM_Start_DMA+0x23e>
      __HAL_TIM_ENABLE(htim);
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e09e      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	2d04      	cmp	r5, #4
 8004ecc:	d00f      	beq.n	8004eee <HAL_TIM_PWM_Start_DMA+0x146>
 8004ece:	2d08      	cmp	r5, #8
 8004ed0:	d014      	beq.n	8004efc <HAL_TIM_PWM_Start_DMA+0x154>
 8004ed2:	2d0c      	cmp	r5, #12
 8004ed4:	d019      	beq.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x162>
 8004ed6:	2d10      	cmp	r5, #16
 8004ed8:	d01e      	beq.n	8004f18 <HAL_TIM_PWM_Start_DMA+0x170>
 8004eda:	2243      	movs	r2, #67	; 0x43
 8004edc:	5cb2      	ldrb	r2, [r6, r2]
 8004ede:	3a01      	subs	r2, #1
 8004ee0:	4250      	negs	r0, r2
 8004ee2:	4142      	adcs	r2, r0
 8004ee4:	b2d2      	uxtb	r2, r2
    return HAL_ERROR;
 8004ee6:	2001      	movs	r0, #1
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ee8:	2a00      	cmp	r2, #0
 8004eea:	d1a4      	bne.n	8004e36 <HAL_TIM_PWM_Start_DMA+0x8e>
 8004eec:	e08c      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 8004eee:	223f      	movs	r2, #63	; 0x3f
 8004ef0:	5cb2      	ldrb	r2, [r6, r2]
 8004ef2:	3a01      	subs	r2, #1
 8004ef4:	4250      	negs	r0, r2
 8004ef6:	4142      	adcs	r2, r0
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	e798      	b.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x86>
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	5cb2      	ldrb	r2, [r6, r2]
 8004f00:	3a01      	subs	r2, #1
 8004f02:	4250      	negs	r0, r2
 8004f04:	4142      	adcs	r2, r0
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	e791      	b.n	8004e2e <HAL_TIM_PWM_Start_DMA+0x86>
 8004f0a:	2241      	movs	r2, #65	; 0x41
 8004f0c:	5cb2      	ldrb	r2, [r6, r2]
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	4250      	negs	r0, r2
 8004f12:	4142      	adcs	r2, r0
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	e7e6      	b.n	8004ee6 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f18:	2242      	movs	r2, #66	; 0x42
 8004f1a:	5cb2      	ldrb	r2, [r6, r2]
 8004f1c:	3a01      	subs	r2, #1
 8004f1e:	4250      	negs	r0, r2
 8004f20:	4142      	adcs	r2, r0
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	e7df      	b.n	8004ee6 <HAL_TIM_PWM_Start_DMA+0x13e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f26:	2d04      	cmp	r5, #4
 8004f28:	d00a      	beq.n	8004f40 <HAL_TIM_PWM_Start_DMA+0x198>
 8004f2a:	2d08      	cmp	r5, #8
 8004f2c:	d022      	beq.n	8004f74 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8004f2e:	2d0c      	cmp	r5, #12
 8004f30:	d03a      	beq.n	8004fa8 <HAL_TIM_PWM_Start_DMA+0x200>
 8004f32:	2d10      	cmp	r5, #16
 8004f34:	d052      	beq.n	8004fdc <HAL_TIM_PWM_Start_DMA+0x234>
 8004f36:	2343      	movs	r3, #67	; 0x43
 8004f38:	2202      	movs	r2, #2
 8004f3a:	54f2      	strb	r2, [r6, r3]
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	e063      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 8004f40:	223f      	movs	r2, #63	; 0x3f
 8004f42:	2002      	movs	r0, #2
 8004f44:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f46:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004f48:	4836      	ldr	r0, [pc, #216]	; (8005024 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8004f4a:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f4c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004f4e:	4836      	ldr	r0, [pc, #216]	; (8005028 <HAL_TIM_PWM_Start_DMA+0x280>)
 8004f50:	6310      	str	r0, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004f52:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8004f54:	4835      	ldr	r0, [pc, #212]	; (800502c <HAL_TIM_PWM_Start_DMA+0x284>)
 8004f56:	6350      	str	r0, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004f58:	6832      	ldr	r2, [r6, #0]
 8004f5a:	3238      	adds	r2, #56	; 0x38
 8004f5c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8004f5e:	f7ff f88f 	bl	8004080 <HAL_DMA_Start_IT>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d153      	bne.n	800500e <HAL_TIM_PWM_Start_DMA+0x266>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004f66:	6832      	ldr	r2, [r6, #0]
 8004f68:	68d1      	ldr	r1, [r2, #12]
 8004f6a:	2380      	movs	r3, #128	; 0x80
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004f72:	e782      	b.n	8004e7a <HAL_TIM_PWM_Start_DMA+0xd2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f74:	2240      	movs	r2, #64	; 0x40
 8004f76:	2002      	movs	r0, #2
 8004f78:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004f7a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004f7c:	4829      	ldr	r0, [pc, #164]	; (8005024 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8004f7e:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004f80:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004f82:	4829      	ldr	r0, [pc, #164]	; (8005028 <HAL_TIM_PWM_Start_DMA+0x280>)
 8004f84:	6310      	str	r0, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004f86:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004f88:	4828      	ldr	r0, [pc, #160]	; (800502c <HAL_TIM_PWM_Start_DMA+0x284>)
 8004f8a:	6350      	str	r0, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004f8c:	6832      	ldr	r2, [r6, #0]
 8004f8e:	323c      	adds	r2, #60	; 0x3c
 8004f90:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004f92:	f7ff f875 	bl	8004080 <HAL_DMA_Start_IT>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d13b      	bne.n	8005012 <HAL_TIM_PWM_Start_DMA+0x26a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004f9a:	6832      	ldr	r2, [r6, #0]
 8004f9c:	68d1      	ldr	r1, [r2, #12]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004fa6:	e768      	b.n	8004e7a <HAL_TIM_PWM_Start_DMA+0xd2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa8:	2241      	movs	r2, #65	; 0x41
 8004faa:	2002      	movs	r0, #2
 8004fac:	54b0      	strb	r0, [r6, r2]
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004fae:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004fb0:	481c      	ldr	r0, [pc, #112]	; (8005024 <HAL_TIM_PWM_Start_DMA+0x27c>)
 8004fb2:	62d0      	str	r0, [r2, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004fb4:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004fb6:	481c      	ldr	r0, [pc, #112]	; (8005028 <HAL_TIM_PWM_Start_DMA+0x280>)
 8004fb8:	6310      	str	r0, [r2, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004fba:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8004fbc:	481b      	ldr	r0, [pc, #108]	; (800502c <HAL_TIM_PWM_Start_DMA+0x284>)
 8004fbe:	6350      	str	r0, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004fc0:	6832      	ldr	r2, [r6, #0]
 8004fc2:	3240      	adds	r2, #64	; 0x40
 8004fc4:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8004fc6:	f7ff f85b 	bl	8004080 <HAL_DMA_Start_IT>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d123      	bne.n	8005016 <HAL_TIM_PWM_Start_DMA+0x26e>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004fce:	6832      	ldr	r2, [r6, #0]
 8004fd0:	68d1      	ldr	r1, [r2, #12]
 8004fd2:	2380      	movs	r3, #128	; 0x80
 8004fd4:	015b      	lsls	r3, r3, #5
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004fda:	e74e      	b.n	8004e7a <HAL_TIM_PWM_Start_DMA+0xd2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fdc:	2342      	movs	r3, #66	; 0x42
 8004fde:	2202      	movs	r2, #2
 8004fe0:	54f2      	strb	r2, [r6, r3]
      status = HAL_ERROR;
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e010      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	4915      	ldr	r1, [pc, #84]	; (8005040 <HAL_TIM_PWM_Start_DMA+0x298>)
 8004fea:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fec:	2a06      	cmp	r2, #6
 8004fee:	d014      	beq.n	800501a <HAL_TIM_PWM_Start_DMA+0x272>
 8004ff0:	3907      	subs	r1, #7
 8004ff2:	428a      	cmp	r2, r1
 8004ff4:	d013      	beq.n	800501e <HAL_TIM_PWM_Start_DMA+0x276>
        __HAL_TIM_ENABLE(htim);
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	2101      	movs	r1, #1
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	e002      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
      return HAL_ERROR;
 8005002:	2001      	movs	r0, #1
 8005004:	e000      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 8005006:	2001      	movs	r0, #1
}
 8005008:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800500a:	2001      	movs	r0, #1
 800500c:	e7fc      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
        return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
 8005010:	e7fa      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
        return HAL_ERROR;
 8005012:	2001      	movs	r0, #1
 8005014:	e7f8      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
        return HAL_ERROR;
 8005016:	2001      	movs	r0, #1
 8005018:	e7f6      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 800501a:	2000      	movs	r0, #0
 800501c:	e7f4      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 800501e:	2000      	movs	r0, #0
 8005020:	e7f2      	b.n	8005008 <HAL_TIM_PWM_Start_DMA+0x260>
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	080048b9 	.word	0x080048b9
 8005028:	0800492b 	.word	0x0800492b
 800502c:	0800496b 	.word	0x0800496b
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40014400 	.word	0x40014400
 8005038:	40014800 	.word	0x40014800
 800503c:	40000400 	.word	0x40000400
 8005040:	00010007 	.word	0x00010007

08005044 <HAL_TIM_PWM_Stop_DMA>:
{
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	0005      	movs	r5, r0
 8005048:	000c      	movs	r4, r1
  switch (Channel)
 800504a:	2908      	cmp	r1, #8
 800504c:	d045      	beq.n	80050da <HAL_TIM_PWM_Stop_DMA+0x96>
 800504e:	d80d      	bhi.n	800506c <HAL_TIM_PWM_Stop_DMA+0x28>
 8005050:	2900      	cmp	r1, #0
 8005052:	d017      	beq.n	8005084 <HAL_TIM_PWM_Stop_DMA+0x40>
 8005054:	2001      	movs	r0, #1
 8005056:	2904      	cmp	r1, #4
 8005058:	d13e      	bne.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800505a:	682a      	ldr	r2, [r5, #0]
 800505c:	68d3      	ldr	r3, [r2, #12]
 800505e:	493a      	ldr	r1, [pc, #232]	; (8005148 <HAL_TIM_PWM_Stop_DMA+0x104>)
 8005060:	400b      	ands	r3, r1
 8005062:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005064:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8005066:	f7ff f859 	bl	800411c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 800506a:	e013      	b.n	8005094 <HAL_TIM_PWM_Stop_DMA+0x50>
  switch (Channel)
 800506c:	2001      	movs	r0, #1
 800506e:	290c      	cmp	r1, #12
 8005070:	d132      	bne.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005072:	682a      	ldr	r2, [r5, #0]
 8005074:	68d3      	ldr	r3, [r2, #12]
 8005076:	4935      	ldr	r1, [pc, #212]	; (800514c <HAL_TIM_PWM_Stop_DMA+0x108>)
 8005078:	400b      	ands	r3, r1
 800507a:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800507c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800507e:	f7ff f84d 	bl	800411c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 8005082:	e007      	b.n	8005094 <HAL_TIM_PWM_Stop_DMA+0x50>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005084:	6802      	ldr	r2, [r0, #0]
 8005086:	68d3      	ldr	r3, [r2, #12]
 8005088:	4931      	ldr	r1, [pc, #196]	; (8005150 <HAL_TIM_PWM_Stop_DMA+0x10c>)
 800508a:	400b      	ands	r3, r1
 800508c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800508e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005090:	f7ff f844 	bl	800411c <HAL_DMA_Abort_IT>
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005094:	2200      	movs	r2, #0
 8005096:	0021      	movs	r1, r4
 8005098:	6828      	ldr	r0, [r5, #0]
 800509a:	f7ff fe1d 	bl	8004cd8 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800509e:	682b      	ldr	r3, [r5, #0]
 80050a0:	4a2c      	ldr	r2, [pc, #176]	; (8005154 <HAL_TIM_PWM_Stop_DMA+0x110>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d022      	beq.n	80050ec <HAL_TIM_PWM_Stop_DMA+0xa8>
 80050a6:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <HAL_TIM_PWM_Stop_DMA+0x114>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01f      	beq.n	80050ec <HAL_TIM_PWM_Stop_DMA+0xa8>
 80050ac:	4a2b      	ldr	r2, [pc, #172]	; (800515c <HAL_TIM_PWM_Stop_DMA+0x118>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01c      	beq.n	80050ec <HAL_TIM_PWM_Stop_DMA+0xa8>
    __HAL_TIM_DISABLE(htim);
 80050b2:	682b      	ldr	r3, [r5, #0]
 80050b4:	6a19      	ldr	r1, [r3, #32]
 80050b6:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <HAL_TIM_PWM_Stop_DMA+0x11c>)
 80050b8:	4211      	tst	r1, r2
 80050ba:	d107      	bne.n	80050cc <HAL_TIM_PWM_Stop_DMA+0x88>
 80050bc:	6a19      	ldr	r1, [r3, #32]
 80050be:	4a29      	ldr	r2, [pc, #164]	; (8005164 <HAL_TIM_PWM_Stop_DMA+0x120>)
 80050c0:	4211      	tst	r1, r2
 80050c2:	d103      	bne.n	80050cc <HAL_TIM_PWM_Stop_DMA+0x88>
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2101      	movs	r1, #1
 80050c8:	438a      	bics	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	2c00      	cmp	r4, #0
 80050ce:	d11a      	bne.n	8005106 <HAL_TIM_PWM_Stop_DMA+0xc2>
 80050d0:	233e      	movs	r3, #62	; 0x3e
 80050d2:	2201      	movs	r2, #1
 80050d4:	54ea      	strb	r2, [r5, r3]
 80050d6:	2000      	movs	r0, #0
}
 80050d8:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80050da:	6802      	ldr	r2, [r0, #0]
 80050dc:	68d3      	ldr	r3, [r2, #12]
 80050de:	4922      	ldr	r1, [pc, #136]	; (8005168 <HAL_TIM_PWM_Stop_DMA+0x124>)
 80050e0:	400b      	ands	r3, r1
 80050e2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80050e4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80050e6:	f7ff f819 	bl	800411c <HAL_DMA_Abort_IT>
  if (status == HAL_OK)
 80050ea:	e7d3      	b.n	8005094 <HAL_TIM_PWM_Stop_DMA+0x50>
      __HAL_TIM_MOE_DISABLE(htim);
 80050ec:	6a19      	ldr	r1, [r3, #32]
 80050ee:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <HAL_TIM_PWM_Stop_DMA+0x11c>)
 80050f0:	4211      	tst	r1, r2
 80050f2:	d1de      	bne.n	80050b2 <HAL_TIM_PWM_Stop_DMA+0x6e>
 80050f4:	6a19      	ldr	r1, [r3, #32]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	; (8005164 <HAL_TIM_PWM_Stop_DMA+0x120>)
 80050f8:	4211      	tst	r1, r2
 80050fa:	d1da      	bne.n	80050b2 <HAL_TIM_PWM_Stop_DMA+0x6e>
 80050fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050fe:	491b      	ldr	r1, [pc, #108]	; (800516c <HAL_TIM_PWM_Stop_DMA+0x128>)
 8005100:	400a      	ands	r2, r1
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
 8005104:	e7d5      	b.n	80050b2 <HAL_TIM_PWM_Stop_DMA+0x6e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005106:	2c04      	cmp	r4, #4
 8005108:	d00a      	beq.n	8005120 <HAL_TIM_PWM_Stop_DMA+0xdc>
 800510a:	2c08      	cmp	r4, #8
 800510c:	d00d      	beq.n	800512a <HAL_TIM_PWM_Stop_DMA+0xe6>
 800510e:	2c0c      	cmp	r4, #12
 8005110:	d010      	beq.n	8005134 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8005112:	2c10      	cmp	r4, #16
 8005114:	d013      	beq.n	800513e <HAL_TIM_PWM_Stop_DMA+0xfa>
 8005116:	2343      	movs	r3, #67	; 0x43
 8005118:	2201      	movs	r2, #1
 800511a:	54ea      	strb	r2, [r5, r3]
 800511c:	2000      	movs	r0, #0
 800511e:	e7db      	b.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
 8005120:	233f      	movs	r3, #63	; 0x3f
 8005122:	2201      	movs	r2, #1
 8005124:	54ea      	strb	r2, [r5, r3]
 8005126:	2000      	movs	r0, #0
 8005128:	e7d6      	b.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
 800512a:	2340      	movs	r3, #64	; 0x40
 800512c:	2201      	movs	r2, #1
 800512e:	54ea      	strb	r2, [r5, r3]
 8005130:	2000      	movs	r0, #0
 8005132:	e7d1      	b.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
 8005134:	2341      	movs	r3, #65	; 0x41
 8005136:	2201      	movs	r2, #1
 8005138:	54ea      	strb	r2, [r5, r3]
 800513a:	2000      	movs	r0, #0
 800513c:	e7cc      	b.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
 800513e:	2342      	movs	r3, #66	; 0x42
 8005140:	2201      	movs	r2, #1
 8005142:	54ea      	strb	r2, [r5, r3]
 8005144:	2000      	movs	r0, #0
 8005146:	e7c7      	b.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x94>
 8005148:	fffffbff 	.word	0xfffffbff
 800514c:	ffffefff 	.word	0xffffefff
 8005150:	fffffdff 	.word	0xfffffdff
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40014400 	.word	0x40014400
 800515c:	40014800 	.word	0x40014800
 8005160:	00001111 	.word	0x00001111
 8005164:	00000444 	.word	0x00000444
 8005168:	fffff7ff 	.word	0xfffff7ff
 800516c:	ffff7fff 	.word	0xffff7fff

08005170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005170:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005172:	233c      	movs	r3, #60	; 0x3c
 8005174:	5cc3      	ldrb	r3, [r0, r3]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d02d      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800517a:	233c      	movs	r3, #60	; 0x3c
 800517c:	2201      	movs	r2, #1
 800517e:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	3301      	adds	r3, #1
 8005182:	3201      	adds	r2, #1
 8005184:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005186:	6802      	ldr	r2, [r0, #0]
 8005188:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518a:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800518c:	4d13      	ldr	r5, [pc, #76]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800518e:	42aa      	cmp	r2, r5
 8005190:	d01c      	beq.n	80051cc <HAL_TIMEx_MasterConfigSynchronization+0x5c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005192:	2570      	movs	r5, #112	; 0x70
 8005194:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005196:	680d      	ldr	r5, [r1, #0]
 8005198:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	6803      	ldr	r3, [r0, #0]
 800519e:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d006      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80051a4:	2280      	movs	r2, #128	; 0x80
 80051a6:	05d2      	lsls	r2, r2, #23
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d002      	beq.n	80051b2 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 80051ac:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d104      	bne.n	80051bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051b6:	688a      	ldr	r2, [r1, #8]
 80051b8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ba:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	233d      	movs	r3, #61	; 0x3d
 80051be:	2201      	movs	r2, #1
 80051c0:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80051c2:	3b01      	subs	r3, #1
 80051c4:	2200      	movs	r2, #0
 80051c6:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80051c8:	2000      	movs	r0, #0
}
 80051ca:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051cc:	4d05      	ldr	r5, [pc, #20]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80051ce:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051d0:	684d      	ldr	r5, [r1, #4]
 80051d2:	432b      	orrs	r3, r5
 80051d4:	e7dd      	b.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80051d6:	2002      	movs	r0, #2
 80051d8:	e7f7      	b.n	80051ca <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	40012c00 	.word	0x40012c00
 80051e0:	40000400 	.word	0x40000400
 80051e4:	ff0fffff 	.word	0xff0fffff

080051e8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80051e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ea:	46d6      	mov	lr, sl
 80051ec:	464f      	mov	r7, r9
 80051ee:	4646      	mov	r6, r8
 80051f0:	b5c0      	push	{r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80051f2:	680b      	ldr	r3, [r1, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d058      	beq.n	80052aa <LL_GPIO_Init+0xc2>
  pinpos = 0;
 80051f8:	2200      	movs	r2, #0
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80051fa:	2401      	movs	r4, #1
 80051fc:	46a1      	mov	r9, r4
 80051fe:	e020      	b.n	8005242 <LL_GPIO_Init+0x5a>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8005200:	68c3      	ldr	r3, [r0, #12]
 8005202:	4698      	mov	r8, r3
 8005204:	0023      	movs	r3, r4
 8005206:	4363      	muls	r3, r4
 8005208:	005f      	lsls	r7, r3, #1
 800520a:	46bc      	mov	ip, r7
 800520c:	449c      	add	ip, r3
 800520e:	4665      	mov	r5, ip
 8005210:	43ef      	mvns	r7, r5
 8005212:	690d      	ldr	r5, [r1, #16]
 8005214:	435d      	muls	r5, r3
 8005216:	46aa      	mov	sl, r5
 8005218:	4646      	mov	r6, r8
 800521a:	4665      	mov	r5, ip
 800521c:	43ae      	bics	r6, r5
 800521e:	0035      	movs	r5, r6
 8005220:	4656      	mov	r6, sl
 8005222:	432e      	orrs	r6, r5
 8005224:	60c6      	str	r6, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005226:	684d      	ldr	r5, [r1, #4]
 8005228:	2d02      	cmp	r5, #2
 800522a:	d025      	beq.n	8005278 <LL_GPIO_Init+0x90>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800522c:	6804      	ldr	r4, [r0, #0]
 800522e:	684d      	ldr	r5, [r1, #4]
 8005230:	436b      	muls	r3, r5
 8005232:	4027      	ands	r7, r4
 8005234:	433b      	orrs	r3, r7
 8005236:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8005238:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800523a:	680b      	ldr	r3, [r1, #0]
 800523c:	001c      	movs	r4, r3
 800523e:	40d4      	lsrs	r4, r2
 8005240:	d033      	beq.n	80052aa <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005242:	464d      	mov	r5, r9
 8005244:	4095      	lsls	r5, r2
 8005246:	001c      	movs	r4, r3
 8005248:	402c      	ands	r4, r5
    if (currentpin != 0x00u)
 800524a:	422b      	tst	r3, r5
 800524c:	d0f4      	beq.n	8005238 <LL_GPIO_Init+0x50>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800524e:	684b      	ldr	r3, [r1, #4]
 8005250:	3b01      	subs	r3, #1
 8005252:	2b01      	cmp	r3, #1
 8005254:	d8d4      	bhi.n	8005200 <LL_GPIO_Init+0x18>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8005256:	6883      	ldr	r3, [r0, #8]
 8005258:	0025      	movs	r5, r4
 800525a:	4365      	muls	r5, r4
 800525c:	006f      	lsls	r7, r5, #1
 800525e:	197f      	adds	r7, r7, r5
 8005260:	43bb      	bics	r3, r7
 8005262:	688e      	ldr	r6, [r1, #8]
 8005264:	4375      	muls	r5, r6
 8005266:	432b      	orrs	r3, r5
 8005268:	6083      	str	r3, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800526a:	6843      	ldr	r3, [r0, #4]
 800526c:	43a3      	bics	r3, r4
 800526e:	68cd      	ldr	r5, [r1, #12]
 8005270:	4365      	muls	r5, r4
 8005272:	432b      	orrs	r3, r5
 8005274:	6043      	str	r3, [r0, #4]
}
 8005276:	e7c3      	b.n	8005200 <LL_GPIO_Init+0x18>
        if (currentpin < LL_GPIO_PIN_8)
 8005278:	2cff      	cmp	r4, #255	; 0xff
 800527a:	d80a      	bhi.n	8005292 <LL_GPIO_Init+0xaa>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800527c:	6a04      	ldr	r4, [r0, #32]
 800527e:	001d      	movs	r5, r3
 8005280:	435d      	muls	r5, r3
 8005282:	012e      	lsls	r6, r5, #4
 8005284:	1b76      	subs	r6, r6, r5
 8005286:	43b4      	bics	r4, r6
 8005288:	694e      	ldr	r6, [r1, #20]
 800528a:	4375      	muls	r5, r6
 800528c:	432c      	orrs	r4, r5
 800528e:	6204      	str	r4, [r0, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8005290:	e7cc      	b.n	800522c <LL_GPIO_Init+0x44>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8005292:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005294:	0a24      	lsrs	r4, r4, #8
 8005296:	4364      	muls	r4, r4
 8005298:	4364      	muls	r4, r4
 800529a:	0126      	lsls	r6, r4, #4
 800529c:	1b36      	subs	r6, r6, r4
 800529e:	43b5      	bics	r5, r6
 80052a0:	694e      	ldr	r6, [r1, #20]
 80052a2:	4374      	muls	r4, r6
 80052a4:	432c      	orrs	r4, r5
 80052a6:	6244      	str	r4, [r0, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80052a8:	e7c0      	b.n	800522c <LL_GPIO_Init+0x44>
  }

  return (SUCCESS);
}
 80052aa:	2000      	movs	r0, #0
 80052ac:	bce0      	pop	{r5, r6, r7}
 80052ae:	46ba      	mov	sl, r7
 80052b0:	46b1      	mov	r9, r6
 80052b2:	46a8      	mov	r8, r5
 80052b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052b8 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are de-initialized
  *          - ERROR: I2C registers are not de-initialized
  */
ErrorStatus LL_I2C_DeInit(const I2C_TypeDef *I2Cx)
{
 80052b8:	0003      	movs	r3, r0
  ErrorStatus status = SUCCESS;

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <LL_I2C_DeInit+0x44>)
 80052bc:	4290      	cmp	r0, r2
 80052be:	d004      	beq.n	80052ca <LL_I2C_DeInit+0x12>
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
  }
  else if (I2Cx == I2C2)
 80052c0:	4a0f      	ldr	r2, [pc, #60]	; (8005300 <LL_I2C_DeInit+0x48>)
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
  }
#endif /* I2C3 */
  else
  {
    status = ERROR;
 80052c2:	2001      	movs	r0, #1
  else if (I2Cx == I2C2)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00c      	beq.n	80052e2 <LL_I2C_DeInit+0x2a>
  }

  return status;
}
 80052c8:	4770      	bx	lr
  SET_BIT(RCC->APBRSTR1, Periphs);
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <LL_I2C_DeInit+0x4c>)
 80052cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ce:	2280      	movs	r2, #128	; 0x80
 80052d0:	0392      	lsls	r2, r2, #14
 80052d2:	430a      	orrs	r2, r1
 80052d4:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80052d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d8:	490b      	ldr	r1, [pc, #44]	; (8005308 <LL_I2C_DeInit+0x50>)
 80052da:	400a      	ands	r2, r1
 80052dc:	62da      	str	r2, [r3, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 80052de:	2000      	movs	r0, #0
}
 80052e0:	e7f2      	b.n	80052c8 <LL_I2C_DeInit+0x10>
  SET_BIT(RCC->APBRSTR1, Periphs);
 80052e2:	4b08      	ldr	r3, [pc, #32]	; (8005304 <LL_I2C_DeInit+0x4c>)
 80052e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	03d2      	lsls	r2, r2, #15
 80052ea:	430a      	orrs	r2, r1
 80052ec:	62da      	str	r2, [r3, #44]	; 0x2c
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4906      	ldr	r1, [pc, #24]	; (800530c <LL_I2C_DeInit+0x54>)
 80052f2:	400a      	ands	r2, r1
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052f6:	2000      	movs	r0, #0
}
 80052f8:	e7e6      	b.n	80052c8 <LL_I2C_DeInit+0x10>
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	40005400 	.word	0x40005400
 8005300:	40005800 	.word	0x40005800
 8005304:	40021000 	.word	0x40021000
 8005308:	ffdfffff 	.word	0xffdfffff
 800530c:	ffbfffff 	.word	0xffbfffff

08005310 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005310:	b530      	push	{r4, r5, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005312:	6802      	ldr	r2, [r0, #0]
 8005314:	2401      	movs	r4, #1
 8005316:	43a2      	bics	r2, r4
 8005318:	6002      	str	r2, [r0, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800531a:	6802      	ldr	r2, [r0, #0]
 800531c:	68cb      	ldr	r3, [r1, #12]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	688d      	ldr	r5, [r1, #8]
 8005322:	432b      	orrs	r3, r5
 8005324:	4d15      	ldr	r5, [pc, #84]	; (800537c <LL_I2C_Init+0x6c>)
 8005326:	402a      	ands	r2, r5
 8005328:	4313      	orrs	r3, r2
 800532a:	6003      	str	r3, [r0, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800532c:	684b      	ldr	r3, [r1, #4]
 800532e:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005330:	6803      	ldr	r3, [r0, #0]
 8005332:	4323      	orrs	r3, r4
 8005334:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8005336:	6883      	ldr	r3, [r0, #8]
 8005338:	4a11      	ldr	r2, [pc, #68]	; (8005380 <LL_I2C_Init+0x70>)
 800533a:	4013      	ands	r3, r2
 800533c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800533e:	6882      	ldr	r2, [r0, #8]
 8005340:	690b      	ldr	r3, [r1, #16]
 8005342:	698c      	ldr	r4, [r1, #24]
 8005344:	4323      	orrs	r3, r4
 8005346:	0ad2      	lsrs	r2, r2, #11
 8005348:	02d2      	lsls	r2, r2, #11
 800534a:	4313      	orrs	r3, r2
 800534c:	6083      	str	r3, [r0, #8]
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800534e:	690b      	ldr	r3, [r1, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8005354:	6882      	ldr	r2, [r0, #8]
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	4313      	orrs	r3, r2
 800535c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	4a08      	ldr	r2, [pc, #32]	; (8005384 <LL_I2C_Init+0x74>)
 8005362:	4013      	ands	r3, r2
 8005364:	680a      	ldr	r2, [r1, #0]
 8005366:	4313      	orrs	r3, r2
 8005368:	6003      	str	r3, [r0, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800536a:	6843      	ldr	r3, [r0, #4]
 800536c:	4a04      	ldr	r2, [pc, #16]	; (8005380 <LL_I2C_Init+0x70>)
 800536e:	4013      	ands	r3, r2
 8005370:	694a      	ldr	r2, [r1, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	6043      	str	r3, [r0, #4]
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);

  return SUCCESS;
}
 8005376:	2000      	movs	r0, #0
 8005378:	bd30      	pop	{r4, r5, pc}
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	ffffe0ff 	.word	0xffffe0ff
 8005380:	ffff7fff 	.word	0xffff7fff
 8005384:	ffcfffff 	.word	0xffcfffff

08005388 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005388:	4b01      	ldr	r3, [pc, #4]	; (8005390 <LL_SetSystemCoreClock+0x8>)
 800538a:	6018      	str	r0, [r3, #0]
}
 800538c:	4770      	bx	lr
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	200000c4 	.word	0x200000c4

08005394 <calloc>:
 8005394:	b510      	push	{r4, lr}
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <calloc+0x10>)
 8005398:	000a      	movs	r2, r1
 800539a:	0001      	movs	r1, r0
 800539c:	6818      	ldr	r0, [r3, #0]
 800539e:	f000 f852 	bl	8005446 <_calloc_r>
 80053a2:	bd10      	pop	{r4, pc}
 80053a4:	200000d0 	.word	0x200000d0

080053a8 <__errno>:
 80053a8:	4b01      	ldr	r3, [pc, #4]	; (80053b0 <__errno+0x8>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	4770      	bx	lr
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	200000d0 	.word	0x200000d0

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	2600      	movs	r6, #0
 80053b8:	4d0c      	ldr	r5, [pc, #48]	; (80053ec <__libc_init_array+0x38>)
 80053ba:	4c0d      	ldr	r4, [pc, #52]	; (80053f0 <__libc_init_array+0x3c>)
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	10a4      	asrs	r4, r4, #2
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	2600      	movs	r6, #0
 80053c6:	f000 f971 	bl	80056ac <_init>
 80053ca:	4d0a      	ldr	r5, [pc, #40]	; (80053f4 <__libc_init_array+0x40>)
 80053cc:	4c0a      	ldr	r4, [pc, #40]	; (80053f8 <__libc_init_array+0x44>)
 80053ce:	1b64      	subs	r4, r4, r5
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	00b3      	lsls	r3, r6, #2
 80053da:	58eb      	ldr	r3, [r5, r3]
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	00b3      	lsls	r3, r6, #2
 80053e4:	58eb      	ldr	r3, [r5, r3]
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	080057ec 	.word	0x080057ec
 80053f0:	080057ec 	.word	0x080057ec
 80053f4:	080057ec 	.word	0x080057ec
 80053f8:	080057f0 	.word	0x080057f0

080053fc <malloc>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	4b03      	ldr	r3, [pc, #12]	; (800540c <malloc+0x10>)
 8005400:	0001      	movs	r1, r0
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	f000 f8b8 	bl	8005578 <_malloc_r>
 8005408:	bd10      	pop	{r4, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	200000d0 	.word	0x200000d0

08005410 <free>:
 8005410:	b510      	push	{r4, lr}
 8005412:	4b03      	ldr	r3, [pc, #12]	; (8005420 <free+0x10>)
 8005414:	0001      	movs	r1, r0
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	f000 f842 	bl	80054a0 <_free_r>
 800541c:	bd10      	pop	{r4, pc}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	200000d0 	.word	0x200000d0

08005424 <memcpy>:
 8005424:	2300      	movs	r3, #0
 8005426:	b510      	push	{r4, lr}
 8005428:	429a      	cmp	r2, r3
 800542a:	d100      	bne.n	800542e <memcpy+0xa>
 800542c:	bd10      	pop	{r4, pc}
 800542e:	5ccc      	ldrb	r4, [r1, r3]
 8005430:	54c4      	strb	r4, [r0, r3]
 8005432:	3301      	adds	r3, #1
 8005434:	e7f8      	b.n	8005428 <memcpy+0x4>

08005436 <memset>:
 8005436:	0003      	movs	r3, r0
 8005438:	1882      	adds	r2, r0, r2
 800543a:	4293      	cmp	r3, r2
 800543c:	d100      	bne.n	8005440 <memset+0xa>
 800543e:	4770      	bx	lr
 8005440:	7019      	strb	r1, [r3, #0]
 8005442:	3301      	adds	r3, #1
 8005444:	e7f9      	b.n	800543a <memset+0x4>

08005446 <_calloc_r>:
 8005446:	b570      	push	{r4, r5, r6, lr}
 8005448:	0c13      	lsrs	r3, r2, #16
 800544a:	0c0d      	lsrs	r5, r1, #16
 800544c:	d11e      	bne.n	800548c <_calloc_r+0x46>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10c      	bne.n	800546c <_calloc_r+0x26>
 8005452:	b289      	uxth	r1, r1
 8005454:	b294      	uxth	r4, r2
 8005456:	434c      	muls	r4, r1
 8005458:	0021      	movs	r1, r4
 800545a:	f000 f88d 	bl	8005578 <_malloc_r>
 800545e:	1e05      	subs	r5, r0, #0
 8005460:	d01b      	beq.n	800549a <_calloc_r+0x54>
 8005462:	0022      	movs	r2, r4
 8005464:	2100      	movs	r1, #0
 8005466:	f7ff ffe6 	bl	8005436 <memset>
 800546a:	e016      	b.n	800549a <_calloc_r+0x54>
 800546c:	1c1d      	adds	r5, r3, #0
 800546e:	1c0b      	adds	r3, r1, #0
 8005470:	b292      	uxth	r2, r2
 8005472:	b289      	uxth	r1, r1
 8005474:	b29c      	uxth	r4, r3
 8005476:	4351      	muls	r1, r2
 8005478:	b2ab      	uxth	r3, r5
 800547a:	4363      	muls	r3, r4
 800547c:	0c0c      	lsrs	r4, r1, #16
 800547e:	191c      	adds	r4, r3, r4
 8005480:	0c22      	lsrs	r2, r4, #16
 8005482:	d107      	bne.n	8005494 <_calloc_r+0x4e>
 8005484:	0424      	lsls	r4, r4, #16
 8005486:	b289      	uxth	r1, r1
 8005488:	430c      	orrs	r4, r1
 800548a:	e7e5      	b.n	8005458 <_calloc_r+0x12>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <_calloc_r+0x4e>
 8005490:	1c13      	adds	r3, r2, #0
 8005492:	e7ed      	b.n	8005470 <_calloc_r+0x2a>
 8005494:	230c      	movs	r3, #12
 8005496:	2500      	movs	r5, #0
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	0028      	movs	r0, r5
 800549c:	bd70      	pop	{r4, r5, r6, pc}
	...

080054a0 <_free_r>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	0005      	movs	r5, r0
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d010      	beq.n	80054ca <_free_r+0x2a>
 80054a8:	1f0c      	subs	r4, r1, #4
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	da00      	bge.n	80054b2 <_free_r+0x12>
 80054b0:	18e4      	adds	r4, r4, r3
 80054b2:	0028      	movs	r0, r5
 80054b4:	f000 f8e8 	bl	8005688 <__malloc_lock>
 80054b8:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <_free_r+0x90>)
 80054ba:	6813      	ldr	r3, [r2, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <_free_r+0x2c>
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	6014      	str	r4, [r2, #0]
 80054c4:	0028      	movs	r0, r5
 80054c6:	f000 f8e7 	bl	8005698 <__malloc_unlock>
 80054ca:	bd70      	pop	{r4, r5, r6, pc}
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d908      	bls.n	80054e2 <_free_r+0x42>
 80054d0:	6821      	ldr	r1, [r4, #0]
 80054d2:	1860      	adds	r0, r4, r1
 80054d4:	4283      	cmp	r3, r0
 80054d6:	d1f3      	bne.n	80054c0 <_free_r+0x20>
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	1841      	adds	r1, r0, r1
 80054de:	6021      	str	r1, [r4, #0]
 80054e0:	e7ee      	b.n	80054c0 <_free_r+0x20>
 80054e2:	001a      	movs	r2, r3
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <_free_r+0x4e>
 80054ea:	42a3      	cmp	r3, r4
 80054ec:	d9f9      	bls.n	80054e2 <_free_r+0x42>
 80054ee:	6811      	ldr	r1, [r2, #0]
 80054f0:	1850      	adds	r0, r2, r1
 80054f2:	42a0      	cmp	r0, r4
 80054f4:	d10b      	bne.n	800550e <_free_r+0x6e>
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1809      	adds	r1, r1, r0
 80054fa:	1850      	adds	r0, r2, r1
 80054fc:	6011      	str	r1, [r2, #0]
 80054fe:	4283      	cmp	r3, r0
 8005500:	d1e0      	bne.n	80054c4 <_free_r+0x24>
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	1841      	adds	r1, r0, r1
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	6053      	str	r3, [r2, #4]
 800550c:	e7da      	b.n	80054c4 <_free_r+0x24>
 800550e:	42a0      	cmp	r0, r4
 8005510:	d902      	bls.n	8005518 <_free_r+0x78>
 8005512:	230c      	movs	r3, #12
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	e7d5      	b.n	80054c4 <_free_r+0x24>
 8005518:	6821      	ldr	r1, [r4, #0]
 800551a:	1860      	adds	r0, r4, r1
 800551c:	4283      	cmp	r3, r0
 800551e:	d103      	bne.n	8005528 <_free_r+0x88>
 8005520:	6818      	ldr	r0, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	1841      	adds	r1, r0, r1
 8005526:	6021      	str	r1, [r4, #0]
 8005528:	6063      	str	r3, [r4, #4]
 800552a:	6054      	str	r4, [r2, #4]
 800552c:	e7ca      	b.n	80054c4 <_free_r+0x24>
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	20000a78 	.word	0x20000a78

08005534 <sbrk_aligned>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4e0f      	ldr	r6, [pc, #60]	; (8005574 <sbrk_aligned+0x40>)
 8005538:	000d      	movs	r5, r1
 800553a:	6831      	ldr	r1, [r6, #0]
 800553c:	0004      	movs	r4, r0
 800553e:	2900      	cmp	r1, #0
 8005540:	d102      	bne.n	8005548 <sbrk_aligned+0x14>
 8005542:	f000 f88f 	bl	8005664 <_sbrk_r>
 8005546:	6030      	str	r0, [r6, #0]
 8005548:	0029      	movs	r1, r5
 800554a:	0020      	movs	r0, r4
 800554c:	f000 f88a 	bl	8005664 <_sbrk_r>
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d00a      	beq.n	800556a <sbrk_aligned+0x36>
 8005554:	2303      	movs	r3, #3
 8005556:	1cc5      	adds	r5, r0, #3
 8005558:	439d      	bics	r5, r3
 800555a:	42a8      	cmp	r0, r5
 800555c:	d007      	beq.n	800556e <sbrk_aligned+0x3a>
 800555e:	1a29      	subs	r1, r5, r0
 8005560:	0020      	movs	r0, r4
 8005562:	f000 f87f 	bl	8005664 <_sbrk_r>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	d101      	bne.n	800556e <sbrk_aligned+0x3a>
 800556a:	2501      	movs	r5, #1
 800556c:	426d      	negs	r5, r5
 800556e:	0028      	movs	r0, r5
 8005570:	bd70      	pop	{r4, r5, r6, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	20000a7c 	.word	0x20000a7c

08005578 <_malloc_r>:
 8005578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557a:	2203      	movs	r2, #3
 800557c:	1ccb      	adds	r3, r1, #3
 800557e:	4393      	bics	r3, r2
 8005580:	3308      	adds	r3, #8
 8005582:	0006      	movs	r6, r0
 8005584:	001f      	movs	r7, r3
 8005586:	2b0c      	cmp	r3, #12
 8005588:	d232      	bcs.n	80055f0 <_malloc_r+0x78>
 800558a:	270c      	movs	r7, #12
 800558c:	42b9      	cmp	r1, r7
 800558e:	d831      	bhi.n	80055f4 <_malloc_r+0x7c>
 8005590:	0030      	movs	r0, r6
 8005592:	f000 f879 	bl	8005688 <__malloc_lock>
 8005596:	4d32      	ldr	r5, [pc, #200]	; (8005660 <_malloc_r+0xe8>)
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	001c      	movs	r4, r3
 800559c:	2c00      	cmp	r4, #0
 800559e:	d12e      	bne.n	80055fe <_malloc_r+0x86>
 80055a0:	0039      	movs	r1, r7
 80055a2:	0030      	movs	r0, r6
 80055a4:	f7ff ffc6 	bl	8005534 <sbrk_aligned>
 80055a8:	0004      	movs	r4, r0
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d11e      	bne.n	80055ec <_malloc_r+0x74>
 80055ae:	682c      	ldr	r4, [r5, #0]
 80055b0:	0025      	movs	r5, r4
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	d14a      	bne.n	800564c <_malloc_r+0xd4>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	0029      	movs	r1, r5
 80055ba:	18e3      	adds	r3, r4, r3
 80055bc:	0030      	movs	r0, r6
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	f000 f850 	bl	8005664 <_sbrk_r>
 80055c4:	9b01      	ldr	r3, [sp, #4]
 80055c6:	4283      	cmp	r3, r0
 80055c8:	d143      	bne.n	8005652 <_malloc_r+0xda>
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	3703      	adds	r7, #3
 80055ce:	1aff      	subs	r7, r7, r3
 80055d0:	2303      	movs	r3, #3
 80055d2:	439f      	bics	r7, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	2f0c      	cmp	r7, #12
 80055d8:	d200      	bcs.n	80055dc <_malloc_r+0x64>
 80055da:	270c      	movs	r7, #12
 80055dc:	0039      	movs	r1, r7
 80055de:	0030      	movs	r0, r6
 80055e0:	f7ff ffa8 	bl	8005534 <sbrk_aligned>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d034      	beq.n	8005652 <_malloc_r+0xda>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	19df      	adds	r7, r3, r7
 80055ec:	6027      	str	r7, [r4, #0]
 80055ee:	e013      	b.n	8005618 <_malloc_r+0xa0>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	dacb      	bge.n	800558c <_malloc_r+0x14>
 80055f4:	230c      	movs	r3, #12
 80055f6:	2500      	movs	r5, #0
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	0028      	movs	r0, r5
 80055fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	1bd1      	subs	r1, r2, r7
 8005602:	d420      	bmi.n	8005646 <_malloc_r+0xce>
 8005604:	290b      	cmp	r1, #11
 8005606:	d917      	bls.n	8005638 <_malloc_r+0xc0>
 8005608:	19e2      	adds	r2, r4, r7
 800560a:	6027      	str	r7, [r4, #0]
 800560c:	42a3      	cmp	r3, r4
 800560e:	d111      	bne.n	8005634 <_malloc_r+0xbc>
 8005610:	602a      	str	r2, [r5, #0]
 8005612:	6863      	ldr	r3, [r4, #4]
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	6053      	str	r3, [r2, #4]
 8005618:	0030      	movs	r0, r6
 800561a:	0025      	movs	r5, r4
 800561c:	f000 f83c 	bl	8005698 <__malloc_unlock>
 8005620:	2207      	movs	r2, #7
 8005622:	350b      	adds	r5, #11
 8005624:	1d23      	adds	r3, r4, #4
 8005626:	4395      	bics	r5, r2
 8005628:	1aea      	subs	r2, r5, r3
 800562a:	429d      	cmp	r5, r3
 800562c:	d0e5      	beq.n	80055fa <_malloc_r+0x82>
 800562e:	1b5b      	subs	r3, r3, r5
 8005630:	50a3      	str	r3, [r4, r2]
 8005632:	e7e2      	b.n	80055fa <_malloc_r+0x82>
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e7ec      	b.n	8005612 <_malloc_r+0x9a>
 8005638:	6862      	ldr	r2, [r4, #4]
 800563a:	42a3      	cmp	r3, r4
 800563c:	d101      	bne.n	8005642 <_malloc_r+0xca>
 800563e:	602a      	str	r2, [r5, #0]
 8005640:	e7ea      	b.n	8005618 <_malloc_r+0xa0>
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	e7e8      	b.n	8005618 <_malloc_r+0xa0>
 8005646:	0023      	movs	r3, r4
 8005648:	6864      	ldr	r4, [r4, #4]
 800564a:	e7a7      	b.n	800559c <_malloc_r+0x24>
 800564c:	002c      	movs	r4, r5
 800564e:	686d      	ldr	r5, [r5, #4]
 8005650:	e7af      	b.n	80055b2 <_malloc_r+0x3a>
 8005652:	230c      	movs	r3, #12
 8005654:	0030      	movs	r0, r6
 8005656:	6033      	str	r3, [r6, #0]
 8005658:	f000 f81e 	bl	8005698 <__malloc_unlock>
 800565c:	e7cd      	b.n	80055fa <_malloc_r+0x82>
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	20000a78 	.word	0x20000a78

08005664 <_sbrk_r>:
 8005664:	2300      	movs	r3, #0
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	4d06      	ldr	r5, [pc, #24]	; (8005684 <_sbrk_r+0x20>)
 800566a:	0004      	movs	r4, r0
 800566c:	0008      	movs	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fe f8a6 	bl	80037c0 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d103      	bne.n	8005680 <_sbrk_r+0x1c>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d000      	beq.n	8005680 <_sbrk_r+0x1c>
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	bd70      	pop	{r4, r5, r6, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	20000a80 	.word	0x20000a80

08005688 <__malloc_lock>:
 8005688:	b510      	push	{r4, lr}
 800568a:	4802      	ldr	r0, [pc, #8]	; (8005694 <__malloc_lock+0xc>)
 800568c:	f000 f80c 	bl	80056a8 <__retarget_lock_acquire_recursive>
 8005690:	bd10      	pop	{r4, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	20000a84 	.word	0x20000a84

08005698 <__malloc_unlock>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4802      	ldr	r0, [pc, #8]	; (80056a4 <__malloc_unlock+0xc>)
 800569c:	f000 f805 	bl	80056aa <__retarget_lock_release_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	20000a84 	.word	0x20000a84

080056a8 <__retarget_lock_acquire_recursive>:
 80056a8:	4770      	bx	lr

080056aa <__retarget_lock_release_recursive>:
 80056aa:	4770      	bx	lr

080056ac <_init>:
 80056ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b2:	bc08      	pop	{r3}
 80056b4:	469e      	mov	lr, r3
 80056b6:	4770      	bx	lr

080056b8 <_fini>:
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056be:	bc08      	pop	{r3}
 80056c0:	469e      	mov	lr, r3
 80056c2:	4770      	bx	lr
 80056c4:	0000      	movs	r0, r0
	...

080056c8 <__FLASH_Program_Fast_veneer>:
 80056c8:	b401      	push	{r0}
 80056ca:	4802      	ldr	r0, [pc, #8]	; (80056d4 <__FLASH_Program_Fast_veneer+0xc>)
 80056cc:	4684      	mov	ip, r0
 80056ce:	bc01      	pop	{r0}
 80056d0:	4760      	bx	ip
 80056d2:	bf00      	nop
 80056d4:	20000135 	.word	0x20000135

Disassembly of section .data:

200000c0 <fm_version>:
200000c0:	00000001                                ....

200000c4 <SystemCoreClock>:
200000c4:	00f42400                                .$..

200000c8 <uwTickFreq>:
200000c8:	00000001                                ....

200000cc <uwTickPrio>:
200000cc:	00000004                                ....

200000d0 <_impure_ptr>:
200000d0:	200000d4                                ... 

200000d4 <impure_data>:
	...

20000134 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000134:	b510      	push	{r4, lr}
20000136:	000a      	movs	r2, r1
  uint32_t dest = Address;
  uint32_t src = DataAddress;
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000138:	490d      	ldr	r1, [pc, #52]	; (20000170 <FLASH_Program_Fast+0x3c>)
2000013a:	694c      	ldr	r4, [r1, #20]
2000013c:	2380      	movs	r3, #128	; 0x80
2000013e:	02db      	lsls	r3, r3, #11
20000140:	4323      	orrs	r3, r4
20000142:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000144:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
20000148:	b672      	cpsid	i
  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000014a:	1c51      	adds	r1, r2, #1
2000014c:	31ff      	adds	r1, #255	; 0xff
  uint32_t src = DataAddress;
2000014e:	0013      	movs	r3, r2
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000150:	1a82      	subs	r2, r0, r2
20000152:	6818      	ldr	r0, [r3, #0]
20000154:	50d0      	str	r0, [r2, r3]
    src += 4U;
20000156:	3304      	adds	r3, #4
  while (index < 64U)
20000158:	428b      	cmp	r3, r1
2000015a:	d1fa      	bne.n	20000152 <FLASH_Program_Fast+0x1e>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000015c:	4904      	ldr	r1, [pc, #16]	; (20000170 <FLASH_Program_Fast+0x3c>)
2000015e:	2280      	movs	r2, #128	; 0x80
20000160:	0252      	lsls	r2, r2, #9
20000162:	690b      	ldr	r3, [r1, #16]
20000164:	4213      	tst	r3, r2
20000166:	d1fc      	bne.n	20000162 <FLASH_Program_Fast+0x2e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000168:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
2000016c:	bd10      	pop	{r4, pc}
2000016e:	46c0      	nop			; (mov r8, r8)
20000170:	40022000 	.word	0x40022000
