
Byte_Switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08001800  08001800  00001800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006500  080018c0  080018c0  000018c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007dc0  08007dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed4  08007ed4  000100fc  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed4  08007ed4  000100fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed4  08007ed4  000100fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed4  08007ed4  00007ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ed8  08007ed8  00007ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007edc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000920  200000fc  08007fd8  000100fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08007fd8  00010a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f213  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dc3  00000000  00000000  0001f337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00022100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  00023180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018997  00000000  00000000  00024088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fcc  00000000  00000000  0003ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009492a  00000000  00000000  0004f9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e20  00000000  00000000  000e4368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080018c0 <__do_global_dtors_aux>:
 80018c0:	b510      	push	{r4, lr}
 80018c2:	4c06      	ldr	r4, [pc, #24]	; (80018dc <__do_global_dtors_aux+0x1c>)
 80018c4:	7823      	ldrb	r3, [r4, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <__do_global_dtors_aux+0x1a>
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <__do_global_dtors_aux+0x20>)
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <__do_global_dtors_aux+0x16>
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <__do_global_dtors_aux+0x24>)
 80018d2:	e000      	b.n	80018d6 <__do_global_dtors_aux+0x16>
 80018d4:	bf00      	nop
 80018d6:	2301      	movs	r3, #1
 80018d8:	7023      	strb	r3, [r4, #0]
 80018da:	bd10      	pop	{r4, pc}
 80018dc:	200000fc 	.word	0x200000fc
 80018e0:	00000000 	.word	0x00000000
 80018e4:	08007d94 	.word	0x08007d94

080018e8 <frame_dummy>:
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <frame_dummy+0x14>)
 80018ea:	b510      	push	{r4, lr}
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <frame_dummy+0x10>
 80018f0:	4903      	ldr	r1, [pc, #12]	; (8001900 <frame_dummy+0x18>)
 80018f2:	4804      	ldr	r0, [pc, #16]	; (8001904 <frame_dummy+0x1c>)
 80018f4:	e000      	b.n	80018f8 <frame_dummy+0x10>
 80018f6:	bf00      	nop
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	00000000 	.word	0x00000000
 8001900:	20000100 	.word	0x20000100
 8001904:	08007d94 	.word	0x08007d94

08001908 <__udivsi3>:
 8001908:	2200      	movs	r2, #0
 800190a:	0843      	lsrs	r3, r0, #1
 800190c:	428b      	cmp	r3, r1
 800190e:	d374      	bcc.n	80019fa <__udivsi3+0xf2>
 8001910:	0903      	lsrs	r3, r0, #4
 8001912:	428b      	cmp	r3, r1
 8001914:	d35f      	bcc.n	80019d6 <__udivsi3+0xce>
 8001916:	0a03      	lsrs	r3, r0, #8
 8001918:	428b      	cmp	r3, r1
 800191a:	d344      	bcc.n	80019a6 <__udivsi3+0x9e>
 800191c:	0b03      	lsrs	r3, r0, #12
 800191e:	428b      	cmp	r3, r1
 8001920:	d328      	bcc.n	8001974 <__udivsi3+0x6c>
 8001922:	0c03      	lsrs	r3, r0, #16
 8001924:	428b      	cmp	r3, r1
 8001926:	d30d      	bcc.n	8001944 <__udivsi3+0x3c>
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	0209      	lsls	r1, r1, #8
 800192c:	ba12      	rev	r2, r2
 800192e:	0c03      	lsrs	r3, r0, #16
 8001930:	428b      	cmp	r3, r1
 8001932:	d302      	bcc.n	800193a <__udivsi3+0x32>
 8001934:	1212      	asrs	r2, r2, #8
 8001936:	0209      	lsls	r1, r1, #8
 8001938:	d065      	beq.n	8001a06 <__udivsi3+0xfe>
 800193a:	0b03      	lsrs	r3, r0, #12
 800193c:	428b      	cmp	r3, r1
 800193e:	d319      	bcc.n	8001974 <__udivsi3+0x6c>
 8001940:	e000      	b.n	8001944 <__udivsi3+0x3c>
 8001942:	0a09      	lsrs	r1, r1, #8
 8001944:	0bc3      	lsrs	r3, r0, #15
 8001946:	428b      	cmp	r3, r1
 8001948:	d301      	bcc.n	800194e <__udivsi3+0x46>
 800194a:	03cb      	lsls	r3, r1, #15
 800194c:	1ac0      	subs	r0, r0, r3
 800194e:	4152      	adcs	r2, r2
 8001950:	0b83      	lsrs	r3, r0, #14
 8001952:	428b      	cmp	r3, r1
 8001954:	d301      	bcc.n	800195a <__udivsi3+0x52>
 8001956:	038b      	lsls	r3, r1, #14
 8001958:	1ac0      	subs	r0, r0, r3
 800195a:	4152      	adcs	r2, r2
 800195c:	0b43      	lsrs	r3, r0, #13
 800195e:	428b      	cmp	r3, r1
 8001960:	d301      	bcc.n	8001966 <__udivsi3+0x5e>
 8001962:	034b      	lsls	r3, r1, #13
 8001964:	1ac0      	subs	r0, r0, r3
 8001966:	4152      	adcs	r2, r2
 8001968:	0b03      	lsrs	r3, r0, #12
 800196a:	428b      	cmp	r3, r1
 800196c:	d301      	bcc.n	8001972 <__udivsi3+0x6a>
 800196e:	030b      	lsls	r3, r1, #12
 8001970:	1ac0      	subs	r0, r0, r3
 8001972:	4152      	adcs	r2, r2
 8001974:	0ac3      	lsrs	r3, r0, #11
 8001976:	428b      	cmp	r3, r1
 8001978:	d301      	bcc.n	800197e <__udivsi3+0x76>
 800197a:	02cb      	lsls	r3, r1, #11
 800197c:	1ac0      	subs	r0, r0, r3
 800197e:	4152      	adcs	r2, r2
 8001980:	0a83      	lsrs	r3, r0, #10
 8001982:	428b      	cmp	r3, r1
 8001984:	d301      	bcc.n	800198a <__udivsi3+0x82>
 8001986:	028b      	lsls	r3, r1, #10
 8001988:	1ac0      	subs	r0, r0, r3
 800198a:	4152      	adcs	r2, r2
 800198c:	0a43      	lsrs	r3, r0, #9
 800198e:	428b      	cmp	r3, r1
 8001990:	d301      	bcc.n	8001996 <__udivsi3+0x8e>
 8001992:	024b      	lsls	r3, r1, #9
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	4152      	adcs	r2, r2
 8001998:	0a03      	lsrs	r3, r0, #8
 800199a:	428b      	cmp	r3, r1
 800199c:	d301      	bcc.n	80019a2 <__udivsi3+0x9a>
 800199e:	020b      	lsls	r3, r1, #8
 80019a0:	1ac0      	subs	r0, r0, r3
 80019a2:	4152      	adcs	r2, r2
 80019a4:	d2cd      	bcs.n	8001942 <__udivsi3+0x3a>
 80019a6:	09c3      	lsrs	r3, r0, #7
 80019a8:	428b      	cmp	r3, r1
 80019aa:	d301      	bcc.n	80019b0 <__udivsi3+0xa8>
 80019ac:	01cb      	lsls	r3, r1, #7
 80019ae:	1ac0      	subs	r0, r0, r3
 80019b0:	4152      	adcs	r2, r2
 80019b2:	0983      	lsrs	r3, r0, #6
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d301      	bcc.n	80019bc <__udivsi3+0xb4>
 80019b8:	018b      	lsls	r3, r1, #6
 80019ba:	1ac0      	subs	r0, r0, r3
 80019bc:	4152      	adcs	r2, r2
 80019be:	0943      	lsrs	r3, r0, #5
 80019c0:	428b      	cmp	r3, r1
 80019c2:	d301      	bcc.n	80019c8 <__udivsi3+0xc0>
 80019c4:	014b      	lsls	r3, r1, #5
 80019c6:	1ac0      	subs	r0, r0, r3
 80019c8:	4152      	adcs	r2, r2
 80019ca:	0903      	lsrs	r3, r0, #4
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d301      	bcc.n	80019d4 <__udivsi3+0xcc>
 80019d0:	010b      	lsls	r3, r1, #4
 80019d2:	1ac0      	subs	r0, r0, r3
 80019d4:	4152      	adcs	r2, r2
 80019d6:	08c3      	lsrs	r3, r0, #3
 80019d8:	428b      	cmp	r3, r1
 80019da:	d301      	bcc.n	80019e0 <__udivsi3+0xd8>
 80019dc:	00cb      	lsls	r3, r1, #3
 80019de:	1ac0      	subs	r0, r0, r3
 80019e0:	4152      	adcs	r2, r2
 80019e2:	0883      	lsrs	r3, r0, #2
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d301      	bcc.n	80019ec <__udivsi3+0xe4>
 80019e8:	008b      	lsls	r3, r1, #2
 80019ea:	1ac0      	subs	r0, r0, r3
 80019ec:	4152      	adcs	r2, r2
 80019ee:	0843      	lsrs	r3, r0, #1
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d301      	bcc.n	80019f8 <__udivsi3+0xf0>
 80019f4:	004b      	lsls	r3, r1, #1
 80019f6:	1ac0      	subs	r0, r0, r3
 80019f8:	4152      	adcs	r2, r2
 80019fa:	1a41      	subs	r1, r0, r1
 80019fc:	d200      	bcs.n	8001a00 <__udivsi3+0xf8>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4152      	adcs	r2, r2
 8001a02:	4610      	mov	r0, r2
 8001a04:	4770      	bx	lr
 8001a06:	e7ff      	b.n	8001a08 <__udivsi3+0x100>
 8001a08:	b501      	push	{r0, lr}
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f000 f806 	bl	8001a1c <__aeabi_idiv0>
 8001a10:	bd02      	pop	{r1, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)

08001a14 <__aeabi_uidivmod>:
 8001a14:	2900      	cmp	r1, #0
 8001a16:	d0f7      	beq.n	8001a08 <__udivsi3+0x100>
 8001a18:	e776      	b.n	8001908 <__udivsi3>
 8001a1a:	4770      	bx	lr

08001a1c <__aeabi_idiv0>:
 8001a1c:	4770      	bx	lr
 8001a1e:	46c0      	nop			; (mov r8, r8)

08001a20 <__aeabi_f2uiz>:
 8001a20:	219e      	movs	r1, #158	; 0x9e
 8001a22:	b510      	push	{r4, lr}
 8001a24:	05c9      	lsls	r1, r1, #23
 8001a26:	1c04      	adds	r4, r0, #0
 8001a28:	f000 fc90 	bl	800234c <__aeabi_fcmpge>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d103      	bne.n	8001a38 <__aeabi_f2uiz+0x18>
 8001a30:	1c20      	adds	r0, r4, #0
 8001a32:	f000 fbf9 	bl	8002228 <__aeabi_f2iz>
 8001a36:	bd10      	pop	{r4, pc}
 8001a38:	219e      	movs	r1, #158	; 0x9e
 8001a3a:	1c20      	adds	r0, r4, #0
 8001a3c:	05c9      	lsls	r1, r1, #23
 8001a3e:	f000 fa45 	bl	8001ecc <__aeabi_fsub>
 8001a42:	f000 fbf1 	bl	8002228 <__aeabi_f2iz>
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	061b      	lsls	r3, r3, #24
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	4460      	add	r0, ip
 8001a4e:	e7f2      	b.n	8001a36 <__aeabi_f2uiz+0x16>

08001a50 <__aeabi_fdiv>:
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	464f      	mov	r7, r9
 8001a54:	4646      	mov	r6, r8
 8001a56:	46d6      	mov	lr, sl
 8001a58:	0245      	lsls	r5, r0, #9
 8001a5a:	b5c0      	push	{r6, r7, lr}
 8001a5c:	0047      	lsls	r7, r0, #1
 8001a5e:	1c0c      	adds	r4, r1, #0
 8001a60:	0a6d      	lsrs	r5, r5, #9
 8001a62:	0e3f      	lsrs	r7, r7, #24
 8001a64:	0fc6      	lsrs	r6, r0, #31
 8001a66:	2f00      	cmp	r7, #0
 8001a68:	d100      	bne.n	8001a6c <__aeabi_fdiv+0x1c>
 8001a6a:	e070      	b.n	8001b4e <__aeabi_fdiv+0xfe>
 8001a6c:	2fff      	cmp	r7, #255	; 0xff
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_fdiv+0x22>
 8001a70:	e075      	b.n	8001b5e <__aeabi_fdiv+0x10e>
 8001a72:	00eb      	lsls	r3, r5, #3
 8001a74:	2580      	movs	r5, #128	; 0x80
 8001a76:	04ed      	lsls	r5, r5, #19
 8001a78:	431d      	orrs	r5, r3
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	469a      	mov	sl, r3
 8001a80:	3f7f      	subs	r7, #127	; 0x7f
 8001a82:	0260      	lsls	r0, r4, #9
 8001a84:	0a43      	lsrs	r3, r0, #9
 8001a86:	4698      	mov	r8, r3
 8001a88:	0063      	lsls	r3, r4, #1
 8001a8a:	0e1b      	lsrs	r3, r3, #24
 8001a8c:	0fe4      	lsrs	r4, r4, #31
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04e      	beq.n	8001b30 <__aeabi_fdiv+0xe0>
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d046      	beq.n	8001b24 <__aeabi_fdiv+0xd4>
 8001a96:	4642      	mov	r2, r8
 8001a98:	00d0      	lsls	r0, r2, #3
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	04d2      	lsls	r2, r2, #19
 8001a9e:	4302      	orrs	r2, r0
 8001aa0:	4690      	mov	r8, r2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	3b7f      	subs	r3, #127	; 0x7f
 8001aa6:	0031      	movs	r1, r6
 8001aa8:	1aff      	subs	r7, r7, r3
 8001aaa:	464b      	mov	r3, r9
 8001aac:	4061      	eors	r1, r4
 8001aae:	b2c9      	uxtb	r1, r1
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d900      	bls.n	8001ab8 <__aeabi_fdiv+0x68>
 8001ab6:	e0b5      	b.n	8001c24 <__aeabi_fdiv+0x1d4>
 8001ab8:	486e      	ldr	r0, [pc, #440]	; (8001c74 <__aeabi_fdiv+0x224>)
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	58c3      	ldr	r3, [r0, r3]
 8001abe:	469f      	mov	pc, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4698      	mov	r8, r3
 8001ac4:	0026      	movs	r6, r4
 8001ac6:	4645      	mov	r5, r8
 8001ac8:	4692      	mov	sl, r2
 8001aca:	4653      	mov	r3, sl
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_fdiv+0x82>
 8001ad0:	e089      	b.n	8001be6 <__aeabi_fdiv+0x196>
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_fdiv+0x88>
 8001ad6:	e09e      	b.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d018      	beq.n	8001b0e <__aeabi_fdiv+0xbe>
 8001adc:	003b      	movs	r3, r7
 8001ade:	337f      	adds	r3, #127	; 0x7f
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	dd69      	ble.n	8001bb8 <__aeabi_fdiv+0x168>
 8001ae4:	076a      	lsls	r2, r5, #29
 8001ae6:	d004      	beq.n	8001af2 <__aeabi_fdiv+0xa2>
 8001ae8:	220f      	movs	r2, #15
 8001aea:	402a      	ands	r2, r5
 8001aec:	2a04      	cmp	r2, #4
 8001aee:	d000      	beq.n	8001af2 <__aeabi_fdiv+0xa2>
 8001af0:	3504      	adds	r5, #4
 8001af2:	012a      	lsls	r2, r5, #4
 8001af4:	d503      	bpl.n	8001afe <__aeabi_fdiv+0xae>
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <__aeabi_fdiv+0x228>)
 8001af8:	401d      	ands	r5, r3
 8001afa:	003b      	movs	r3, r7
 8001afc:	3380      	adds	r3, #128	; 0x80
 8001afe:	2bfe      	cmp	r3, #254	; 0xfe
 8001b00:	dd00      	ble.n	8001b04 <__aeabi_fdiv+0xb4>
 8001b02:	e070      	b.n	8001be6 <__aeabi_fdiv+0x196>
 8001b04:	01ad      	lsls	r5, r5, #6
 8001b06:	0a6d      	lsrs	r5, r5, #9
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	e002      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001b0c:	000e      	movs	r6, r1
 8001b0e:	2000      	movs	r0, #0
 8001b10:	2500      	movs	r5, #0
 8001b12:	05c0      	lsls	r0, r0, #23
 8001b14:	4328      	orrs	r0, r5
 8001b16:	07f6      	lsls	r6, r6, #31
 8001b18:	4330      	orrs	r0, r6
 8001b1a:	bce0      	pop	{r5, r6, r7}
 8001b1c:	46ba      	mov	sl, r7
 8001b1e:	46b1      	mov	r9, r6
 8001b20:	46a8      	mov	r8, r5
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b24:	4643      	mov	r3, r8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d13f      	bne.n	8001baa <__aeabi_fdiv+0x15a>
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	3fff      	subs	r7, #255	; 0xff
 8001b2e:	e003      	b.n	8001b38 <__aeabi_fdiv+0xe8>
 8001b30:	4643      	mov	r3, r8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d12d      	bne.n	8001b92 <__aeabi_fdiv+0x142>
 8001b36:	2201      	movs	r2, #1
 8001b38:	0031      	movs	r1, r6
 8001b3a:	464b      	mov	r3, r9
 8001b3c:	4061      	eors	r1, r4
 8001b3e:	b2c9      	uxtb	r1, r1
 8001b40:	4313      	orrs	r3, r2
 8001b42:	2b0f      	cmp	r3, #15
 8001b44:	d834      	bhi.n	8001bb0 <__aeabi_fdiv+0x160>
 8001b46:	484d      	ldr	r0, [pc, #308]	; (8001c7c <__aeabi_fdiv+0x22c>)
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	58c3      	ldr	r3, [r0, r3]
 8001b4c:	469f      	mov	pc, r3
 8001b4e:	2d00      	cmp	r5, #0
 8001b50:	d113      	bne.n	8001b7a <__aeabi_fdiv+0x12a>
 8001b52:	2304      	movs	r3, #4
 8001b54:	4699      	mov	r9, r3
 8001b56:	3b03      	subs	r3, #3
 8001b58:	2700      	movs	r7, #0
 8001b5a:	469a      	mov	sl, r3
 8001b5c:	e791      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d105      	bne.n	8001b6e <__aeabi_fdiv+0x11e>
 8001b62:	2308      	movs	r3, #8
 8001b64:	4699      	mov	r9, r3
 8001b66:	3b06      	subs	r3, #6
 8001b68:	27ff      	movs	r7, #255	; 0xff
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	e789      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b6e:	230c      	movs	r3, #12
 8001b70:	4699      	mov	r9, r3
 8001b72:	3b09      	subs	r3, #9
 8001b74:	27ff      	movs	r7, #255	; 0xff
 8001b76:	469a      	mov	sl, r3
 8001b78:	e783      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b7a:	0028      	movs	r0, r5
 8001b7c:	f000 fbf0 	bl	8002360 <__clzsi2>
 8001b80:	2776      	movs	r7, #118	; 0x76
 8001b82:	1f43      	subs	r3, r0, #5
 8001b84:	409d      	lsls	r5, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	427f      	negs	r7, r7
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	1a3f      	subs	r7, r7, r0
 8001b90:	e777      	b.n	8001a82 <__aeabi_fdiv+0x32>
 8001b92:	4640      	mov	r0, r8
 8001b94:	f000 fbe4 	bl	8002360 <__clzsi2>
 8001b98:	4642      	mov	r2, r8
 8001b9a:	1f43      	subs	r3, r0, #5
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	2376      	movs	r3, #118	; 0x76
 8001ba0:	425b      	negs	r3, r3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	1a1b      	subs	r3, r3, r0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	e77d      	b.n	8001aa6 <__aeabi_fdiv+0x56>
 8001baa:	23ff      	movs	r3, #255	; 0xff
 8001bac:	2203      	movs	r2, #3
 8001bae:	e77a      	b.n	8001aa6 <__aeabi_fdiv+0x56>
 8001bb0:	000e      	movs	r6, r1
 8001bb2:	20ff      	movs	r0, #255	; 0xff
 8001bb4:	2500      	movs	r5, #0
 8001bb6:	e7ac      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	1ac0      	subs	r0, r0, r3
 8001bbc:	281b      	cmp	r0, #27
 8001bbe:	dca6      	bgt.n	8001b0e <__aeabi_fdiv+0xbe>
 8001bc0:	379e      	adds	r7, #158	; 0x9e
 8001bc2:	002a      	movs	r2, r5
 8001bc4:	40bd      	lsls	r5, r7
 8001bc6:	40c2      	lsrs	r2, r0
 8001bc8:	1e6b      	subs	r3, r5, #1
 8001bca:	419d      	sbcs	r5, r3
 8001bcc:	4315      	orrs	r5, r2
 8001bce:	076b      	lsls	r3, r5, #29
 8001bd0:	d004      	beq.n	8001bdc <__aeabi_fdiv+0x18c>
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	402b      	ands	r3, r5
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d000      	beq.n	8001bdc <__aeabi_fdiv+0x18c>
 8001bda:	3504      	adds	r5, #4
 8001bdc:	016b      	lsls	r3, r5, #5
 8001bde:	d544      	bpl.n	8001c6a <__aeabi_fdiv+0x21a>
 8001be0:	2001      	movs	r0, #1
 8001be2:	2500      	movs	r5, #0
 8001be4:	e795      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001be6:	20ff      	movs	r0, #255	; 0xff
 8001be8:	2500      	movs	r5, #0
 8001bea:	e792      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bec:	2580      	movs	r5, #128	; 0x80
 8001bee:	2600      	movs	r6, #0
 8001bf0:	20ff      	movs	r0, #255	; 0xff
 8001bf2:	03ed      	lsls	r5, r5, #15
 8001bf4:	e78d      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	2080      	movs	r0, #128	; 0x80
 8001bfc:	03c0      	lsls	r0, r0, #15
 8001bfe:	4205      	tst	r5, r0
 8001c00:	d009      	beq.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001c02:	4643      	mov	r3, r8
 8001c04:	4203      	tst	r3, r0
 8001c06:	d106      	bne.n	8001c16 <__aeabi_fdiv+0x1c6>
 8001c08:	4645      	mov	r5, r8
 8001c0a:	4305      	orrs	r5, r0
 8001c0c:	026d      	lsls	r5, r5, #9
 8001c0e:	0026      	movs	r6, r4
 8001c10:	20ff      	movs	r0, #255	; 0xff
 8001c12:	0a6d      	lsrs	r5, r5, #9
 8001c14:	e77d      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c16:	2080      	movs	r0, #128	; 0x80
 8001c18:	03c0      	lsls	r0, r0, #15
 8001c1a:	4305      	orrs	r5, r0
 8001c1c:	026d      	lsls	r5, r5, #9
 8001c1e:	20ff      	movs	r0, #255	; 0xff
 8001c20:	0a6d      	lsrs	r5, r5, #9
 8001c22:	e776      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c24:	4642      	mov	r2, r8
 8001c26:	016b      	lsls	r3, r5, #5
 8001c28:	0150      	lsls	r0, r2, #5
 8001c2a:	4283      	cmp	r3, r0
 8001c2c:	d219      	bcs.n	8001c62 <__aeabi_fdiv+0x212>
 8001c2e:	221b      	movs	r2, #27
 8001c30:	2500      	movs	r5, #0
 8001c32:	3f01      	subs	r7, #1
 8001c34:	2601      	movs	r6, #1
 8001c36:	001c      	movs	r4, r3
 8001c38:	006d      	lsls	r5, r5, #1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2c00      	cmp	r4, #0
 8001c3e:	db01      	blt.n	8001c44 <__aeabi_fdiv+0x1f4>
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d801      	bhi.n	8001c48 <__aeabi_fdiv+0x1f8>
 8001c44:	1a1b      	subs	r3, r3, r0
 8001c46:	4335      	orrs	r5, r6
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d1f3      	bne.n	8001c36 <__aeabi_fdiv+0x1e6>
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	4193      	sbcs	r3, r2
 8001c52:	431d      	orrs	r5, r3
 8001c54:	003b      	movs	r3, r7
 8001c56:	337f      	adds	r3, #127	; 0x7f
 8001c58:	000e      	movs	r6, r1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_fdiv+0x210>
 8001c5e:	e741      	b.n	8001ae4 <__aeabi_fdiv+0x94>
 8001c60:	e7aa      	b.n	8001bb8 <__aeabi_fdiv+0x168>
 8001c62:	221a      	movs	r2, #26
 8001c64:	2501      	movs	r5, #1
 8001c66:	1a1b      	subs	r3, r3, r0
 8001c68:	e7e4      	b.n	8001c34 <__aeabi_fdiv+0x1e4>
 8001c6a:	01ad      	lsls	r5, r5, #6
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	0a6d      	lsrs	r5, r5, #9
 8001c70:	e74f      	b.n	8001b12 <__aeabi_fdiv+0xc2>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	08007dc0 	.word	0x08007dc0
 8001c78:	f7ffffff 	.word	0xf7ffffff
 8001c7c:	08007e00 	.word	0x08007e00

08001c80 <__aeabi_fmul>:
 8001c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c82:	464f      	mov	r7, r9
 8001c84:	4646      	mov	r6, r8
 8001c86:	46d6      	mov	lr, sl
 8001c88:	0244      	lsls	r4, r0, #9
 8001c8a:	0045      	lsls	r5, r0, #1
 8001c8c:	b5c0      	push	{r6, r7, lr}
 8001c8e:	0a64      	lsrs	r4, r4, #9
 8001c90:	1c0f      	adds	r7, r1, #0
 8001c92:	0e2d      	lsrs	r5, r5, #24
 8001c94:	0fc6      	lsrs	r6, r0, #31
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	d100      	bne.n	8001c9c <__aeabi_fmul+0x1c>
 8001c9a:	e08d      	b.n	8001db8 <__aeabi_fmul+0x138>
 8001c9c:	2dff      	cmp	r5, #255	; 0xff
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_fmul+0x22>
 8001ca0:	e092      	b.n	8001dc8 <__aeabi_fmul+0x148>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2080      	movs	r0, #128	; 0x80
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	469a      	mov	sl, r3
 8001caa:	00e4      	lsls	r4, r4, #3
 8001cac:	04c0      	lsls	r0, r0, #19
 8001cae:	4304      	orrs	r4, r0
 8001cb0:	3d7f      	subs	r5, #127	; 0x7f
 8001cb2:	0278      	lsls	r0, r7, #9
 8001cb4:	0a43      	lsrs	r3, r0, #9
 8001cb6:	4698      	mov	r8, r3
 8001cb8:	007b      	lsls	r3, r7, #1
 8001cba:	0e1b      	lsrs	r3, r3, #24
 8001cbc:	0fff      	lsrs	r7, r7, #31
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_fmul+0x44>
 8001cc2:	e070      	b.n	8001da6 <__aeabi_fmul+0x126>
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d100      	bne.n	8001cca <__aeabi_fmul+0x4a>
 8001cc8:	e086      	b.n	8001dd8 <__aeabi_fmul+0x158>
 8001cca:	4642      	mov	r2, r8
 8001ccc:	00d0      	lsls	r0, r2, #3
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	3b7f      	subs	r3, #127	; 0x7f
 8001cd2:	18ed      	adds	r5, r5, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	04d2      	lsls	r2, r2, #19
 8001cd8:	4302      	orrs	r2, r0
 8001cda:	4690      	mov	r8, r2
 8001cdc:	469c      	mov	ip, r3
 8001cde:	0031      	movs	r1, r6
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	4079      	eors	r1, r7
 8001ce4:	1c68      	adds	r0, r5, #1
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d81c      	bhi.n	8001d24 <__aeabi_fmul+0xa4>
 8001cea:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <__aeabi_fmul+0x244>)
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	58d3      	ldr	r3, [r2, r3]
 8001cf0:	469f      	mov	pc, r3
 8001cf2:	0039      	movs	r1, r7
 8001cf4:	4644      	mov	r4, r8
 8001cf6:	46e2      	mov	sl, ip
 8001cf8:	4653      	mov	r3, sl
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d00f      	beq.n	8001d1e <__aeabi_fmul+0x9e>
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d100      	bne.n	8001d04 <__aeabi_fmul+0x84>
 8001d02:	e0d7      	b.n	8001eb4 <__aeabi_fmul+0x234>
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d137      	bne.n	8001d78 <__aeabi_fmul+0xf8>
 8001d08:	2000      	movs	r0, #0
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	05c0      	lsls	r0, r0, #23
 8001d0e:	4320      	orrs	r0, r4
 8001d10:	07c9      	lsls	r1, r1, #31
 8001d12:	4308      	orrs	r0, r1
 8001d14:	bce0      	pop	{r5, r6, r7}
 8001d16:	46ba      	mov	sl, r7
 8001d18:	46b1      	mov	r9, r6
 8001d1a:	46a8      	mov	r8, r5
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	20ff      	movs	r0, #255	; 0xff
 8001d20:	2400      	movs	r4, #0
 8001d22:	e7f3      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001d24:	0c26      	lsrs	r6, r4, #16
 8001d26:	0424      	lsls	r4, r4, #16
 8001d28:	0c22      	lsrs	r2, r4, #16
 8001d2a:	4644      	mov	r4, r8
 8001d2c:	0424      	lsls	r4, r4, #16
 8001d2e:	0c24      	lsrs	r4, r4, #16
 8001d30:	4643      	mov	r3, r8
 8001d32:	0027      	movs	r7, r4
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	4357      	muls	r7, r2
 8001d38:	4374      	muls	r4, r6
 8001d3a:	435a      	muls	r2, r3
 8001d3c:	435e      	muls	r6, r3
 8001d3e:	1912      	adds	r2, r2, r4
 8001d40:	0c3b      	lsrs	r3, r7, #16
 8001d42:	189b      	adds	r3, r3, r2
 8001d44:	429c      	cmp	r4, r3
 8001d46:	d903      	bls.n	8001d50 <__aeabi_fmul+0xd0>
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	0252      	lsls	r2, r2, #9
 8001d4c:	4694      	mov	ip, r2
 8001d4e:	4466      	add	r6, ip
 8001d50:	043f      	lsls	r7, r7, #16
 8001d52:	041a      	lsls	r2, r3, #16
 8001d54:	0c3f      	lsrs	r7, r7, #16
 8001d56:	19d2      	adds	r2, r2, r7
 8001d58:	0194      	lsls	r4, r2, #6
 8001d5a:	1e67      	subs	r7, r4, #1
 8001d5c:	41bc      	sbcs	r4, r7
 8001d5e:	0c1b      	lsrs	r3, r3, #16
 8001d60:	0e92      	lsrs	r2, r2, #26
 8001d62:	199b      	adds	r3, r3, r6
 8001d64:	4314      	orrs	r4, r2
 8001d66:	019b      	lsls	r3, r3, #6
 8001d68:	431c      	orrs	r4, r3
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	d400      	bmi.n	8001d70 <__aeabi_fmul+0xf0>
 8001d6e:	e09b      	b.n	8001ea8 <__aeabi_fmul+0x228>
 8001d70:	2301      	movs	r3, #1
 8001d72:	0862      	lsrs	r2, r4, #1
 8001d74:	401c      	ands	r4, r3
 8001d76:	4314      	orrs	r4, r2
 8001d78:	0002      	movs	r2, r0
 8001d7a:	327f      	adds	r2, #127	; 0x7f
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	dd64      	ble.n	8001e4a <__aeabi_fmul+0x1ca>
 8001d80:	0763      	lsls	r3, r4, #29
 8001d82:	d004      	beq.n	8001d8e <__aeabi_fmul+0x10e>
 8001d84:	230f      	movs	r3, #15
 8001d86:	4023      	ands	r3, r4
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d000      	beq.n	8001d8e <__aeabi_fmul+0x10e>
 8001d8c:	3404      	adds	r4, #4
 8001d8e:	0123      	lsls	r3, r4, #4
 8001d90:	d503      	bpl.n	8001d9a <__aeabi_fmul+0x11a>
 8001d92:	0002      	movs	r2, r0
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <__aeabi_fmul+0x248>)
 8001d96:	3280      	adds	r2, #128	; 0x80
 8001d98:	401c      	ands	r4, r3
 8001d9a:	2afe      	cmp	r2, #254	; 0xfe
 8001d9c:	dcbf      	bgt.n	8001d1e <__aeabi_fmul+0x9e>
 8001d9e:	01a4      	lsls	r4, r4, #6
 8001da0:	0a64      	lsrs	r4, r4, #9
 8001da2:	b2d0      	uxtb	r0, r2
 8001da4:	e7b2      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001da6:	4643      	mov	r3, r8
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d13d      	bne.n	8001e28 <__aeabi_fmul+0x1a8>
 8001dac:	464a      	mov	r2, r9
 8001dae:	3301      	adds	r3, #1
 8001db0:	431a      	orrs	r2, r3
 8001db2:	4691      	mov	r9, r2
 8001db4:	469c      	mov	ip, r3
 8001db6:	e792      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001db8:	2c00      	cmp	r4, #0
 8001dba:	d129      	bne.n	8001e10 <__aeabi_fmul+0x190>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	4699      	mov	r9, r3
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	469a      	mov	sl, r3
 8001dc6:	e774      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d11b      	bne.n	8001e04 <__aeabi_fmul+0x184>
 8001dcc:	2308      	movs	r3, #8
 8001dce:	4699      	mov	r9, r3
 8001dd0:	3b06      	subs	r3, #6
 8001dd2:	25ff      	movs	r5, #255	; 0xff
 8001dd4:	469a      	mov	sl, r3
 8001dd6:	e76c      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001dd8:	4643      	mov	r3, r8
 8001dda:	35ff      	adds	r5, #255	; 0xff
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10b      	bne.n	8001df8 <__aeabi_fmul+0x178>
 8001de0:	2302      	movs	r3, #2
 8001de2:	464a      	mov	r2, r9
 8001de4:	431a      	orrs	r2, r3
 8001de6:	4691      	mov	r9, r2
 8001de8:	469c      	mov	ip, r3
 8001dea:	e778      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001dec:	4653      	mov	r3, sl
 8001dee:	0031      	movs	r1, r6
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d000      	beq.n	8001df6 <__aeabi_fmul+0x176>
 8001df4:	e783      	b.n	8001cfe <__aeabi_fmul+0x7e>
 8001df6:	e792      	b.n	8001d1e <__aeabi_fmul+0x9e>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	4691      	mov	r9, r2
 8001e00:	469c      	mov	ip, r3
 8001e02:	e76c      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001e04:	230c      	movs	r3, #12
 8001e06:	4699      	mov	r9, r3
 8001e08:	3b09      	subs	r3, #9
 8001e0a:	25ff      	movs	r5, #255	; 0xff
 8001e0c:	469a      	mov	sl, r3
 8001e0e:	e750      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001e10:	0020      	movs	r0, r4
 8001e12:	f000 faa5 	bl	8002360 <__clzsi2>
 8001e16:	2576      	movs	r5, #118	; 0x76
 8001e18:	1f43      	subs	r3, r0, #5
 8001e1a:	409c      	lsls	r4, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	426d      	negs	r5, r5
 8001e20:	4699      	mov	r9, r3
 8001e22:	469a      	mov	sl, r3
 8001e24:	1a2d      	subs	r5, r5, r0
 8001e26:	e744      	b.n	8001cb2 <__aeabi_fmul+0x32>
 8001e28:	4640      	mov	r0, r8
 8001e2a:	f000 fa99 	bl	8002360 <__clzsi2>
 8001e2e:	4642      	mov	r2, r8
 8001e30:	1f43      	subs	r3, r0, #5
 8001e32:	409a      	lsls	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	1a2d      	subs	r5, r5, r0
 8001e38:	4690      	mov	r8, r2
 8001e3a:	469c      	mov	ip, r3
 8001e3c:	3d76      	subs	r5, #118	; 0x76
 8001e3e:	e74e      	b.n	8001cde <__aeabi_fmul+0x5e>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	2100      	movs	r1, #0
 8001e44:	20ff      	movs	r0, #255	; 0xff
 8001e46:	03e4      	lsls	r4, r4, #15
 8001e48:	e760      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	2b1b      	cmp	r3, #27
 8001e50:	dd00      	ble.n	8001e54 <__aeabi_fmul+0x1d4>
 8001e52:	e759      	b.n	8001d08 <__aeabi_fmul+0x88>
 8001e54:	0022      	movs	r2, r4
 8001e56:	309e      	adds	r0, #158	; 0x9e
 8001e58:	40da      	lsrs	r2, r3
 8001e5a:	4084      	lsls	r4, r0
 8001e5c:	0013      	movs	r3, r2
 8001e5e:	1e62      	subs	r2, r4, #1
 8001e60:	4194      	sbcs	r4, r2
 8001e62:	431c      	orrs	r4, r3
 8001e64:	0763      	lsls	r3, r4, #29
 8001e66:	d004      	beq.n	8001e72 <__aeabi_fmul+0x1f2>
 8001e68:	230f      	movs	r3, #15
 8001e6a:	4023      	ands	r3, r4
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d000      	beq.n	8001e72 <__aeabi_fmul+0x1f2>
 8001e70:	3404      	adds	r4, #4
 8001e72:	0163      	lsls	r3, r4, #5
 8001e74:	d51a      	bpl.n	8001eac <__aeabi_fmul+0x22c>
 8001e76:	2001      	movs	r0, #1
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e747      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e7c:	2080      	movs	r0, #128	; 0x80
 8001e7e:	03c0      	lsls	r0, r0, #15
 8001e80:	4204      	tst	r4, r0
 8001e82:	d009      	beq.n	8001e98 <__aeabi_fmul+0x218>
 8001e84:	4643      	mov	r3, r8
 8001e86:	4203      	tst	r3, r0
 8001e88:	d106      	bne.n	8001e98 <__aeabi_fmul+0x218>
 8001e8a:	4644      	mov	r4, r8
 8001e8c:	4304      	orrs	r4, r0
 8001e8e:	0264      	lsls	r4, r4, #9
 8001e90:	0039      	movs	r1, r7
 8001e92:	20ff      	movs	r0, #255	; 0xff
 8001e94:	0a64      	lsrs	r4, r4, #9
 8001e96:	e739      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001e98:	2080      	movs	r0, #128	; 0x80
 8001e9a:	03c0      	lsls	r0, r0, #15
 8001e9c:	4304      	orrs	r4, r0
 8001e9e:	0264      	lsls	r4, r4, #9
 8001ea0:	0031      	movs	r1, r6
 8001ea2:	20ff      	movs	r0, #255	; 0xff
 8001ea4:	0a64      	lsrs	r4, r4, #9
 8001ea6:	e731      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001ea8:	0028      	movs	r0, r5
 8001eaa:	e765      	b.n	8001d78 <__aeabi_fmul+0xf8>
 8001eac:	01a4      	lsls	r4, r4, #6
 8001eae:	2000      	movs	r0, #0
 8001eb0:	0a64      	lsrs	r4, r4, #9
 8001eb2:	e72b      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001eb4:	2080      	movs	r0, #128	; 0x80
 8001eb6:	03c0      	lsls	r0, r0, #15
 8001eb8:	4304      	orrs	r4, r0
 8001eba:	0264      	lsls	r4, r4, #9
 8001ebc:	20ff      	movs	r0, #255	; 0xff
 8001ebe:	0a64      	lsrs	r4, r4, #9
 8001ec0:	e724      	b.n	8001d0c <__aeabi_fmul+0x8c>
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	08007e40 	.word	0x08007e40
 8001ec8:	f7ffffff 	.word	0xf7ffffff

08001ecc <__aeabi_fsub>:
 8001ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ece:	46ce      	mov	lr, r9
 8001ed0:	4647      	mov	r7, r8
 8001ed2:	0243      	lsls	r3, r0, #9
 8001ed4:	0a5b      	lsrs	r3, r3, #9
 8001ed6:	024e      	lsls	r6, r1, #9
 8001ed8:	00da      	lsls	r2, r3, #3
 8001eda:	4694      	mov	ip, r2
 8001edc:	0a72      	lsrs	r2, r6, #9
 8001ede:	4691      	mov	r9, r2
 8001ee0:	0045      	lsls	r5, r0, #1
 8001ee2:	004a      	lsls	r2, r1, #1
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	0e2d      	lsrs	r5, r5, #24
 8001ee8:	001f      	movs	r7, r3
 8001eea:	0fc4      	lsrs	r4, r0, #31
 8001eec:	0e12      	lsrs	r2, r2, #24
 8001eee:	0fc9      	lsrs	r1, r1, #31
 8001ef0:	09b6      	lsrs	r6, r6, #6
 8001ef2:	2aff      	cmp	r2, #255	; 0xff
 8001ef4:	d05b      	beq.n	8001fae <__aeabi_fsub+0xe2>
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	4041      	eors	r1, r0
 8001efa:	428c      	cmp	r4, r1
 8001efc:	d039      	beq.n	8001f72 <__aeabi_fsub+0xa6>
 8001efe:	1aa8      	subs	r0, r5, r2
 8001f00:	2800      	cmp	r0, #0
 8001f02:	dd5a      	ble.n	8001fba <__aeabi_fsub+0xee>
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	d06a      	beq.n	8001fde <__aeabi_fsub+0x112>
 8001f08:	2dff      	cmp	r5, #255	; 0xff
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_fsub+0x42>
 8001f0c:	e0d9      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	04d2      	lsls	r2, r2, #19
 8001f12:	4316      	orrs	r6, r2
 8001f14:	281b      	cmp	r0, #27
 8001f16:	dc00      	bgt.n	8001f1a <__aeabi_fsub+0x4e>
 8001f18:	e0e9      	b.n	80020ee <__aeabi_fsub+0x222>
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	1a18      	subs	r0, r3, r0
 8001f20:	0143      	lsls	r3, r0, #5
 8001f22:	d400      	bmi.n	8001f26 <__aeabi_fsub+0x5a>
 8001f24:	e0b4      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8001f26:	0180      	lsls	r0, r0, #6
 8001f28:	0987      	lsrs	r7, r0, #6
 8001f2a:	0038      	movs	r0, r7
 8001f2c:	f000 fa18 	bl	8002360 <__clzsi2>
 8001f30:	3805      	subs	r0, #5
 8001f32:	4087      	lsls	r7, r0
 8001f34:	4285      	cmp	r5, r0
 8001f36:	dc00      	bgt.n	8001f3a <__aeabi_fsub+0x6e>
 8001f38:	e0cc      	b.n	80020d4 <__aeabi_fsub+0x208>
 8001f3a:	1a2d      	subs	r5, r5, r0
 8001f3c:	48b5      	ldr	r0, [pc, #724]	; (8002214 <__aeabi_fsub+0x348>)
 8001f3e:	4038      	ands	r0, r7
 8001f40:	0743      	lsls	r3, r0, #29
 8001f42:	d004      	beq.n	8001f4e <__aeabi_fsub+0x82>
 8001f44:	230f      	movs	r3, #15
 8001f46:	4003      	ands	r3, r0
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_fsub+0x82>
 8001f4c:	3004      	adds	r0, #4
 8001f4e:	0143      	lsls	r3, r0, #5
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_fsub+0x88>
 8001f52:	e0a0      	b.n	8002096 <__aeabi_fsub+0x1ca>
 8001f54:	1c6a      	adds	r2, r5, #1
 8001f56:	2dfe      	cmp	r5, #254	; 0xfe
 8001f58:	d100      	bne.n	8001f5c <__aeabi_fsub+0x90>
 8001f5a:	e08d      	b.n	8002078 <__aeabi_fsub+0x1ac>
 8001f5c:	0180      	lsls	r0, r0, #6
 8001f5e:	0a47      	lsrs	r7, r0, #9
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	05d0      	lsls	r0, r2, #23
 8001f64:	4338      	orrs	r0, r7
 8001f66:	07e4      	lsls	r4, r4, #31
 8001f68:	4320      	orrs	r0, r4
 8001f6a:	bcc0      	pop	{r6, r7}
 8001f6c:	46b9      	mov	r9, r7
 8001f6e:	46b0      	mov	r8, r6
 8001f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f72:	1aa8      	subs	r0, r5, r2
 8001f74:	4680      	mov	r8, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	dd45      	ble.n	8002006 <__aeabi_fsub+0x13a>
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d070      	beq.n	8002060 <__aeabi_fsub+0x194>
 8001f7e:	2dff      	cmp	r5, #255	; 0xff
 8001f80:	d100      	bne.n	8001f84 <__aeabi_fsub+0xb8>
 8001f82:	e09e      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	04db      	lsls	r3, r3, #19
 8001f88:	431e      	orrs	r6, r3
 8001f8a:	4643      	mov	r3, r8
 8001f8c:	2b1b      	cmp	r3, #27
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_fsub+0xc6>
 8001f90:	e0d2      	b.n	8002138 <__aeabi_fsub+0x26c>
 8001f92:	2001      	movs	r0, #1
 8001f94:	4460      	add	r0, ip
 8001f96:	0143      	lsls	r3, r0, #5
 8001f98:	d57a      	bpl.n	8002090 <__aeabi_fsub+0x1c4>
 8001f9a:	3501      	adds	r5, #1
 8001f9c:	2dff      	cmp	r5, #255	; 0xff
 8001f9e:	d06b      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4a9d      	ldr	r2, [pc, #628]	; (8002218 <__aeabi_fsub+0x34c>)
 8001fa4:	4003      	ands	r3, r0
 8001fa6:	0840      	lsrs	r0, r0, #1
 8001fa8:	4010      	ands	r0, r2
 8001faa:	4318      	orrs	r0, r3
 8001fac:	e7c8      	b.n	8001f40 <__aeabi_fsub+0x74>
 8001fae:	2e00      	cmp	r6, #0
 8001fb0:	d020      	beq.n	8001ff4 <__aeabi_fsub+0x128>
 8001fb2:	428c      	cmp	r4, r1
 8001fb4:	d023      	beq.n	8001ffe <__aeabi_fsub+0x132>
 8001fb6:	0028      	movs	r0, r5
 8001fb8:	38ff      	subs	r0, #255	; 0xff
 8001fba:	2800      	cmp	r0, #0
 8001fbc:	d039      	beq.n	8002032 <__aeabi_fsub+0x166>
 8001fbe:	1b57      	subs	r7, r2, r5
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	d000      	beq.n	8001fc6 <__aeabi_fsub+0xfa>
 8001fc4:	e09d      	b.n	8002102 <__aeabi_fsub+0x236>
 8001fc6:	4663      	mov	r3, ip
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <__aeabi_fsub+0x102>
 8001fcc:	e0db      	b.n	8002186 <__aeabi_fsub+0x2ba>
 8001fce:	1e7b      	subs	r3, r7, #1
 8001fd0:	2f01      	cmp	r7, #1
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_fsub+0x10a>
 8001fd4:	e10d      	b.n	80021f2 <__aeabi_fsub+0x326>
 8001fd6:	2fff      	cmp	r7, #255	; 0xff
 8001fd8:	d071      	beq.n	80020be <__aeabi_fsub+0x1f2>
 8001fda:	001f      	movs	r7, r3
 8001fdc:	e098      	b.n	8002110 <__aeabi_fsub+0x244>
 8001fde:	2e00      	cmp	r6, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_fsub+0x118>
 8001fe2:	e0a7      	b.n	8002134 <__aeabi_fsub+0x268>
 8001fe4:	1e42      	subs	r2, r0, #1
 8001fe6:	2801      	cmp	r0, #1
 8001fe8:	d100      	bne.n	8001fec <__aeabi_fsub+0x120>
 8001fea:	e0e6      	b.n	80021ba <__aeabi_fsub+0x2ee>
 8001fec:	28ff      	cmp	r0, #255	; 0xff
 8001fee:	d068      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	e78f      	b.n	8001f14 <__aeabi_fsub+0x48>
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4041      	eors	r1, r0
 8001ff8:	42a1      	cmp	r1, r4
 8001ffa:	d000      	beq.n	8001ffe <__aeabi_fsub+0x132>
 8001ffc:	e77f      	b.n	8001efe <__aeabi_fsub+0x32>
 8001ffe:	20ff      	movs	r0, #255	; 0xff
 8002000:	4240      	negs	r0, r0
 8002002:	4680      	mov	r8, r0
 8002004:	44a8      	add	r8, r5
 8002006:	4640      	mov	r0, r8
 8002008:	2800      	cmp	r0, #0
 800200a:	d038      	beq.n	800207e <__aeabi_fsub+0x1b2>
 800200c:	1b51      	subs	r1, r2, r5
 800200e:	2d00      	cmp	r5, #0
 8002010:	d100      	bne.n	8002014 <__aeabi_fsub+0x148>
 8002012:	e0ae      	b.n	8002172 <__aeabi_fsub+0x2a6>
 8002014:	2aff      	cmp	r2, #255	; 0xff
 8002016:	d100      	bne.n	800201a <__aeabi_fsub+0x14e>
 8002018:	e0df      	b.n	80021da <__aeabi_fsub+0x30e>
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	4660      	mov	r0, ip
 800201e:	04db      	lsls	r3, r3, #19
 8002020:	4318      	orrs	r0, r3
 8002022:	4684      	mov	ip, r0
 8002024:	291b      	cmp	r1, #27
 8002026:	dc00      	bgt.n	800202a <__aeabi_fsub+0x15e>
 8002028:	e0d9      	b.n	80021de <__aeabi_fsub+0x312>
 800202a:	2001      	movs	r0, #1
 800202c:	0015      	movs	r5, r2
 800202e:	1980      	adds	r0, r0, r6
 8002030:	e7b1      	b.n	8001f96 <__aeabi_fsub+0xca>
 8002032:	20fe      	movs	r0, #254	; 0xfe
 8002034:	1c6a      	adds	r2, r5, #1
 8002036:	4210      	tst	r0, r2
 8002038:	d171      	bne.n	800211e <__aeabi_fsub+0x252>
 800203a:	2d00      	cmp	r5, #0
 800203c:	d000      	beq.n	8002040 <__aeabi_fsub+0x174>
 800203e:	e0a6      	b.n	800218e <__aeabi_fsub+0x2c2>
 8002040:	4663      	mov	r3, ip
 8002042:	2b00      	cmp	r3, #0
 8002044:	d100      	bne.n	8002048 <__aeabi_fsub+0x17c>
 8002046:	e0d9      	b.n	80021fc <__aeabi_fsub+0x330>
 8002048:	2200      	movs	r2, #0
 800204a:	2e00      	cmp	r6, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_fsub+0x184>
 800204e:	e788      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002050:	1b98      	subs	r0, r3, r6
 8002052:	0143      	lsls	r3, r0, #5
 8002054:	d400      	bmi.n	8002058 <__aeabi_fsub+0x18c>
 8002056:	e0e1      	b.n	800221c <__aeabi_fsub+0x350>
 8002058:	4663      	mov	r3, ip
 800205a:	000c      	movs	r4, r1
 800205c:	1af0      	subs	r0, r6, r3
 800205e:	e76f      	b.n	8001f40 <__aeabi_fsub+0x74>
 8002060:	2e00      	cmp	r6, #0
 8002062:	d100      	bne.n	8002066 <__aeabi_fsub+0x19a>
 8002064:	e0b7      	b.n	80021d6 <__aeabi_fsub+0x30a>
 8002066:	0002      	movs	r2, r0
 8002068:	3a01      	subs	r2, #1
 800206a:	2801      	cmp	r0, #1
 800206c:	d100      	bne.n	8002070 <__aeabi_fsub+0x1a4>
 800206e:	e09c      	b.n	80021aa <__aeabi_fsub+0x2de>
 8002070:	28ff      	cmp	r0, #255	; 0xff
 8002072:	d026      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 8002074:	4690      	mov	r8, r2
 8002076:	e788      	b.n	8001f8a <__aeabi_fsub+0xbe>
 8002078:	22ff      	movs	r2, #255	; 0xff
 800207a:	2700      	movs	r7, #0
 800207c:	e771      	b.n	8001f62 <__aeabi_fsub+0x96>
 800207e:	20fe      	movs	r0, #254	; 0xfe
 8002080:	1c6a      	adds	r2, r5, #1
 8002082:	4210      	tst	r0, r2
 8002084:	d064      	beq.n	8002150 <__aeabi_fsub+0x284>
 8002086:	2aff      	cmp	r2, #255	; 0xff
 8002088:	d0f6      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 800208a:	0015      	movs	r5, r2
 800208c:	4466      	add	r6, ip
 800208e:	0870      	lsrs	r0, r6, #1
 8002090:	0743      	lsls	r3, r0, #29
 8002092:	d000      	beq.n	8002096 <__aeabi_fsub+0x1ca>
 8002094:	e756      	b.n	8001f44 <__aeabi_fsub+0x78>
 8002096:	08c3      	lsrs	r3, r0, #3
 8002098:	2dff      	cmp	r5, #255	; 0xff
 800209a:	d012      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 800209c:	025b      	lsls	r3, r3, #9
 800209e:	0a5f      	lsrs	r7, r3, #9
 80020a0:	b2ea      	uxtb	r2, r5
 80020a2:	e75e      	b.n	8001f62 <__aeabi_fsub+0x96>
 80020a4:	4662      	mov	r2, ip
 80020a6:	2a00      	cmp	r2, #0
 80020a8:	d100      	bne.n	80020ac <__aeabi_fsub+0x1e0>
 80020aa:	e096      	b.n	80021da <__aeabi_fsub+0x30e>
 80020ac:	2e00      	cmp	r6, #0
 80020ae:	d008      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	03d2      	lsls	r2, r2, #15
 80020b4:	4213      	tst	r3, r2
 80020b6:	d004      	beq.n	80020c2 <__aeabi_fsub+0x1f6>
 80020b8:	4648      	mov	r0, r9
 80020ba:	4210      	tst	r0, r2
 80020bc:	d101      	bne.n	80020c2 <__aeabi_fsub+0x1f6>
 80020be:	000c      	movs	r4, r1
 80020c0:	464b      	mov	r3, r9
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0d8      	beq.n	8002078 <__aeabi_fsub+0x1ac>
 80020c6:	2780      	movs	r7, #128	; 0x80
 80020c8:	03ff      	lsls	r7, r7, #15
 80020ca:	431f      	orrs	r7, r3
 80020cc:	027f      	lsls	r7, r7, #9
 80020ce:	22ff      	movs	r2, #255	; 0xff
 80020d0:	0a7f      	lsrs	r7, r7, #9
 80020d2:	e746      	b.n	8001f62 <__aeabi_fsub+0x96>
 80020d4:	2320      	movs	r3, #32
 80020d6:	003a      	movs	r2, r7
 80020d8:	1b45      	subs	r5, r0, r5
 80020da:	0038      	movs	r0, r7
 80020dc:	3501      	adds	r5, #1
 80020de:	40ea      	lsrs	r2, r5
 80020e0:	1b5d      	subs	r5, r3, r5
 80020e2:	40a8      	lsls	r0, r5
 80020e4:	1e43      	subs	r3, r0, #1
 80020e6:	4198      	sbcs	r0, r3
 80020e8:	2500      	movs	r5, #0
 80020ea:	4310      	orrs	r0, r2
 80020ec:	e728      	b.n	8001f40 <__aeabi_fsub+0x74>
 80020ee:	2320      	movs	r3, #32
 80020f0:	1a1b      	subs	r3, r3, r0
 80020f2:	0032      	movs	r2, r6
 80020f4:	409e      	lsls	r6, r3
 80020f6:	40c2      	lsrs	r2, r0
 80020f8:	0030      	movs	r0, r6
 80020fa:	1e43      	subs	r3, r0, #1
 80020fc:	4198      	sbcs	r0, r3
 80020fe:	4310      	orrs	r0, r2
 8002100:	e70c      	b.n	8001f1c <__aeabi_fsub+0x50>
 8002102:	2aff      	cmp	r2, #255	; 0xff
 8002104:	d0db      	beq.n	80020be <__aeabi_fsub+0x1f2>
 8002106:	2380      	movs	r3, #128	; 0x80
 8002108:	4660      	mov	r0, ip
 800210a:	04db      	lsls	r3, r3, #19
 800210c:	4318      	orrs	r0, r3
 800210e:	4684      	mov	ip, r0
 8002110:	2f1b      	cmp	r7, #27
 8002112:	dd56      	ble.n	80021c2 <__aeabi_fsub+0x2f6>
 8002114:	2001      	movs	r0, #1
 8002116:	000c      	movs	r4, r1
 8002118:	0015      	movs	r5, r2
 800211a:	1a30      	subs	r0, r6, r0
 800211c:	e700      	b.n	8001f20 <__aeabi_fsub+0x54>
 800211e:	4663      	mov	r3, ip
 8002120:	1b9f      	subs	r7, r3, r6
 8002122:	017b      	lsls	r3, r7, #5
 8002124:	d43d      	bmi.n	80021a2 <__aeabi_fsub+0x2d6>
 8002126:	2f00      	cmp	r7, #0
 8002128:	d000      	beq.n	800212c <__aeabi_fsub+0x260>
 800212a:	e6fe      	b.n	8001f2a <__aeabi_fsub+0x5e>
 800212c:	2400      	movs	r4, #0
 800212e:	2200      	movs	r2, #0
 8002130:	2700      	movs	r7, #0
 8002132:	e716      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002134:	0005      	movs	r5, r0
 8002136:	e7af      	b.n	8002098 <__aeabi_fsub+0x1cc>
 8002138:	0032      	movs	r2, r6
 800213a:	4643      	mov	r3, r8
 800213c:	4641      	mov	r1, r8
 800213e:	40da      	lsrs	r2, r3
 8002140:	2320      	movs	r3, #32
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	409e      	lsls	r6, r3
 8002146:	0030      	movs	r0, r6
 8002148:	1e43      	subs	r3, r0, #1
 800214a:	4198      	sbcs	r0, r3
 800214c:	4310      	orrs	r0, r2
 800214e:	e721      	b.n	8001f94 <__aeabi_fsub+0xc8>
 8002150:	2d00      	cmp	r5, #0
 8002152:	d1a7      	bne.n	80020a4 <__aeabi_fsub+0x1d8>
 8002154:	4663      	mov	r3, ip
 8002156:	2b00      	cmp	r3, #0
 8002158:	d059      	beq.n	800220e <__aeabi_fsub+0x342>
 800215a:	2200      	movs	r2, #0
 800215c:	2e00      	cmp	r6, #0
 800215e:	d100      	bne.n	8002162 <__aeabi_fsub+0x296>
 8002160:	e6ff      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002162:	0030      	movs	r0, r6
 8002164:	4460      	add	r0, ip
 8002166:	0143      	lsls	r3, r0, #5
 8002168:	d592      	bpl.n	8002090 <__aeabi_fsub+0x1c4>
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <__aeabi_fsub+0x348>)
 800216c:	3501      	adds	r5, #1
 800216e:	4018      	ands	r0, r3
 8002170:	e78e      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8002172:	4663      	mov	r3, ip
 8002174:	2b00      	cmp	r3, #0
 8002176:	d047      	beq.n	8002208 <__aeabi_fsub+0x33c>
 8002178:	1e4b      	subs	r3, r1, #1
 800217a:	2901      	cmp	r1, #1
 800217c:	d015      	beq.n	80021aa <__aeabi_fsub+0x2de>
 800217e:	29ff      	cmp	r1, #255	; 0xff
 8002180:	d02b      	beq.n	80021da <__aeabi_fsub+0x30e>
 8002182:	0019      	movs	r1, r3
 8002184:	e74e      	b.n	8002024 <__aeabi_fsub+0x158>
 8002186:	000c      	movs	r4, r1
 8002188:	464b      	mov	r3, r9
 800218a:	003d      	movs	r5, r7
 800218c:	e784      	b.n	8002098 <__aeabi_fsub+0x1cc>
 800218e:	4662      	mov	r2, ip
 8002190:	2a00      	cmp	r2, #0
 8002192:	d18b      	bne.n	80020ac <__aeabi_fsub+0x1e0>
 8002194:	2e00      	cmp	r6, #0
 8002196:	d192      	bne.n	80020be <__aeabi_fsub+0x1f2>
 8002198:	2780      	movs	r7, #128	; 0x80
 800219a:	2400      	movs	r4, #0
 800219c:	22ff      	movs	r2, #255	; 0xff
 800219e:	03ff      	lsls	r7, r7, #15
 80021a0:	e6df      	b.n	8001f62 <__aeabi_fsub+0x96>
 80021a2:	4663      	mov	r3, ip
 80021a4:	000c      	movs	r4, r1
 80021a6:	1af7      	subs	r7, r6, r3
 80021a8:	e6bf      	b.n	8001f2a <__aeabi_fsub+0x5e>
 80021aa:	0030      	movs	r0, r6
 80021ac:	4460      	add	r0, ip
 80021ae:	2501      	movs	r5, #1
 80021b0:	0143      	lsls	r3, r0, #5
 80021b2:	d400      	bmi.n	80021b6 <__aeabi_fsub+0x2ea>
 80021b4:	e76c      	b.n	8002090 <__aeabi_fsub+0x1c4>
 80021b6:	2502      	movs	r5, #2
 80021b8:	e6f2      	b.n	8001fa0 <__aeabi_fsub+0xd4>
 80021ba:	4663      	mov	r3, ip
 80021bc:	2501      	movs	r5, #1
 80021be:	1b98      	subs	r0, r3, r6
 80021c0:	e6ae      	b.n	8001f20 <__aeabi_fsub+0x54>
 80021c2:	2320      	movs	r3, #32
 80021c4:	4664      	mov	r4, ip
 80021c6:	4660      	mov	r0, ip
 80021c8:	40fc      	lsrs	r4, r7
 80021ca:	1bdf      	subs	r7, r3, r7
 80021cc:	40b8      	lsls	r0, r7
 80021ce:	1e43      	subs	r3, r0, #1
 80021d0:	4198      	sbcs	r0, r3
 80021d2:	4320      	orrs	r0, r4
 80021d4:	e79f      	b.n	8002116 <__aeabi_fsub+0x24a>
 80021d6:	0005      	movs	r5, r0
 80021d8:	e75e      	b.n	8002098 <__aeabi_fsub+0x1cc>
 80021da:	464b      	mov	r3, r9
 80021dc:	e771      	b.n	80020c2 <__aeabi_fsub+0x1f6>
 80021de:	2320      	movs	r3, #32
 80021e0:	4665      	mov	r5, ip
 80021e2:	4660      	mov	r0, ip
 80021e4:	40cd      	lsrs	r5, r1
 80021e6:	1a59      	subs	r1, r3, r1
 80021e8:	4088      	lsls	r0, r1
 80021ea:	1e43      	subs	r3, r0, #1
 80021ec:	4198      	sbcs	r0, r3
 80021ee:	4328      	orrs	r0, r5
 80021f0:	e71c      	b.n	800202c <__aeabi_fsub+0x160>
 80021f2:	4663      	mov	r3, ip
 80021f4:	000c      	movs	r4, r1
 80021f6:	2501      	movs	r5, #1
 80021f8:	1af0      	subs	r0, r6, r3
 80021fa:	e691      	b.n	8001f20 <__aeabi_fsub+0x54>
 80021fc:	2e00      	cmp	r6, #0
 80021fe:	d095      	beq.n	800212c <__aeabi_fsub+0x260>
 8002200:	000c      	movs	r4, r1
 8002202:	464f      	mov	r7, r9
 8002204:	2200      	movs	r2, #0
 8002206:	e6ac      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002208:	464b      	mov	r3, r9
 800220a:	000d      	movs	r5, r1
 800220c:	e744      	b.n	8002098 <__aeabi_fsub+0x1cc>
 800220e:	464f      	mov	r7, r9
 8002210:	2200      	movs	r2, #0
 8002212:	e6a6      	b.n	8001f62 <__aeabi_fsub+0x96>
 8002214:	fbffffff 	.word	0xfbffffff
 8002218:	7dffffff 	.word	0x7dffffff
 800221c:	2800      	cmp	r0, #0
 800221e:	d000      	beq.n	8002222 <__aeabi_fsub+0x356>
 8002220:	e736      	b.n	8002090 <__aeabi_fsub+0x1c4>
 8002222:	2400      	movs	r4, #0
 8002224:	2700      	movs	r7, #0
 8002226:	e69c      	b.n	8001f62 <__aeabi_fsub+0x96>

08002228 <__aeabi_f2iz>:
 8002228:	0241      	lsls	r1, r0, #9
 800222a:	0042      	lsls	r2, r0, #1
 800222c:	0fc3      	lsrs	r3, r0, #31
 800222e:	0a49      	lsrs	r1, r1, #9
 8002230:	2000      	movs	r0, #0
 8002232:	0e12      	lsrs	r2, r2, #24
 8002234:	2a7e      	cmp	r2, #126	; 0x7e
 8002236:	dd03      	ble.n	8002240 <__aeabi_f2iz+0x18>
 8002238:	2a9d      	cmp	r2, #157	; 0x9d
 800223a:	dd02      	ble.n	8002242 <__aeabi_f2iz+0x1a>
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <__aeabi_f2iz+0x3c>)
 800223e:	1898      	adds	r0, r3, r2
 8002240:	4770      	bx	lr
 8002242:	2080      	movs	r0, #128	; 0x80
 8002244:	0400      	lsls	r0, r0, #16
 8002246:	4301      	orrs	r1, r0
 8002248:	2a95      	cmp	r2, #149	; 0x95
 800224a:	dc07      	bgt.n	800225c <__aeabi_f2iz+0x34>
 800224c:	2096      	movs	r0, #150	; 0x96
 800224e:	1a82      	subs	r2, r0, r2
 8002250:	40d1      	lsrs	r1, r2
 8002252:	4248      	negs	r0, r1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f3      	bne.n	8002240 <__aeabi_f2iz+0x18>
 8002258:	0008      	movs	r0, r1
 800225a:	e7f1      	b.n	8002240 <__aeabi_f2iz+0x18>
 800225c:	3a96      	subs	r2, #150	; 0x96
 800225e:	4091      	lsls	r1, r2
 8002260:	e7f7      	b.n	8002252 <__aeabi_f2iz+0x2a>
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	7fffffff 	.word	0x7fffffff

08002268 <__aeabi_ui2f>:
 8002268:	b570      	push	{r4, r5, r6, lr}
 800226a:	1e05      	subs	r5, r0, #0
 800226c:	d00e      	beq.n	800228c <__aeabi_ui2f+0x24>
 800226e:	f000 f877 	bl	8002360 <__clzsi2>
 8002272:	239e      	movs	r3, #158	; 0x9e
 8002274:	0004      	movs	r4, r0
 8002276:	1a1b      	subs	r3, r3, r0
 8002278:	2b96      	cmp	r3, #150	; 0x96
 800227a:	dc0c      	bgt.n	8002296 <__aeabi_ui2f+0x2e>
 800227c:	2808      	cmp	r0, #8
 800227e:	dd01      	ble.n	8002284 <__aeabi_ui2f+0x1c>
 8002280:	3c08      	subs	r4, #8
 8002282:	40a5      	lsls	r5, r4
 8002284:	026d      	lsls	r5, r5, #9
 8002286:	0a6d      	lsrs	r5, r5, #9
 8002288:	b2d8      	uxtb	r0, r3
 800228a:	e001      	b.n	8002290 <__aeabi_ui2f+0x28>
 800228c:	2000      	movs	r0, #0
 800228e:	2500      	movs	r5, #0
 8002290:	05c0      	lsls	r0, r0, #23
 8002292:	4328      	orrs	r0, r5
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	2b99      	cmp	r3, #153	; 0x99
 8002298:	dd09      	ble.n	80022ae <__aeabi_ui2f+0x46>
 800229a:	0002      	movs	r2, r0
 800229c:	0029      	movs	r1, r5
 800229e:	321b      	adds	r2, #27
 80022a0:	4091      	lsls	r1, r2
 80022a2:	1e4a      	subs	r2, r1, #1
 80022a4:	4191      	sbcs	r1, r2
 80022a6:	2205      	movs	r2, #5
 80022a8:	1a12      	subs	r2, r2, r0
 80022aa:	40d5      	lsrs	r5, r2
 80022ac:	430d      	orrs	r5, r1
 80022ae:	2c05      	cmp	r4, #5
 80022b0:	dc12      	bgt.n	80022d8 <__aeabi_ui2f+0x70>
 80022b2:	0029      	movs	r1, r5
 80022b4:	4e0c      	ldr	r6, [pc, #48]	; (80022e8 <__aeabi_ui2f+0x80>)
 80022b6:	4031      	ands	r1, r6
 80022b8:	076a      	lsls	r2, r5, #29
 80022ba:	d009      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022bc:	200f      	movs	r0, #15
 80022be:	4028      	ands	r0, r5
 80022c0:	2804      	cmp	r0, #4
 80022c2:	d005      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022c4:	3104      	adds	r1, #4
 80022c6:	014a      	lsls	r2, r1, #5
 80022c8:	d502      	bpl.n	80022d0 <__aeabi_ui2f+0x68>
 80022ca:	239f      	movs	r3, #159	; 0x9f
 80022cc:	4031      	ands	r1, r6
 80022ce:	1b1b      	subs	r3, r3, r4
 80022d0:	0189      	lsls	r1, r1, #6
 80022d2:	0a4d      	lsrs	r5, r1, #9
 80022d4:	b2d8      	uxtb	r0, r3
 80022d6:	e7db      	b.n	8002290 <__aeabi_ui2f+0x28>
 80022d8:	1f62      	subs	r2, r4, #5
 80022da:	4095      	lsls	r5, r2
 80022dc:	0029      	movs	r1, r5
 80022de:	4e02      	ldr	r6, [pc, #8]	; (80022e8 <__aeabi_ui2f+0x80>)
 80022e0:	4031      	ands	r1, r6
 80022e2:	076a      	lsls	r2, r5, #29
 80022e4:	d0f4      	beq.n	80022d0 <__aeabi_ui2f+0x68>
 80022e6:	e7e9      	b.n	80022bc <__aeabi_ui2f+0x54>
 80022e8:	fbffffff 	.word	0xfbffffff

080022ec <__aeabi_cfrcmple>:
 80022ec:	4684      	mov	ip, r0
 80022ee:	0008      	movs	r0, r1
 80022f0:	4661      	mov	r1, ip
 80022f2:	e7ff      	b.n	80022f4 <__aeabi_cfcmpeq>

080022f4 <__aeabi_cfcmpeq>:
 80022f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80022f6:	f000 f8bd 	bl	8002474 <__lesf2>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d401      	bmi.n	8002302 <__aeabi_cfcmpeq+0xe>
 80022fe:	2100      	movs	r1, #0
 8002300:	42c8      	cmn	r0, r1
 8002302:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002304 <__aeabi_fcmpeq>:
 8002304:	b510      	push	{r4, lr}
 8002306:	f000 f849 	bl	800239c <__eqsf2>
 800230a:	4240      	negs	r0, r0
 800230c:	3001      	adds	r0, #1
 800230e:	bd10      	pop	{r4, pc}

08002310 <__aeabi_fcmplt>:
 8002310:	b510      	push	{r4, lr}
 8002312:	f000 f8af 	bl	8002474 <__lesf2>
 8002316:	2800      	cmp	r0, #0
 8002318:	db01      	blt.n	800231e <__aeabi_fcmplt+0xe>
 800231a:	2000      	movs	r0, #0
 800231c:	bd10      	pop	{r4, pc}
 800231e:	2001      	movs	r0, #1
 8002320:	bd10      	pop	{r4, pc}
 8002322:	46c0      	nop			; (mov r8, r8)

08002324 <__aeabi_fcmple>:
 8002324:	b510      	push	{r4, lr}
 8002326:	f000 f8a5 	bl	8002474 <__lesf2>
 800232a:	2800      	cmp	r0, #0
 800232c:	dd01      	ble.n	8002332 <__aeabi_fcmple+0xe>
 800232e:	2000      	movs	r0, #0
 8002330:	bd10      	pop	{r4, pc}
 8002332:	2001      	movs	r0, #1
 8002334:	bd10      	pop	{r4, pc}
 8002336:	46c0      	nop			; (mov r8, r8)

08002338 <__aeabi_fcmpgt>:
 8002338:	b510      	push	{r4, lr}
 800233a:	f000 f855 	bl	80023e8 <__gesf2>
 800233e:	2800      	cmp	r0, #0
 8002340:	dc01      	bgt.n	8002346 <__aeabi_fcmpgt+0xe>
 8002342:	2000      	movs	r0, #0
 8002344:	bd10      	pop	{r4, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	bd10      	pop	{r4, pc}
 800234a:	46c0      	nop			; (mov r8, r8)

0800234c <__aeabi_fcmpge>:
 800234c:	b510      	push	{r4, lr}
 800234e:	f000 f84b 	bl	80023e8 <__gesf2>
 8002352:	2800      	cmp	r0, #0
 8002354:	da01      	bge.n	800235a <__aeabi_fcmpge+0xe>
 8002356:	2000      	movs	r0, #0
 8002358:	bd10      	pop	{r4, pc}
 800235a:	2001      	movs	r0, #1
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <__clzsi2>:
 8002360:	211c      	movs	r1, #28
 8002362:	2301      	movs	r3, #1
 8002364:	041b      	lsls	r3, r3, #16
 8002366:	4298      	cmp	r0, r3
 8002368:	d301      	bcc.n	800236e <__clzsi2+0xe>
 800236a:	0c00      	lsrs	r0, r0, #16
 800236c:	3910      	subs	r1, #16
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	4298      	cmp	r0, r3
 8002372:	d301      	bcc.n	8002378 <__clzsi2+0x18>
 8002374:	0a00      	lsrs	r0, r0, #8
 8002376:	3908      	subs	r1, #8
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	4298      	cmp	r0, r3
 800237c:	d301      	bcc.n	8002382 <__clzsi2+0x22>
 800237e:	0900      	lsrs	r0, r0, #4
 8002380:	3904      	subs	r1, #4
 8002382:	a202      	add	r2, pc, #8	; (adr r2, 800238c <__clzsi2+0x2c>)
 8002384:	5c10      	ldrb	r0, [r2, r0]
 8002386:	1840      	adds	r0, r0, r1
 8002388:	4770      	bx	lr
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	02020304 	.word	0x02020304
 8002390:	01010101 	.word	0x01010101
	...

0800239c <__eqsf2>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	0042      	lsls	r2, r0, #1
 80023a0:	0245      	lsls	r5, r0, #9
 80023a2:	024e      	lsls	r6, r1, #9
 80023a4:	004c      	lsls	r4, r1, #1
 80023a6:	0fc3      	lsrs	r3, r0, #31
 80023a8:	0a6d      	lsrs	r5, r5, #9
 80023aa:	2001      	movs	r0, #1
 80023ac:	0e12      	lsrs	r2, r2, #24
 80023ae:	0a76      	lsrs	r6, r6, #9
 80023b0:	0e24      	lsrs	r4, r4, #24
 80023b2:	0fc9      	lsrs	r1, r1, #31
 80023b4:	2aff      	cmp	r2, #255	; 0xff
 80023b6:	d006      	beq.n	80023c6 <__eqsf2+0x2a>
 80023b8:	2cff      	cmp	r4, #255	; 0xff
 80023ba:	d003      	beq.n	80023c4 <__eqsf2+0x28>
 80023bc:	42a2      	cmp	r2, r4
 80023be:	d101      	bne.n	80023c4 <__eqsf2+0x28>
 80023c0:	42b5      	cmp	r5, r6
 80023c2:	d006      	beq.n	80023d2 <__eqsf2+0x36>
 80023c4:	bd70      	pop	{r4, r5, r6, pc}
 80023c6:	2d00      	cmp	r5, #0
 80023c8:	d1fc      	bne.n	80023c4 <__eqsf2+0x28>
 80023ca:	2cff      	cmp	r4, #255	; 0xff
 80023cc:	d1fa      	bne.n	80023c4 <__eqsf2+0x28>
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d1f8      	bne.n	80023c4 <__eqsf2+0x28>
 80023d2:	428b      	cmp	r3, r1
 80023d4:	d006      	beq.n	80023e4 <__eqsf2+0x48>
 80023d6:	2001      	movs	r0, #1
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d1f3      	bne.n	80023c4 <__eqsf2+0x28>
 80023dc:	0028      	movs	r0, r5
 80023de:	1e43      	subs	r3, r0, #1
 80023e0:	4198      	sbcs	r0, r3
 80023e2:	e7ef      	b.n	80023c4 <__eqsf2+0x28>
 80023e4:	2000      	movs	r0, #0
 80023e6:	e7ed      	b.n	80023c4 <__eqsf2+0x28>

080023e8 <__gesf2>:
 80023e8:	b570      	push	{r4, r5, r6, lr}
 80023ea:	0042      	lsls	r2, r0, #1
 80023ec:	0245      	lsls	r5, r0, #9
 80023ee:	024e      	lsls	r6, r1, #9
 80023f0:	004c      	lsls	r4, r1, #1
 80023f2:	0fc3      	lsrs	r3, r0, #31
 80023f4:	0a6d      	lsrs	r5, r5, #9
 80023f6:	0e12      	lsrs	r2, r2, #24
 80023f8:	0a76      	lsrs	r6, r6, #9
 80023fa:	0e24      	lsrs	r4, r4, #24
 80023fc:	0fc8      	lsrs	r0, r1, #31
 80023fe:	2aff      	cmp	r2, #255	; 0xff
 8002400:	d01b      	beq.n	800243a <__gesf2+0x52>
 8002402:	2cff      	cmp	r4, #255	; 0xff
 8002404:	d00e      	beq.n	8002424 <__gesf2+0x3c>
 8002406:	2a00      	cmp	r2, #0
 8002408:	d11b      	bne.n	8002442 <__gesf2+0x5a>
 800240a:	2c00      	cmp	r4, #0
 800240c:	d101      	bne.n	8002412 <__gesf2+0x2a>
 800240e:	2e00      	cmp	r6, #0
 8002410:	d01c      	beq.n	800244c <__gesf2+0x64>
 8002412:	2d00      	cmp	r5, #0
 8002414:	d00c      	beq.n	8002430 <__gesf2+0x48>
 8002416:	4283      	cmp	r3, r0
 8002418:	d01c      	beq.n	8002454 <__gesf2+0x6c>
 800241a:	2102      	movs	r1, #2
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	4008      	ands	r0, r1
 8002420:	3801      	subs	r0, #1
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	2e00      	cmp	r6, #0
 8002426:	d122      	bne.n	800246e <__gesf2+0x86>
 8002428:	2a00      	cmp	r2, #0
 800242a:	d1f4      	bne.n	8002416 <__gesf2+0x2e>
 800242c:	2d00      	cmp	r5, #0
 800242e:	d1f2      	bne.n	8002416 <__gesf2+0x2e>
 8002430:	2800      	cmp	r0, #0
 8002432:	d1f6      	bne.n	8002422 <__gesf2+0x3a>
 8002434:	2001      	movs	r0, #1
 8002436:	4240      	negs	r0, r0
 8002438:	e7f3      	b.n	8002422 <__gesf2+0x3a>
 800243a:	2d00      	cmp	r5, #0
 800243c:	d117      	bne.n	800246e <__gesf2+0x86>
 800243e:	2cff      	cmp	r4, #255	; 0xff
 8002440:	d0f0      	beq.n	8002424 <__gesf2+0x3c>
 8002442:	2c00      	cmp	r4, #0
 8002444:	d1e7      	bne.n	8002416 <__gesf2+0x2e>
 8002446:	2e00      	cmp	r6, #0
 8002448:	d1e5      	bne.n	8002416 <__gesf2+0x2e>
 800244a:	e7e6      	b.n	800241a <__gesf2+0x32>
 800244c:	2000      	movs	r0, #0
 800244e:	2d00      	cmp	r5, #0
 8002450:	d0e7      	beq.n	8002422 <__gesf2+0x3a>
 8002452:	e7e2      	b.n	800241a <__gesf2+0x32>
 8002454:	42a2      	cmp	r2, r4
 8002456:	dc05      	bgt.n	8002464 <__gesf2+0x7c>
 8002458:	dbea      	blt.n	8002430 <__gesf2+0x48>
 800245a:	42b5      	cmp	r5, r6
 800245c:	d802      	bhi.n	8002464 <__gesf2+0x7c>
 800245e:	d3e7      	bcc.n	8002430 <__gesf2+0x48>
 8002460:	2000      	movs	r0, #0
 8002462:	e7de      	b.n	8002422 <__gesf2+0x3a>
 8002464:	4243      	negs	r3, r0
 8002466:	4158      	adcs	r0, r3
 8002468:	0040      	lsls	r0, r0, #1
 800246a:	3801      	subs	r0, #1
 800246c:	e7d9      	b.n	8002422 <__gesf2+0x3a>
 800246e:	2002      	movs	r0, #2
 8002470:	4240      	negs	r0, r0
 8002472:	e7d6      	b.n	8002422 <__gesf2+0x3a>

08002474 <__lesf2>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	0042      	lsls	r2, r0, #1
 8002478:	0245      	lsls	r5, r0, #9
 800247a:	024e      	lsls	r6, r1, #9
 800247c:	004c      	lsls	r4, r1, #1
 800247e:	0fc3      	lsrs	r3, r0, #31
 8002480:	0a6d      	lsrs	r5, r5, #9
 8002482:	0e12      	lsrs	r2, r2, #24
 8002484:	0a76      	lsrs	r6, r6, #9
 8002486:	0e24      	lsrs	r4, r4, #24
 8002488:	0fc8      	lsrs	r0, r1, #31
 800248a:	2aff      	cmp	r2, #255	; 0xff
 800248c:	d00b      	beq.n	80024a6 <__lesf2+0x32>
 800248e:	2cff      	cmp	r4, #255	; 0xff
 8002490:	d00d      	beq.n	80024ae <__lesf2+0x3a>
 8002492:	2a00      	cmp	r2, #0
 8002494:	d11f      	bne.n	80024d6 <__lesf2+0x62>
 8002496:	2c00      	cmp	r4, #0
 8002498:	d116      	bne.n	80024c8 <__lesf2+0x54>
 800249a:	2e00      	cmp	r6, #0
 800249c:	d114      	bne.n	80024c8 <__lesf2+0x54>
 800249e:	2000      	movs	r0, #0
 80024a0:	2d00      	cmp	r5, #0
 80024a2:	d010      	beq.n	80024c6 <__lesf2+0x52>
 80024a4:	e009      	b.n	80024ba <__lesf2+0x46>
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	d10c      	bne.n	80024c4 <__lesf2+0x50>
 80024aa:	2cff      	cmp	r4, #255	; 0xff
 80024ac:	d113      	bne.n	80024d6 <__lesf2+0x62>
 80024ae:	2e00      	cmp	r6, #0
 80024b0:	d108      	bne.n	80024c4 <__lesf2+0x50>
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d008      	beq.n	80024c8 <__lesf2+0x54>
 80024b6:	4283      	cmp	r3, r0
 80024b8:	d012      	beq.n	80024e0 <__lesf2+0x6c>
 80024ba:	2102      	movs	r1, #2
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	4008      	ands	r0, r1
 80024c0:	3801      	subs	r0, #1
 80024c2:	e000      	b.n	80024c6 <__lesf2+0x52>
 80024c4:	2002      	movs	r0, #2
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	d1f4      	bne.n	80024b6 <__lesf2+0x42>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1fa      	bne.n	80024c6 <__lesf2+0x52>
 80024d0:	2001      	movs	r0, #1
 80024d2:	4240      	negs	r0, r0
 80024d4:	e7f7      	b.n	80024c6 <__lesf2+0x52>
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d1ed      	bne.n	80024b6 <__lesf2+0x42>
 80024da:	2e00      	cmp	r6, #0
 80024dc:	d1eb      	bne.n	80024b6 <__lesf2+0x42>
 80024de:	e7ec      	b.n	80024ba <__lesf2+0x46>
 80024e0:	42a2      	cmp	r2, r4
 80024e2:	dc05      	bgt.n	80024f0 <__lesf2+0x7c>
 80024e4:	dbf2      	blt.n	80024cc <__lesf2+0x58>
 80024e6:	42b5      	cmp	r5, r6
 80024e8:	d802      	bhi.n	80024f0 <__lesf2+0x7c>
 80024ea:	d3ef      	bcc.n	80024cc <__lesf2+0x58>
 80024ec:	2000      	movs	r0, #0
 80024ee:	e7ea      	b.n	80024c6 <__lesf2+0x52>
 80024f0:	4243      	negs	r3, r0
 80024f2:	4158      	adcs	r0, r3
 80024f4:	0040      	lsls	r0, r0, #1
 80024f6:	3801      	subs	r0, #1
 80024f8:	e7e5      	b.n	80024c6 <__lesf2+0x52>
 80024fa:	46c0      	nop			; (mov r8, r8)

080024fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_DMA_Init+0x38>)
 8002504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_DMA_Init+0x38>)
 8002508:	2101      	movs	r1, #1
 800250a:	430a      	orrs	r2, r1
 800250c:	639a      	str	r2, [r3, #56]	; 0x38
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_DMA_Init+0x38>)
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2102      	movs	r1, #2
 800251e:	2009      	movs	r0, #9
 8002520:	f003 f80c 	bl	800553c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002524:	2009      	movs	r0, #9
 8002526:	f003 f81e 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	40021000 	.word	0x40021000

08002538 <doseFlashHasPackedMessage>:
* Input          : None
* Output         : 
* Return         : ture/false
*******************************************************************************/
bool doseFlashHasPackedMessage(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
    uint16_t length;
    uint16_t getHead;    

    /*Is head matched*/ 
    getHead = (uint16_t)(*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR ));      
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <doseFlashHasPackedMessage+0x3c>)
 8002540:	1dbb      	adds	r3, r7, #6
 8002542:	8812      	ldrh	r2, [r2, #0]
 8002544:	801a      	strh	r2, [r3, #0]
    if( EEPPROM_PACKAGEHEAD != getHead )
 8002546:	1dbb      	adds	r3, r7, #6
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <doseFlashHasPackedMessage+0x40>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d001      	beq.n	8002554 <doseFlashHasPackedMessage+0x1c>
    {
        return false;
 8002550:	2300      	movs	r3, #0
 8002552:	e00a      	b.n	800256a <doseFlashHasPackedMessage+0x32>
    }
    
    /*Is length zero*/
    length = (*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+2));
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <doseFlashHasPackedMessage+0x44>)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	801a      	strh	r2, [r3, #0]
    if( 0 == length)
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <doseFlashHasPackedMessage+0x30>
    {
        return false;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <doseFlashHasPackedMessage+0x32>
    }
    
    return true;
 8002568:	2301      	movs	r3, #1
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	0800f800 	.word	0x0800f800
 8002578:	0000aa55 	.word	0x0000aa55
 800257c:	0800f802 	.word	0x0800f802

08002580 <getValuablePackedMessageLengthofFlash>:
* Input          : None
* Output         : 
* Return         : valuable length
*******************************************************************************/
uint16_t getValuablePackedMessageLengthofFlash( void )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
    uint16_t length;
         
    /*Is head matched*/       
    if( EEPPROM_PACKAGEHEAD != (*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR )) )
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <getValuablePackedMessageLengthofFlash+0x28>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <getValuablePackedMessageLengthofFlash+0x2c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d001      	beq.n	8002594 <getValuablePackedMessageLengthofFlash+0x14>
    {
        return 0;
 8002590:	2300      	movs	r3, #0
 8002592:	e005      	b.n	80025a0 <getValuablePackedMessageLengthofFlash+0x20>
    }
    
    /*Get length*/
    length = (uint16_t)(*(uint16_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+2));   
 8002594:	4a06      	ldr	r2, [pc, #24]	; (80025b0 <getValuablePackedMessageLengthofFlash+0x30>)
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	801a      	strh	r2, [r3, #0]
    
    return length;
 800259c:	1dbb      	adds	r3, r7, #6
 800259e:	881b      	ldrh	r3, [r3, #0]
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	0800f800 	.word	0x0800f800
 80025ac:	0000aa55 	.word	0x0000aa55
 80025b0:	0800f802 	.word	0x0800f802

080025b4 <readPackedMessageFromFlash>:
* Input          : buff:point to first location of received buffer.length:Maxmum length of reception
* Output         : 
* Return         : reception length
*******************************************************************************/
uint16_t readPackedMessageFromFlash( uint8_t *buff , uint16_t length)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	000a      	movs	r2, r1
 80025be:	1cbb      	adds	r3, r7, #2
 80025c0:	801a      	strh	r2, [r3, #0]
    int i;
    uint16_t getLength;
    
    if( !doseFlashHasPackedMessage() )
 80025c2:	f7ff ffb9 	bl	8002538 <doseFlashHasPackedMessage>
 80025c6:	0003      	movs	r3, r0
 80025c8:	001a      	movs	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	4053      	eors	r3, r2
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <readPackedMessageFromFlash+0x24>
        return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e02f      	b.n	8002638 <readPackedMessageFromFlash+0x84>
    
    /*Get valuable length*/
    getLength = getValuablePackedMessageLengthofFlash();
 80025d8:	230a      	movs	r3, #10
 80025da:	18fc      	adds	r4, r7, r3
 80025dc:	f7ff ffd0 	bl	8002580 <getValuablePackedMessageLengthofFlash>
 80025e0:	0003      	movs	r3, r0
 80025e2:	8023      	strh	r3, [r4, #0]
    
    /*Read out message*/
    for(i=0;i<MIN(getLength,length);i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e00c      	b.n	8002604 <readPackedMessageFromFlash+0x50>
    {
        buff[i]= *(uint8_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+8+i);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <readPackedMessageFromFlash+0x8c>)
 80025ee:	4694      	mov	ip, r2
 80025f0:	4463      	add	r3, ip
 80025f2:	0019      	movs	r1, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	18d3      	adds	r3, r2, r3
 80025fa:	780a      	ldrb	r2, [r1, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
    for(i=0;i<MIN(getLength,length);i++)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3301      	adds	r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	1cbb      	adds	r3, r7, #2
 8002606:	220a      	movs	r2, #10
 8002608:	18ba      	adds	r2, r7, r2
 800260a:	8810      	ldrh	r0, [r2, #0]
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b299      	uxth	r1, r3
 8002610:	b282      	uxth	r2, r0
 8002612:	4291      	cmp	r1, r2
 8002614:	d900      	bls.n	8002618 <readPackedMessageFromFlash+0x64>
 8002616:	1c03      	adds	r3, r0, #0
 8002618:	b29b      	uxth	r3, r3
 800261a:	001a      	movs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4293      	cmp	r3, r2
 8002620:	dbe3      	blt.n	80025ea <readPackedMessageFromFlash+0x36>
    }     
    
    return MIN(getLength,length);
 8002622:	1cbb      	adds	r3, r7, #2
 8002624:	220a      	movs	r2, #10
 8002626:	18ba      	adds	r2, r7, r2
 8002628:	8810      	ldrh	r0, [r2, #0]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b299      	uxth	r1, r3
 800262e:	b282      	uxth	r2, r0
 8002630:	4291      	cmp	r1, r2
 8002632:	d900      	bls.n	8002636 <readPackedMessageFromFlash+0x82>
 8002634:	1c03      	adds	r3, r0, #0
 8002636:	b29b      	uxth	r3, r3
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b005      	add	sp, #20
 800263e:	bd90      	pop	{r4, r7, pc}
 8002640:	0800f808 	.word	0x0800f808

08002644 <writeMessageToFlash>:
* Input          : buff:pointer of first data, length: write length
* Output         : 
* Return         : true/false
*******************************************************************************/
bool writeMessageToFlash( uint8_t *buff , uint16_t length)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	b0b9      	sub	sp, #228	; 0xe4
 8002648:	af00      	add	r7, sp, #0
 800264a:	23b4      	movs	r3, #180	; 0xb4
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	6018      	str	r0, [r3, #0]
 8002650:	000b      	movs	r3, r1
 8002652:	21b2      	movs	r1, #178	; 0xb2
 8002654:	187a      	adds	r2, r7, r1
 8002656:	8013      	strh	r3, [r2, #0]
    uint64_t temp;
    int i;
    FLASH_EraseInitTypeDef My_Flash;
    
    /*Protection*/
    if( (length+4) > STM32G0xx_PAGE_SIZE )
 8002658:	187b      	adds	r3, r7, r1
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	4bcf      	ldr	r3, [pc, #828]	; (800299c <writeMessageToFlash+0x358>)
 800265e:	429a      	cmp	r2, r3
 8002660:	d901      	bls.n	8002666 <writeMessageToFlash+0x22>
    {
        return false;
 8002662:	2300      	movs	r3, #0
 8002664:	e195      	b.n	8002992 <writeMessageToFlash+0x34e>
    }
    
    HAL_FLASH_Unlock();
 8002666:	f003 fb2d 	bl	8005cc4 <HAL_FLASH_Unlock>

    My_Flash.TypeErase = FLASH_TYPEERASE_PAGES;  
 800266a:	2110      	movs	r1, #16
 800266c:	20b0      	movs	r0, #176	; 0xb0
 800266e:	180b      	adds	r3, r1, r0
 8002670:	19da      	adds	r2, r3, r7
 8002672:	2302      	movs	r3, #2
 8002674:	6013      	str	r3, [r2, #0]
    My_Flash.Page        = 31;
 8002676:	180b      	adds	r3, r1, r0
 8002678:	19da      	adds	r2, r3, r7
 800267a:	231f      	movs	r3, #31
 800267c:	6093      	str	r3, [r2, #8]
    My_Flash.NbPages = 1;                        
 800267e:	180b      	adds	r3, r1, r0
 8002680:	19da      	adds	r2, r3, r7
 8002682:	2301      	movs	r3, #1
 8002684:	60d3      	str	r3, [r2, #12]
    
    uint32_t PageError = 0;                    
 8002686:	2300      	movs	r3, #0
 8002688:	22bc      	movs	r2, #188	; 0xbc
 800268a:	18ba      	adds	r2, r7, r2
 800268c:	6013      	str	r3, [r2, #0]
    if (HAL_FLASHEx_Erase(&My_Flash, &PageError) != HAL_OK) {
 800268e:	230c      	movs	r3, #12
 8002690:	181b      	adds	r3, r3, r0
 8002692:	19da      	adds	r2, r3, r7
 8002694:	180b      	adds	r3, r1, r0
 8002696:	19db      	adds	r3, r3, r7
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f003 fbc6 	bl	8005e2c <HAL_FLASHEx_Erase>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d001      	beq.n	80026a8 <writeMessageToFlash+0x64>
        return false;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e174      	b.n	8002992 <writeMessageToFlash+0x34e>
    }  

    
    temp = EEPPROM_PACKAGEHEAD |  (uint64_t)length << 16;    
 80026a8:	23b2      	movs	r3, #178	; 0xb2
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2298      	movs	r2, #152	; 0x98
 80026b2:	18b9      	adds	r1, r7, r2
 80026b4:	600b      	str	r3, [r1, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	219c      	movs	r1, #156	; 0x9c
 80026ba:	1879      	adds	r1, r7, r1
 80026bc:	600b      	str	r3, [r1, #0]
 80026be:	18bb      	adds	r3, r7, r2
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0011      	movs	r1, r2
 80026c6:	0c0d      	lsrs	r5, r1, #16
 80026c8:	0013      	movs	r3, r2
 80026ca:	041c      	lsls	r4, r3, #16
 80026cc:	4bb4      	ldr	r3, [pc, #720]	; (80029a0 <writeMessageToFlash+0x35c>)
 80026ce:	4323      	orrs	r3, r4
 80026d0:	22d0      	movs	r2, #208	; 0xd0
 80026d2:	18b9      	adds	r1, r7, r2
 80026d4:	600b      	str	r3, [r1, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	432b      	orrs	r3, r5
 80026da:	21d4      	movs	r1, #212	; 0xd4
 80026dc:	1879      	adds	r1, r7, r1
 80026de:	600b      	str	r3, [r1, #0]
    
    /*Write head*/
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR, temp);
 80026e0:	18bb      	adds	r3, r7, r2
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	49af      	ldr	r1, [pc, #700]	; (80029a4 <writeMessageToFlash+0x360>)
 80026e8:	2001      	movs	r0, #1
 80026ea:	f003 fa9d 	bl	8005c28 <HAL_FLASH_Program>
    /*Write length*/
    // HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR+8, length);
    
    
    /*Write datas*/
    for(i=0 ;i<length/8 ;i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	22dc      	movs	r2, #220	; 0xdc
 80026f2:	18ba      	adds	r2, r7, r2
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e117      	b.n	8002928 <writeMessageToFlash+0x2e4>
    {
        temp = buff[8*i] | (uint64_t)buff[8*i+1]<<8 | (uint64_t)buff[8*i+2]<<16 | (uint64_t)buff[8*i+3]<<24\
 80026f8:	26dc      	movs	r6, #220	; 0xdc
 80026fa:	19bb      	adds	r3, r7, r6
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	001a      	movs	r2, r3
 8002702:	21b4      	movs	r1, #180	; 0xb4
 8002704:	187b      	adds	r3, r7, r1
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	189b      	adds	r3, r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2590      	movs	r5, #144	; 0x90
 800270e:	197a      	adds	r2, r7, r5
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	2300      	movs	r3, #0
 8002714:	2294      	movs	r2, #148	; 0x94
 8002716:	18ba      	adds	r2, r7, r2
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	19bb      	adds	r3, r7, r6
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	1878      	adds	r0, r7, r1
 8002724:	6803      	ldr	r3, [r0, #0]
 8002726:	189b      	adds	r3, r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2288      	movs	r2, #136	; 0x88
 800272c:	18b8      	adds	r0, r7, r2
 800272e:	6003      	str	r3, [r0, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	208c      	movs	r0, #140	; 0x8c
 8002734:	1838      	adds	r0, r7, r0
 8002736:	6003      	str	r3, [r0, #0]
 8002738:	18ba      	adds	r2, r7, r2
 800273a:	6811      	ldr	r1, [r2, #0]
 800273c:	6852      	ldr	r2, [r2, #4]
 800273e:	000b      	movs	r3, r1
 8002740:	0e1b      	lsrs	r3, r3, #24
 8002742:	0010      	movs	r0, r2
 8002744:	0200      	lsls	r0, r0, #8
 8002746:	24ac      	movs	r4, #172	; 0xac
 8002748:	193d      	adds	r5, r7, r4
 800274a:	6028      	str	r0, [r5, #0]
 800274c:	1938      	adds	r0, r7, r4
 800274e:	6800      	ldr	r0, [r0, #0]
 8002750:	4318      	orrs	r0, r3
 8002752:	193c      	adds	r4, r7, r4
 8002754:	6020      	str	r0, [r4, #0]
 8002756:	000b      	movs	r3, r1
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	24a8      	movs	r4, #168	; 0xa8
 800275c:	193a      	adds	r2, r7, r4
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	2590      	movs	r5, #144	; 0x90
 8002762:	197a      	adds	r2, r7, r5
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	6852      	ldr	r2, [r2, #4]
 8002768:	0008      	movs	r0, r1
 800276a:	193c      	adds	r4, r7, r4
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	6864      	ldr	r4, [r4, #4]
 8002770:	001d      	movs	r5, r3
 8002772:	4328      	orrs	r0, r5
 8002774:	2580      	movs	r5, #128	; 0x80
 8002776:	197d      	adds	r5, r7, r5
 8002778:	6028      	str	r0, [r5, #0]
 800277a:	0023      	movs	r3, r4
 800277c:	431a      	orrs	r2, r3
 800277e:	2084      	movs	r0, #132	; 0x84
 8002780:	1838      	adds	r0, r7, r0
 8002782:	6002      	str	r2, [r0, #0]
 8002784:	19ba      	adds	r2, r7, r6
 8002786:	6813      	ldr	r3, [r2, #0]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	23b4      	movs	r3, #180	; 0xb4
 800278e:	18f8      	adds	r0, r7, r3
 8002790:	6803      	ldr	r3, [r0, #0]
 8002792:	189b      	adds	r3, r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
 8002798:	2300      	movs	r3, #0
 800279a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800279c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800279e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027a0:	000b      	movs	r3, r1
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	0010      	movs	r0, r2
 80027a6:	0400      	lsls	r0, r0, #16
 80027a8:	24a4      	movs	r4, #164	; 0xa4
 80027aa:	193d      	adds	r5, r7, r4
 80027ac:	6028      	str	r0, [r5, #0]
 80027ae:	1938      	adds	r0, r7, r4
 80027b0:	6800      	ldr	r0, [r0, #0]
 80027b2:	4318      	orrs	r0, r3
 80027b4:	193c      	adds	r4, r7, r4
 80027b6:	6020      	str	r0, [r4, #0]
 80027b8:	000b      	movs	r3, r1
 80027ba:	041b      	lsls	r3, r3, #16
 80027bc:	24a0      	movs	r4, #160	; 0xa0
 80027be:	193a      	adds	r2, r7, r4
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	2580      	movs	r5, #128	; 0x80
 80027c4:	197a      	adds	r2, r7, r5
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	6852      	ldr	r2, [r2, #4]
 80027ca:	0008      	movs	r0, r1
 80027cc:	193c      	adds	r4, r7, r4
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	6864      	ldr	r4, [r4, #4]
 80027d2:	001d      	movs	r5, r3
 80027d4:	4328      	orrs	r0, r5
 80027d6:	6738      	str	r0, [r7, #112]	; 0x70
 80027d8:	0023      	movs	r3, r4
 80027da:	431a      	orrs	r2, r3
 80027dc:	677a      	str	r2, [r7, #116]	; 0x74
 80027de:	19ba      	adds	r2, r7, r6
 80027e0:	6813      	ldr	r3, [r2, #0]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	1cda      	adds	r2, r3, #3
 80027e6:	23b4      	movs	r3, #180	; 0xb4
 80027e8:	18f8      	adds	r0, r7, r3
 80027ea:	6803      	ldr	r3, [r0, #0]
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80027f2:	2300      	movs	r3, #0
 80027f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f8:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 80027fa:	001a      	movs	r2, r3
 80027fc:	0a12      	lsrs	r2, r2, #8
 80027fe:	667a      	str	r2, [r7, #100]	; 0x64
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	663b      	str	r3, [r7, #96]	; 0x60
 8002804:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002806:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002808:	0008      	movs	r0, r1
 800280a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800280c:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800280e:	001d      	movs	r5, r3
 8002810:	4328      	orrs	r0, r5
 8002812:	65b8      	str	r0, [r7, #88]	; 0x58
 8002814:	0023      	movs	r3, r4
 8002816:	431a      	orrs	r2, r3
 8002818:	65fa      	str	r2, [r7, #92]	; 0x5c
        | (uint64_t)buff[8*i+4]<<32 | (uint64_t)buff[8*i+5]<<40 | (uint64_t)buff[8*i+6]<<48 | (uint64_t)buff[8*i+7]<<56;
 800281a:	19ba      	adds	r2, r7, r6
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	1d1a      	adds	r2, r3, #4
 8002822:	23b4      	movs	r3, #180	; 0xb4
 8002824:	18f9      	adds	r1, r7, r3
 8002826:	680b      	ldr	r3, [r1, #0]
 8002828:	189b      	adds	r3, r3, r2
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	653b      	str	r3, [r7, #80]	; 0x50
 800282e:	2300      	movs	r3, #0
 8002830:	657b      	str	r3, [r7, #84]	; 0x54
 8002832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002834:	001b      	movs	r3, r3
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	2300      	movs	r3, #0
 800283a:	64bb      	str	r3, [r7, #72]	; 0x48
 800283c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800283e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002840:	0008      	movs	r0, r1
 8002842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002844:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002846:	001d      	movs	r5, r3
 8002848:	4328      	orrs	r0, r5
 800284a:	6438      	str	r0, [r7, #64]	; 0x40
 800284c:	0023      	movs	r3, r4
 800284e:	431a      	orrs	r2, r3
 8002850:	647a      	str	r2, [r7, #68]	; 0x44
 8002852:	19ba      	adds	r2, r7, r6
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	1d5a      	adds	r2, r3, #5
 800285a:	23b4      	movs	r3, #180	; 0xb4
 800285c:	18f9      	adds	r1, r7, r3
 800285e:	680b      	ldr	r3, [r1, #0]
 8002860:	189b      	adds	r3, r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	63bb      	str	r3, [r7, #56]	; 0x38
 8002866:	2300      	movs	r3, #0
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
 8002874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002878:	0008      	movs	r0, r1
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800287e:	001d      	movs	r5, r3
 8002880:	4328      	orrs	r0, r5
 8002882:	62b8      	str	r0, [r7, #40]	; 0x28
 8002884:	0023      	movs	r3, r4
 8002886:	431a      	orrs	r2, r3
 8002888:	62fa      	str	r2, [r7, #44]	; 0x2c
 800288a:	19ba      	adds	r2, r7, r6
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1d9a      	adds	r2, r3, #6
 8002892:	23b4      	movs	r3, #180	; 0xb4
 8002894:	18f9      	adds	r1, r7, r3
 8002896:	680b      	ldr	r3, [r1, #0]
 8002898:	189b      	adds	r3, r3, r2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	2300      	movs	r3, #0
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b0:	0008      	movs	r0, r1
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	69fc      	ldr	r4, [r7, #28]
 80028b6:	001d      	movs	r5, r3
 80028b8:	4328      	orrs	r0, r5
 80028ba:	6138      	str	r0, [r7, #16]
 80028bc:	0023      	movs	r3, r4
 80028be:	431a      	orrs	r2, r3
 80028c0:	617a      	str	r2, [r7, #20]
 80028c2:	19ba      	adds	r2, r7, r6
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	1dda      	adds	r2, r3, #7
 80028ca:	23b4      	movs	r3, #180	; 0xb4
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	2300      	movs	r3, #0
 80028e2:	603b      	str	r3, [r7, #0]
        temp = buff[8*i] | (uint64_t)buff[8*i+1]<<8 | (uint64_t)buff[8*i+2]<<16 | (uint64_t)buff[8*i+3]<<24\
 80028e4:	693c      	ldr	r4, [r7, #16]
 80028e6:	697d      	ldr	r5, [r7, #20]
 80028e8:	0023      	movs	r3, r4
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	0008      	movs	r0, r1
 80028f0:	4303      	orrs	r3, r0
 80028f2:	20d0      	movs	r0, #208	; 0xd0
 80028f4:	1838      	adds	r0, r7, r0
 80028f6:	6003      	str	r3, [r0, #0]
 80028f8:	002b      	movs	r3, r5
 80028fa:	4313      	orrs	r3, r2
 80028fc:	22d4      	movs	r2, #212	; 0xd4
 80028fe:	18ba      	adds	r2, r7, r2
 8002900:	6013      	str	r3, [r2, #0]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR+8+8*i, temp);
 8002902:	19bb      	adds	r3, r7, r6
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <writeMessageToFlash+0x364>)
 8002908:	4694      	mov	ip, r2
 800290a:	4463      	add	r3, ip
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	0019      	movs	r1, r3
 8002910:	20d0      	movs	r0, #208	; 0xd0
 8002912:	183b      	adds	r3, r7, r0
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2001      	movs	r0, #1
 800291a:	f003 f985 	bl	8005c28 <HAL_FLASH_Program>
    for(i=0 ;i<length/8 ;i++)
 800291e:	19bb      	adds	r3, r7, r6
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	19ba      	adds	r2, r7, r6
 8002926:	6013      	str	r3, [r2, #0]
 8002928:	23b2      	movs	r3, #178	; 0xb2
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	b29b      	uxth	r3, r3
 8002932:	001a      	movs	r2, r3
 8002934:	21dc      	movs	r1, #220	; 0xdc
 8002936:	187b      	adds	r3, r7, r1
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4293      	cmp	r3, r2
 800293c:	da00      	bge.n	8002940 <writeMessageToFlash+0x2fc>
 800293e:	e6db      	b.n	80026f8 <writeMessageToFlash+0xb4>
    //     HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, STM32G0xx_FLASH_PAGE31_STARTADDR+8, temp);
    // }

    
    /*Read out and check*/
    for(i=0 ;i<length ;i++)
 8002940:	2300      	movs	r3, #0
 8002942:	187a      	adds	r2, r7, r1
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e019      	b.n	800297c <writeMessageToFlash+0x338>
    {
        if( *(uint8_t*)(STM32G0xx_FLASH_PAGE31_STARTADDR+8+i) != buff[i] )
 8002948:	21dc      	movs	r1, #220	; 0xdc
 800294a:	187b      	adds	r3, r7, r1
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <writeMessageToFlash+0x368>)
 8002950:	4694      	mov	ip, r2
 8002952:	4463      	add	r3, ip
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	187b      	adds	r3, r7, r1
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	21b4      	movs	r1, #180	; 0xb4
 800295c:	1879      	adds	r1, r7, r1
 800295e:	6809      	ldr	r1, [r1, #0]
 8002960:	18cb      	adds	r3, r1, r3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d003      	beq.n	8002970 <writeMessageToFlash+0x32c>
        {
            HAL_FLASH_Lock();
 8002968:	f003 f9d0 	bl	8005d0c <HAL_FLASH_Lock>
            return false;
 800296c:	2300      	movs	r3, #0
 800296e:	e010      	b.n	8002992 <writeMessageToFlash+0x34e>
    for(i=0 ;i<length ;i++)
 8002970:	22dc      	movs	r2, #220	; 0xdc
 8002972:	18bb      	adds	r3, r7, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3301      	adds	r3, #1
 8002978:	18ba      	adds	r2, r7, r2
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	23b2      	movs	r3, #178	; 0xb2
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	22dc      	movs	r2, #220	; 0xdc
 8002984:	18ba      	adds	r2, r7, r2
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	dbdd      	blt.n	8002948 <writeMessageToFlash+0x304>
        }
    }    
    
    HAL_FLASH_Lock();
 800298c:	f003 f9be 	bl	8005d0c <HAL_FLASH_Lock>
    return true;    
 8002990:	2301      	movs	r3, #1
}
 8002992:	0018      	movs	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	b039      	add	sp, #228	; 0xe4
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	000007fc 	.word	0x000007fc
 80029a0:	0000aa55 	.word	0x0000aa55
 80029a4:	0800f800 	.word	0x0800f800
 80029a8:	01001f01 	.word	0x01001f01
 80029ac:	0800f808 	.word	0x0800f808

080029b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80029b0:	b590      	push	{r4, r7, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b6:	240c      	movs	r4, #12
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	0018      	movs	r0, r3
 80029bc:	2314      	movs	r3, #20
 80029be:	001a      	movs	r2, r3
 80029c0:	2100      	movs	r1, #0
 80029c2:	f005 f8ac 	bl	8007b1e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	635a      	str	r2, [r3, #52]	; 0x34
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	2201      	movs	r2, #1
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029e4:	2102      	movs	r1, #2
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <MX_GPIO_Init+0xc4>)
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	2202      	movs	r2, #2
 80029f0:	4013      	ands	r3, r2
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_K1_Pin|SW_K2_Pin|SW_K3_Pin|SW_K4_Pin
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <MX_GPIO_Init+0xc8>)
 80029fa:	601a      	str	r2, [r3, #0]
                          |SW_K5_Pin|SW_K8_Pin|SW_K6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	22c4      	movs	r2, #196	; 0xc4
 8002a00:	0392      	lsls	r2, r2, #14
 8002a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	193a      	adds	r2, r7, r4
 8002a0c:	23a0      	movs	r3, #160	; 0xa0
 8002a0e:	05db      	lsls	r3, r3, #23
 8002a10:	0011      	movs	r1, r2
 8002a12:	0018      	movs	r0, r3
 8002a14:	f003 faae 	bl	8005f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_K7_Pin;
 8002a18:	0021      	movs	r1, r4
 8002a1a:	187b      	adds	r3, r7, r1
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	22c4      	movs	r2, #196	; 0xc4
 8002a24:	0392      	lsls	r2, r2, #14
 8002a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_K7_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <MX_GPIO_Init+0xcc>)
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f003 fa9d 	bl	8005f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	2005      	movs	r0, #5
 8002a40:	f002 fd7c 	bl	800553c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002a44:	2005      	movs	r0, #5
 8002a46:	f002 fd8e 	bl	8005566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 1, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	2006      	movs	r0, #6
 8002a50:	f002 fd74 	bl	800553c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002a54:	2006      	movs	r0, #6
 8002a56:	f002 fd86 	bl	8005566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f002 fd6c 	bl	800553c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002a64:	2007      	movs	r0, #7
 8002a66:	f002 fd7e 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b009      	add	sp, #36	; 0x24
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	40021000 	.word	0x40021000
 8002a78:	000081e3 	.word	0x000081e3
 8002a7c:	50000400 	.word	0x50000400

08002a80 <my_gpio_deinit>:

/* USER CODE BEGIN 2 */
void my_gpio_deinit(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	0018      	movs	r0, r3
 8002a8a:	2314      	movs	r3, #20
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f005 f845 	bl	8007b1e <memset>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_K1_Pin|SW_K2_Pin|SW_K3_Pin|SW_K4_Pin
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <my_gpio_deinit+0x84>)
 8002a98:	601a      	str	r2, [r3, #0]
                          |SW_K5_Pin|SW_K8_Pin|SW_K6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa6:	1d3a      	adds	r2, r7, #4
 8002aa8:	23a0      	movs	r3, #160	; 0xa0
 8002aaa:	05db      	lsls	r3, r3, #23
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f003 fa60 	bl	8005f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_K7_Pin;
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_K7_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <my_gpio_deinit+0x88>)
 8002aca:	0019      	movs	r1, r3
 8002acc:	0010      	movs	r0, r2
 8002ace:	f003 fa51 	bl	8005f74 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ(EXTI0_1_IRQn);
 8002ad2:	2005      	movs	r0, #5
 8002ad4:	f002 fd57 	bl	8005586 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002ad8:	2006      	movs	r0, #6
 8002ada:	f002 fd54 	bl	8005586 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);  
 8002ade:	2007      	movs	r0, #7
 8002ae0:	f002 fd51 	bl	8005586 <HAL_NVIC_DisableIRQ>

  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002ae4:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <my_gpio_deinit+0x8c>)
 8002ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <my_gpio_deinit+0x8c>)
 8002aea:	2101      	movs	r1, #1
 8002aec:	438a      	bics	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_GPIOB_CLK_DISABLE();  
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <my_gpio_deinit+0x8c>)
 8002af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <my_gpio_deinit+0x8c>)
 8002af6:	2102      	movs	r1, #2
 8002af8:	438a      	bics	r2, r1
 8002afa:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b006      	add	sp, #24
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	000081e3 	.word	0x000081e3
 8002b08:	50000400 	.word	0x50000400
 8002b0c:	40021000 	.word	0x40021000

08002b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	0002      	movs	r2, r0
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b7f      	cmp	r3, #127	; 0x7f
 8002b22:	d809      	bhi.n	8002b38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	001a      	movs	r2, r3
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	401a      	ands	r2, r3
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <__NVIC_EnableIRQ+0x30>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	4091      	lsls	r1, r2
 8002b34:	000a      	movs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b7f      	cmp	r3, #127	; 0x7f
 8002b58:	d828      	bhi.n	8002bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	; (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	33c0      	adds	r3, #192	; 0xc0
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	589b      	ldr	r3, [r3, r2]
 8002b6a:	1dfa      	adds	r2, r7, #7
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	0011      	movs	r1, r2
 8002b70:	2203      	movs	r2, #3
 8002b72:	400a      	ands	r2, r1
 8002b74:	00d2      	lsls	r2, r2, #3
 8002b76:	21ff      	movs	r1, #255	; 0xff
 8002b78:	4091      	lsls	r1, r2
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	43d2      	mvns	r2, r2
 8002b7e:	401a      	ands	r2, r3
 8002b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	401a      	ands	r2, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	2303      	movs	r3, #3
 8002b92:	4003      	ands	r3, r0
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b98:	481f      	ldr	r0, [pc, #124]	; (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	33c0      	adds	r3, #192	; 0xc0
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002baa:	e031      	b.n	8002c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	3b08      	subs	r3, #8
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	18d3      	adds	r3, r2, r3
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1dfa      	adds	r2, r7, #7
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	2203      	movs	r2, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	21ff      	movs	r1, #255	; 0xff
 8002bd4:	4091      	lsls	r1, r2
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	22ff      	movs	r2, #255	; 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0018      	movs	r0, r3
 8002bec:	2303      	movs	r3, #3
 8002bee:	4003      	ands	r3, r0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf4:	4809      	ldr	r0, [pc, #36]	; (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	001c      	movs	r4, r3
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	4023      	ands	r3, r4
 8002c00:	3b08      	subs	r3, #8
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	430a      	orrs	r2, r1
 8002c06:	3306      	adds	r3, #6
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	18c3      	adds	r3, r0, r3
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b003      	add	sp, #12
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a03      	ldr	r2, [pc, #12]	; (8002c3c <LL_I2C_EnableClockStretching+0x1c>)
 8002c2e:	401a      	ands	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	601a      	str	r2, [r3, #0]
}
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	fffdffff 	.word	0xfffdffff

08002c40 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a03      	ldr	r2, [pc, #12]	; (8002c5c <LL_I2C_DisableGeneralCall+0x1c>)
 8002c4e:	401a      	ands	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	fff7ffff 	.word	0xfff7ffff

08002c60 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <LL_I2C_SetOwnAddress2+0x28>)
 8002c72:	401a      	ands	r2, r3
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b004      	add	sp, #16
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	fffff801 	.word	0xfffff801

08002c8c <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <LL_I2C_DisableOwnAddress2+0x1c>)
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	ffff7fff 	.word	0xffff7fff

08002cac <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	0492      	lsls	r2, r2, #18
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	605a      	str	r2, [r3, #4]
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b002      	add	sp, #8
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8002cd6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <LL_APB1_GRP1_EnableClock+0x28>)
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <LL_IOP_GRP1_EnableClock+0x28>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4013      	ands	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d16:	68fb      	ldr	r3, [r7, #12]
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000

08002d24 <user_i2c_init>:

}

/* USER CODE BEGIN 1 */
void user_i2c_init(void)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b08f      	sub	sp, #60	; 0x3c
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002d2a:	241c      	movs	r4, #28
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	0018      	movs	r0, r3
 8002d30:	231c      	movs	r3, #28
 8002d32:	001a      	movs	r2, r3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f004 fef2 	bl	8007b1e <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3a:	1d3b      	adds	r3, r7, #4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	2318      	movs	r3, #24
 8002d40:	001a      	movs	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f004 feeb 	bl	8007b1e <memset>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7ff ffd5 	bl	8002cf8 <LL_IOP_GRP1_EnableClock>
  /**I2C2 GPIO Configuration
  PA11 [PA9]   ------> I2C2_SCL
  PA12 [PA10]   ------> I2C2_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2280      	movs	r2, #128	; 0x80
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	2202      	movs	r2, #2
 8002d5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2201      	movs	r2, #1
 8002d66:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	2206      	movs	r2, #6
 8002d72:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	1d3a      	adds	r2, r7, #4
 8002d76:	23a0      	movs	r3, #160	; 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f004 fcda 	bl	8007736 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002d82:	1d3b      	adds	r3, r7, #4
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	0152      	lsls	r2, r2, #5
 8002d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2201      	movs	r2, #1
 8002d9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2206      	movs	r2, #6
 8002da6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	1d3a      	adds	r2, r7, #4
 8002daa:	23a0      	movs	r3, #160	; 0xa0
 8002dac:	05db      	lsls	r3, r3, #23
 8002dae:	0011      	movs	r1, r2
 8002db0:	0018      	movs	r0, r3
 8002db2:	f004 fcc0 	bl	8007736 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	03db      	lsls	r3, r3, #15
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff ff86 	bl	8002ccc <LL_APB1_GRP1_EnableClock>

  /* I2C2 interrupt Init */
  NVIC_SetPriority(I2C2_IRQn, 0);
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2018      	movs	r0, #24
 8002dc4:	f7ff febe 	bl	8002b44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C2_IRQn);
 8002dc8:	2018      	movs	r0, #24
 8002dca:	f7ff fea1 	bl	8002b10 <__NVIC_EnableIRQ>

  /* USER CODE END I2C2_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002dce:	0021      	movs	r1, r4
 8002dd0:	187b      	adds	r3, r7, r1
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
  I2C_InitStruct.Timing = 0x10707DBC;
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <user_i2c_init+0x128>)
 8002dda:	605a      	str	r2, [r3, #4]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  I2C_InitStruct.DigitalFilter = 0;
 8002de2:	187b      	adds	r3, r7, r1
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
  I2C_InitStruct.OwnAddress1 = i2c_address[0]<<1;
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <user_i2c_init+0x12c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	001a      	movs	r2, r3
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	611a      	str	r2, [r3, #16]
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <user_i2c_init+0x130>)
 8002e04:	0019      	movs	r1, r3
 8002e06:	0010      	movs	r0, r2
 8002e08:	f004 fde6 	bl	80079d8 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C2);
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <user_i2c_init+0x130>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff ff4c 	bl	8002cac <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C2, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <user_i2c_init+0x130>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7ff ff20 	bl	8002c60 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C2);
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <user_i2c_init+0x130>)
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7ff ff32 	bl	8002c8c <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <user_i2c_init+0x130>)
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f7ff ff08 	bl	8002c40 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <user_i2c_init+0x130>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff fef4 	bl	8002c20 <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C2_Init 2 */
  set_i2c_slave_address(i2c_address[0]);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <user_i2c_init+0x12c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 f999 	bl	8003174 <set_i2c_slave_address>
  /* USER CODE END I2C2_Init 2 */

}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b00f      	add	sp, #60	; 0x3c
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	10707dbc 	.word	0x10707dbc
 8002e50:	200005dc 	.word	0x200005dc
 8002e54:	40005800 	.word	0x40005800

08002e58 <LL_I2C_Enable>:
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <LL_I2C_Disable>:
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2201      	movs	r2, #1
 8002e82:	4393      	bics	r3, r2
 8002e84:	001a      	movs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	601a      	str	r2, [r3, #0]
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <LL_I2C_EnableIT_TX>:
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_TXIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	601a      	str	r2, [r3, #0]
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b002      	add	sp, #8
 8002eac:	bd80      	pop	{r7, pc}

08002eae <LL_I2C_EnableIT_RX>:
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <LL_I2C_EnableIT_ADDR>:
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b002      	add	sp, #8
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <LL_I2C_DisableIT_ADDR>:
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	601a      	str	r2, [r3, #0]
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <LL_I2C_EnableIT_NACK>:
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2210      	movs	r2, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	601a      	str	r2, [r3, #0]
}
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <LL_I2C_DisableIT_NACK>:
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NACKIE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	4393      	bics	r3, r2
 8002f30:	001a      	movs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	601a      	str	r2, [r3, #0]
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <LL_I2C_EnableIT_STOP>:
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <LL_I2C_DisableIT_STOP>:
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_STOPIE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2220      	movs	r2, #32
 8002f68:	4393      	bics	r3, r2
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <LL_I2C_EnableIT_ERR>:
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <LL_I2C_DisableIT_ERR>:
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ERRIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	4393      	bics	r3, r2
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <LL_I2C_IsActiveFlag_TXE>:
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <LL_I2C_IsActiveFlag_TXE+0x18>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <LL_I2C_IsActiveFlag_TXE+0x1a>
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <LL_I2C_IsActiveFlag_TXIS>:
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d101      	bne.n	8002fec <LL_I2C_IsActiveFlag_TXIS+0x18>
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <LL_I2C_IsActiveFlag_RXNE>:
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2204      	movs	r2, #4
 8003004:	4013      	ands	r3, r2
 8003006:	2b04      	cmp	r3, #4
 8003008:	d101      	bne.n	800300e <LL_I2C_IsActiveFlag_RXNE+0x18>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 800300e:	2300      	movs	r3, #0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <LL_I2C_IsActiveFlag_ADDR>:
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_ADDR) == (I2C_ISR_ADDR)) ? 1UL : 0UL);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2208      	movs	r2, #8
 8003026:	4013      	ands	r3, r2
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <LL_I2C_IsActiveFlag_ADDR+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <LL_I2C_IsActiveFlag_ADDR+0x1a>
 8003030:	2300      	movs	r3, #0
}
 8003032:	0018      	movs	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}

0800303a <LL_I2C_IsActiveFlag_NACK>:
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_NACKF) == (I2C_ISR_NACKF)) ? 1UL : 0UL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	2210      	movs	r2, #16
 8003048:	4013      	ands	r3, r2
 800304a:	2b10      	cmp	r3, #16
 800304c:	d101      	bne.n	8003052 <LL_I2C_IsActiveFlag_NACK+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_I2C_IsActiveFlag_NACK+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}

0800305c <LL_I2C_IsActiveFlag_STOP>:
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2220      	movs	r2, #32
 800306a:	4013      	ands	r3, r2
 800306c:	2b20      	cmp	r3, #32
 800306e:	d101      	bne.n	8003074 <LL_I2C_IsActiveFlag_STOP+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	0018      	movs	r0, r3
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}

0800307e <LL_I2C_ClearFlag_ADDR>:
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_ADDRCF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	2208      	movs	r2, #8
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	61da      	str	r2, [r3, #28]
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}

0800309a <LL_I2C_ClearFlag_NACK>:
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	2210      	movs	r2, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	61da      	str	r2, [r3, #28]
}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	46bd      	mov	sp, r7
 80030b2:	b002      	add	sp, #8
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <LL_I2C_ClearFlag_STOP>:
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2220      	movs	r2, #32
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	61da      	str	r2, [r3, #28]
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <LL_I2C_ClearFlag_TXE>:
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(I2Cx->ISR, I2C_ISR_TXE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	619a      	str	r2, [r3, #24]
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <LL_I2C_DisableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_DisableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <LL_I2C_DisableAutoEndMode+0x1c>)
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]
}
 80030fc:	46c0      	nop			; (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fdffffff 	.word	0xfdffffff

08003108 <LL_I2C_GetTransferDirection>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_I2C_DIRECTION_WRITE
  *         @arg @ref LL_I2C_DIRECTION_READ
  */
__STATIC_INLINE uint32_t LL_I2C_GetTransferDirection(const I2C_TypeDef *I2Cx)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_DIR));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	025b      	lsls	r3, r3, #9
 8003118:	4013      	ands	r3, r2
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}

08003122 <LL_I2C_GetAddressMatchCode>:
  * @rmtoll ISR          ADDCODE       LL_I2C_GetAddressMatchCode
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0x3F
  */
__STATIC_INLINE uint32_t LL_I2C_GetAddressMatchCode(const I2C_TypeDef *I2Cx)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(I2Cx->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	0c5b      	lsrs	r3, r3, #17
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	22fe      	movs	r2, #254	; 0xfe
 8003134:	4013      	ands	r3, r2
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b002      	add	sp, #8
 800313c:	bd80      	pop	{r7, pc}

0800313e <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	b2db      	uxtb	r3, r3
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b002      	add	sp, #8
 8003152:	bd80      	pop	{r7, pc}

08003154 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	000a      	movs	r2, r1
 800315e:	1cfb      	adds	r3, r7, #3
 8003160:	701a      	strb	r2, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8003162:	1cfb      	adds	r3, r7, #3
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	629a      	str	r2, [r3, #40]	; 0x28
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <set_i2c_slave_address>:
volatile uint32_t i2c_timeout_counter = 0;
volatile uint32_t i2c_stop_timeout_flag = 0;
volatile uint32_t i2c_stop_timeout_counter = 0;

void set_i2c_slave_address(uint8_t addr)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	0002      	movs	r2, r0
 800317c:	1dfb      	adds	r3, r7, #7
 800317e:	701a      	strb	r2, [r3, #0]
  i2c_addr = (addr << 1);
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	18db      	adds	r3, r3, r3
 8003186:	b2da      	uxtb	r2, r3
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <set_i2c_slave_address+0x20>)
 800318a:	701a      	strb	r2, [r3, #0]
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200005ca 	.word	0x200005ca

08003198 <i2c2_it_enable>:
	UNUSED(rx_data);
	UNUSED(len);  
}

void i2c2_it_enable(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  LL_I2C_Enable(I2C2);
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <i2c2_it_enable+0x34>)
 800319e:	0018      	movs	r0, r3
 80031a0:	f7ff fe5a 	bl	8002e58 <LL_I2C_Enable>

  LL_I2C_EnableIT_ADDR(I2C2);
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <i2c2_it_enable+0x34>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff fe8f 	bl	8002eca <LL_I2C_EnableIT_ADDR>
  LL_I2C_EnableIT_NACK(I2C2);
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <i2c2_it_enable+0x34>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff fea8 	bl	8002f04 <LL_I2C_EnableIT_NACK>
  LL_I2C_EnableIT_ERR(I2C2);
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <i2c2_it_enable+0x34>)
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff fede 	bl	8002f78 <LL_I2C_EnableIT_ERR>
  LL_I2C_EnableIT_STOP(I2C2);
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <i2c2_it_enable+0x34>)
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff febd 	bl	8002f3e <LL_I2C_EnableIT_STOP>
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	40005800 	.word	0x40005800

080031d0 <i2c2_it_disable>:

void i2c2_it_disable(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  LL_I2C_DisableIT_ADDR(I2C2);
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <i2c2_it_disable+0x2c>)
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fe85 	bl	8002ee6 <LL_I2C_DisableIT_ADDR>
  LL_I2C_DisableIT_NACK(I2C2);
 80031dc:	4b07      	ldr	r3, [pc, #28]	; (80031fc <i2c2_it_disable+0x2c>)
 80031de:	0018      	movs	r0, r3
 80031e0:	f7ff fe9e 	bl	8002f20 <LL_I2C_DisableIT_NACK>
  LL_I2C_DisableIT_ERR(I2C2);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <i2c2_it_disable+0x2c>)
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff fed4 	bl	8002f94 <LL_I2C_DisableIT_ERR>
  LL_I2C_DisableIT_STOP(I2C2);
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <i2c2_it_disable+0x2c>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff feb3 	bl	8002f5a <LL_I2C_DisableIT_STOP>
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40005800 	.word	0x40005800

08003200 <Error_Callback>:

void Error_Callback(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <i2c2_set_send_data>:

void i2c2_set_send_data(uint8_t *tx_ptr, uint16_t len) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	000a      	movs	r2, r1
 8003216:	1cbb      	adds	r3, r7, #2
 8003218:	801a      	strh	r2, [r3, #0]
  if (len > I2C_RECEIVE_BUFFER_LEN) {
 800321a:	1cbb      	adds	r3, r7, #2
 800321c:	881a      	ldrh	r2, [r3, #0]
 800321e:	2396      	movs	r3, #150	; 0x96
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	429a      	cmp	r2, r3
 8003224:	d903      	bls.n	800322e <i2c2_set_send_data+0x22>
    len = I2C_RECEIVE_BUFFER_LEN;
 8003226:	1cbb      	adds	r3, r7, #2
 8003228:	2296      	movs	r2, #150	; 0x96
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	801a      	strh	r2, [r3, #0]
	}

  if (len == 0 || tx_ptr == NULL) {
 800322e:	1cbb      	adds	r3, r7, #2
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d011      	beq.n	800325a <i2c2_set_send_data+0x4e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00e      	beq.n	800325a <i2c2_set_send_data+0x4e>
    return;
  }
  memcpy((void *)tx_buffer, tx_ptr, len);
 800323c:	1cbb      	adds	r3, r7, #2
 800323e:	881a      	ldrh	r2, [r3, #0]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <i2c2_set_send_data+0x58>)
 8003244:	0018      	movs	r0, r3
 8003246:	f004 fc61 	bl	8007b0c <memcpy>
  tx_buffer_index = 0;
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <i2c2_set_send_data+0x5c>)
 800324c:	2200      	movs	r2, #0
 800324e:	801a      	strh	r2, [r3, #0]
  tx_len = len;
 8003250:	4b06      	ldr	r3, [pc, #24]	; (800326c <i2c2_set_send_data+0x60>)
 8003252:	1cba      	adds	r2, r7, #2
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e000      	b.n	800325c <i2c2_set_send_data+0x50>
    return;
 800325a:	46c0      	nop			; (mov r8, r8)
}
 800325c:	46bd      	mov	sp, r7
 800325e:	b002      	add	sp, #8
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	20000370 	.word	0x20000370
 8003268:	200005cc 	.word	0x200005cc
 800326c:	200005ce 	.word	0x200005ce

08003270 <Slave_Reception_Callback>:

void Slave_Reception_Callback(void)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Read character in Receive Data register.
  RXNE flag is cleared by reading data in RXDR register */
  aReceiveBuffer[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C2);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <Slave_Reception_Callback+0x2c>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	b291      	uxth	r1, r2
 800327e:	4a07      	ldr	r2, [pc, #28]	; (800329c <Slave_Reception_Callback+0x2c>)
 8003280:	8011      	strh	r1, [r2, #0]
 8003282:	001c      	movs	r4, r3
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <Slave_Reception_Callback+0x30>)
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff ff59 	bl	800313e <LL_I2C_ReceiveData8>
 800328c:	0003      	movs	r3, r0
 800328e:	001a      	movs	r2, r3
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <Slave_Reception_Callback+0x34>)
 8003292:	551a      	strb	r2, [r3, r4]
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	bdb0      	pop	{r4, r5, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	200005c8 	.word	0x200005c8
 80032a0:	40005800 	.word	0x40005800
 80032a4:	20000118 	.word	0x20000118

080032a8 <Slave_Ready_To_Transmit_Callback>:

void Slave_Ready_To_Transmit_Callback(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Send the Byte requested by the Master */
  LL_I2C_TransmitData8(I2C2, tx_buffer[tx_buffer_index]);
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <Slave_Ready_To_Transmit_Callback+0x48>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	001a      	movs	r2, r3
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <Slave_Ready_To_Transmit_Callback+0x4c>)
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <Slave_Ready_To_Transmit_Callback+0x50>)
 80032bc:	0019      	movs	r1, r3
 80032be:	0010      	movs	r0, r2
 80032c0:	f7ff ff48 	bl	8003154 <LL_I2C_TransmitData8>
  tx_buffer_index++;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <Slave_Ready_To_Transmit_Callback+0x48>)
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <Slave_Ready_To_Transmit_Callback+0x48>)
 80032d0:	801a      	strh	r2, [r3, #0]
  if (tx_buffer_index >= tx_len) {
 80032d2:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <Slave_Ready_To_Transmit_Callback+0x48>)
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <Slave_Ready_To_Transmit_Callback+0x54>)
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <Slave_Ready_To_Transmit_Callback+0x40>
    tx_buffer_index = 0;
 80032e2:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <Slave_Ready_To_Transmit_Callback+0x48>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	801a      	strh	r2, [r3, #0]
  }
}
 80032e8:	46c0      	nop			; (mov r8, r8)
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	200005cc 	.word	0x200005cc
 80032f4:	20000370 	.word	0x20000370
 80032f8:	40005800 	.word	0x40005800
 80032fc:	200005ce 	.word	0x200005ce

08003300 <I2C2_IRQHandler>:

void I2C2_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */
  i2c_timeout_counter++;
 8003304:	4b64      	ldr	r3, [pc, #400]	; (8003498 <I2C2_IRQHandler+0x198>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <I2C2_IRQHandler+0x198>)
 800330c:	601a      	str	r2, [r3, #0]
  if (i2c_timeout_counter > 1000) {
 800330e:	4b62      	ldr	r3, [pc, #392]	; (8003498 <I2C2_IRQHandler+0x198>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	23fa      	movs	r3, #250	; 0xfa
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	429a      	cmp	r2, r3
 8003318:	d916      	bls.n	8003348 <I2C2_IRQHandler+0x48>
    LL_I2C_DeInit(I2C2);
 800331a:	4b60      	ldr	r3, [pc, #384]	; (800349c <I2C2_IRQHandler+0x19c>)
 800331c:	0018      	movs	r0, r3
 800331e:	f004 fb25 	bl	800796c <LL_I2C_DeInit>
    LL_I2C_DisableAutoEndMode(I2C2);
 8003322:	4b5e      	ldr	r3, [pc, #376]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fedf 	bl	80030e8 <LL_I2C_DisableAutoEndMode>
    LL_I2C_Disable(I2C2);
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <I2C2_IRQHandler+0x19c>)
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fda1 	bl	8002e74 <LL_I2C_Disable>
    LL_I2C_DisableIT_ADDR(I2C2);         
 8003332:	4b5a      	ldr	r3, [pc, #360]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fdd6 	bl	8002ee6 <LL_I2C_DisableIT_ADDR>
    user_i2c_init();    
 800333a:	f7ff fcf3 	bl	8002d24 <user_i2c_init>
    i2c2_it_enable();          
 800333e:	f7ff ff2b 	bl	8003198 <i2c2_it_enable>
    i2c_timeout_counter = 0;
 8003342:	4b55      	ldr	r3, [pc, #340]	; (8003498 <I2C2_IRQHandler+0x198>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
  }
  /* Check ADDR flag value in ISR register */
  if(LL_I2C_IsActiveFlag_ADDR(I2C2))
 8003348:	4b54      	ldr	r3, [pc, #336]	; (800349c <I2C2_IRQHandler+0x19c>)
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff fe64 	bl	8003018 <LL_I2C_IsActiveFlag_ADDR>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d04f      	beq.n	80033f4 <I2C2_IRQHandler+0xf4>
  {
    /* Verify the Address Match with the OWN Slave address */
    if(LL_I2C_GetAddressMatchCode(I2C2) == i2c_addr)
 8003354:	4b51      	ldr	r3, [pc, #324]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff fee3 	bl	8003122 <LL_I2C_GetAddressMatchCode>
 800335c:	0002      	movs	r2, r0
 800335e:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <I2C2_IRQHandler+0x1a0>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	429a      	cmp	r2, r3
 8003366:	d13e      	bne.n	80033e6 <I2C2_IRQHandler+0xe6>
    {
      if (ubReceiveIndex) {
 8003368:	4b4e      	ldr	r3, [pc, #312]	; (80034a4 <I2C2_IRQHandler+0x1a4>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <I2C2_IRQHandler+0x90>
        i2c2_it_disable();
 8003372:	f7ff ff2d 	bl	80031d0 <i2c2_it_disable>
        Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 8003376:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <I2C2_IRQHandler+0x1a4>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29a      	uxth	r2, r3
 800337c:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <I2C2_IRQHandler+0x1a8>)
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f000 fb9d 	bl	8003ac0 <Slave_Complete_Callback>
        ubReceiveIndex = 0; 
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <I2C2_IRQHandler+0x1a4>)
 8003388:	2200      	movs	r2, #0
 800338a:	801a      	strh	r2, [r3, #0]
        i2c2_it_enable();       
 800338c:	f7ff ff04 	bl	8003198 <i2c2_it_enable>
      }
      /* Verify the transfer direction, a write direction, Slave enters receiver mode */
      if(LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_WRITE)
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff feb8 	bl	8003108 <LL_I2C_GetTransferDirection>
 8003398:	1e03      	subs	r3, r0, #0
 800339a:	d10b      	bne.n	80033b4 <I2C2_IRQHandler+0xb4>
      {
        /* Clear ADDR flag value in ISR register */
        LL_I2C_ClearFlag_ADDR(I2C2);
 800339c:	4b3f      	ldr	r3, [pc, #252]	; (800349c <I2C2_IRQHandler+0x19c>)
 800339e:	0018      	movs	r0, r3
 80033a0:	f7ff fe6d 	bl	800307e <LL_I2C_ClearFlag_ADDR>

        /* Enable Receive Interrupt */
        LL_I2C_EnableIT_RX(I2C2);
 80033a4:	4b3d      	ldr	r3, [pc, #244]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff fd81 	bl	8002eae <LL_I2C_EnableIT_RX>
        i2c_stop_timeout_flag = 1;
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <I2C2_IRQHandler+0x1ac>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
  /* USER CODE END I2C2_IRQn 0 */

  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80033b2:	e06e      	b.n	8003492 <I2C2_IRQHandler+0x192>
      else if(LL_I2C_GetTransferDirection(I2C2) == LL_I2C_DIRECTION_READ)
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff fea6 	bl	8003108 <LL_I2C_GetTransferDirection>
 80033bc:	0002      	movs	r2, r0
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	025b      	lsls	r3, r3, #9
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d108      	bne.n	80033d8 <I2C2_IRQHandler+0xd8>
        LL_I2C_ClearFlag_ADDR(I2C2);
 80033c6:	4b35      	ldr	r3, [pc, #212]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff fe58 	bl	800307e <LL_I2C_ClearFlag_ADDR>
        LL_I2C_EnableIT_TX(I2C2);
 80033ce:	4b33      	ldr	r3, [pc, #204]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff fd5e 	bl	8002e92 <LL_I2C_EnableIT_TX>
}
 80033d6:	e05c      	b.n	8003492 <I2C2_IRQHandler+0x192>
        LL_I2C_ClearFlag_ADDR(I2C2);
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff fe4f 	bl	800307e <LL_I2C_ClearFlag_ADDR>
        Error_Callback();
 80033e0:	f7ff ff0e 	bl	8003200 <Error_Callback>
}
 80033e4:	e055      	b.n	8003492 <I2C2_IRQHandler+0x192>
      LL_I2C_ClearFlag_ADDR(I2C2);
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7ff fe48 	bl	800307e <LL_I2C_ClearFlag_ADDR>
      Error_Callback();
 80033ee:	f7ff ff07 	bl	8003200 <Error_Callback>
}
 80033f2:	e04e      	b.n	8003492 <I2C2_IRQHandler+0x192>
  else if(LL_I2C_IsActiveFlag_NACK(I2C2))
 80033f4:	4b29      	ldr	r3, [pc, #164]	; (800349c <I2C2_IRQHandler+0x19c>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff fe1f 	bl	800303a <LL_I2C_IsActiveFlag_NACK>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d004      	beq.n	800340a <I2C2_IRQHandler+0x10a>
    LL_I2C_ClearFlag_NACK(I2C2);
 8003400:	4b26      	ldr	r3, [pc, #152]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff fe49 	bl	800309a <LL_I2C_ClearFlag_NACK>
}
 8003408:	e043      	b.n	8003492 <I2C2_IRQHandler+0x192>
  else if(LL_I2C_IsActiveFlag_TXIS(I2C2))
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <I2C2_IRQHandler+0x19c>)
 800340c:	0018      	movs	r0, r3
 800340e:	f7ff fde1 	bl	8002fd4 <LL_I2C_IsActiveFlag_TXIS>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d002      	beq.n	800341c <I2C2_IRQHandler+0x11c>
    Slave_Ready_To_Transmit_Callback();
 8003416:	f7ff ff47 	bl	80032a8 <Slave_Ready_To_Transmit_Callback>
}
 800341a:	e03a      	b.n	8003492 <I2C2_IRQHandler+0x192>
  else if(LL_I2C_IsActiveFlag_RXNE(I2C2))
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <I2C2_IRQHandler+0x19c>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7ff fde9 	bl	8002ff6 <LL_I2C_IsActiveFlag_RXNE>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d002      	beq.n	800342e <I2C2_IRQHandler+0x12e>
    Slave_Reception_Callback();
 8003428:	f7ff ff22 	bl	8003270 <Slave_Reception_Callback>
}
 800342c:	e031      	b.n	8003492 <I2C2_IRQHandler+0x192>
  else if(LL_I2C_IsActiveFlag_STOP(I2C2))
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff fe13 	bl	800305c <LL_I2C_IsActiveFlag_STOP>
 8003436:	1e03      	subs	r3, r0, #0
 8003438:	d023      	beq.n	8003482 <I2C2_IRQHandler+0x182>
    LL_I2C_ClearFlag_STOP(I2C2);
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <I2C2_IRQHandler+0x19c>)
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fe3a 	bl	80030b6 <LL_I2C_ClearFlag_STOP>
    if(!LL_I2C_IsActiveFlag_TXE(I2C2))
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fdb4 	bl	8002fb2 <LL_I2C_IsActiveFlag_TXE>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d103      	bne.n	8003456 <I2C2_IRQHandler+0x156>
      LL_I2C_ClearFlag_TXE(I2C2);
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7ff fe3e 	bl	80030d2 <LL_I2C_ClearFlag_TXE>
    i2c2_it_disable();
 8003456:	f7ff febb 	bl	80031d0 <i2c2_it_disable>
    Slave_Complete_Callback((uint8_t *)aReceiveBuffer, ubReceiveIndex);
 800345a:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <I2C2_IRQHandler+0x1a4>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <I2C2_IRQHandler+0x1a8>)
 8003462:	0011      	movs	r1, r2
 8003464:	0018      	movs	r0, r3
 8003466:	f000 fb2b 	bl	8003ac0 <Slave_Complete_Callback>
    ubReceiveIndex = 0;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <I2C2_IRQHandler+0x1a4>)
 800346c:	2200      	movs	r2, #0
 800346e:	801a      	strh	r2, [r3, #0]
    i2c2_it_enable();
 8003470:	f7ff fe92 	bl	8003198 <i2c2_it_enable>
    i2c_stop_timeout_flag = 0;
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <I2C2_IRQHandler+0x1ac>)
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
    i2c_stop_timeout_counter = 0;
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <I2C2_IRQHandler+0x1b0>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	e007      	b.n	8003492 <I2C2_IRQHandler+0x192>
  else if(!LL_I2C_IsActiveFlag_TXE(I2C2))
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <I2C2_IRQHandler+0x19c>)
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fd94 	bl	8002fb2 <LL_I2C_IsActiveFlag_TXE>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <I2C2_IRQHandler+0x192>
    Error_Callback();
 800348e:	f7ff feb7 	bl	8003200 <Error_Callback>
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200005d0 	.word	0x200005d0
 800349c:	40005800 	.word	0x40005800
 80034a0:	200005ca 	.word	0x200005ca
 80034a4:	200005c8 	.word	0x200005c8
 80034a8:	20000118 	.word	0x20000118
 80034ac:	200005d4 	.word	0x200005d4
 80034b0:	200005d8 	.word	0x200005d8

080034b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034b8:	f3bf 8f4f 	dsb	sy
}
 80034bc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <__NVIC_SystemReset+0x1c>)
 80034c0:	4a04      	ldr	r2, [pc, #16]	; (80034d4 <__NVIC_SystemReset+0x20>)
 80034c2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80034c4:	f3bf 8f4f 	dsb	sy
}
 80034c8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	e7fd      	b.n	80034ca <__NVIC_SystemReset+0x16>
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	e000ed00 	.word	0xe000ed00
 80034d4:	05fa0004 	.word	0x05fa0004

080034d8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LL_RCC_HSI_Enable+0x18>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <LL_RCC_HSI_Enable+0x18>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	0049      	lsls	r1, r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000

080034f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80034f8:	4b07      	ldr	r3, [pc, #28]	; (8003518 <LL_RCC_HSI_IsReady+0x24>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	401a      	ands	r2, r3
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	429a      	cmp	r2, r3
 8003508:	d101      	bne.n	800350e <LL_RCC_HSI_IsReady+0x1a>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_RCC_HSI_IsReady+0x1c>
 800350e:	2300      	movs	r3, #0
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	40021000 	.word	0x40021000

0800351c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <LL_RCC_SetSysClkSource+0x24>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2207      	movs	r2, #7
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <LL_RCC_SetSysClkSource+0x24>)
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b002      	add	sp, #8
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	40021000 	.word	0x40021000

08003544 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <LL_RCC_GetSysClkSource+0x14>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2238      	movs	r2, #56	; 0x38
 800354e:	4013      	ands	r3, r2
}
 8003550:	0018      	movs	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	40021000 	.word	0x40021000

0800355c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <LL_RCC_SetAHBPrescaler+0x24>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a06      	ldr	r2, [pc, #24]	; (8003584 <LL_RCC_SetAHBPrescaler+0x28>)
 800356a:	4013      	ands	r3, r2
 800356c:	0019      	movs	r1, r3
 800356e:	4b04      	ldr	r3, [pc, #16]	; (8003580 <LL_RCC_SetAHBPrescaler+0x24>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	40021000 	.word	0x40021000
 8003584:	fffff0ff 	.word	0xfffff0ff

08003588 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <LL_RCC_SetAPB1Prescaler+0x24>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <LL_RCC_SetAPB1Prescaler+0x28>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	4b04      	ldr	r3, [pc, #16]	; (80035ac <LL_RCC_SetAPB1Prescaler+0x24>)
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40021000 	.word	0x40021000
 80035b0:	ffff8fff 	.word	0xffff8fff

080035b4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <LL_RCC_PLL_Enable+0x18>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <LL_RCC_PLL_Enable+0x18>)
 80035be:	2180      	movs	r1, #128	; 0x80
 80035c0:	0449      	lsls	r1, r1, #17
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000

080035d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <LL_RCC_PLL_IsReady+0x24>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	049b      	lsls	r3, r3, #18
 80035dc:	401a      	ands	r2, r3
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	049b      	lsls	r3, r3, #18
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d101      	bne.n	80035ea <LL_RCC_PLL_IsReady+0x1a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <LL_RCC_PLL_IsReady+0x1c>
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40021000 	.word	0x40021000

080035f8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8003606:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800360c:	4013      	ands	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	431a      	orrs	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	431a      	orrs	r2, r3
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8003622:	430a      	orrs	r2, r1
 8003624:	60da      	str	r2, [r3, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	46bd      	mov	sp, r7
 800362a:	b004      	add	sp, #16
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	40021000 	.word	0x40021000
 8003634:	1fff808c 	.word	0x1fff808c

08003638 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 800363c:	4b04      	ldr	r3, [pc, #16]	; (8003650 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b03      	ldr	r3, [pc, #12]	; (8003650 <LL_RCC_PLL_EnableDomain_SYS+0x18>)
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0549      	lsls	r1, r1, #21
 8003646:	430a      	orrs	r2, r1
 8003648:	60da      	str	r2, [r3, #12]
}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000

08003654 <LL_I2C_Disable>:
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	4393      	bics	r3, r2
 8003664:	001a      	movs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	601a      	str	r2, [r3, #0]
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}

08003672 <LL_I2C_DisableIT_ADDR>:
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ADDRIE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2208      	movs	r2, #8
 8003680:	4393      	bics	r3, r2
 8003682:	001a      	movs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <LL_I2C_DisableAutoEndMode>:
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4a03      	ldr	r2, [pc, #12]	; (80036ac <LL_I2C_DisableAutoEndMode+0x1c>)
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	605a      	str	r2, [r3, #4]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	fdffffff 	.word	0xfdffffff

080036b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <LL_FLASH_SetLatency+0x24>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2207      	movs	r2, #7
 80036be:	4393      	bics	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <LL_FLASH_SetLatency+0x24>)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]
}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b002      	add	sp, #8
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	40022000 	.word	0x40022000

080036d8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <LL_FLASH_GetLatency+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2207      	movs	r2, #7
 80036e2:	4013      	ands	r3, r2
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	40022000 	.word	0x40022000

080036f0 <IAP_Set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void IAP_Set()
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
	uint8_t i;
 
	uint32_t *pVecTab=(uint32_t *)(0x20000000);
 80036f6:	2380      	movs	r3, #128	; 0x80
 80036f8:	059b      	lsls	r3, r3, #22
 80036fa:	60bb      	str	r3, [r7, #8]

	for(i = 0; i < 48; i++)
 80036fc:	230f      	movs	r3, #15
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e011      	b.n	800372a <IAP_Set+0x3a>
	{
		*(pVecTab++) = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
 8003706:	200f      	movs	r0, #15
 8003708:	183b      	adds	r3, r7, r0
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4a14      	ldr	r2, [pc, #80]	; (8003760 <IAP_Set+0x70>)
 8003710:	4694      	mov	ip, r2
 8003712:	4463      	add	r3, ip
 8003714:	001a      	movs	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1d19      	adds	r1, r3, #4
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 48; i++)
 8003720:	183b      	adds	r3, r7, r0
 8003722:	781a      	ldrb	r2, [r3, #0]
 8003724:	183b      	adds	r3, r7, r0
 8003726:	3201      	adds	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	230f      	movs	r3, #15
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2b2f      	cmp	r3, #47	; 0x2f
 8003732:	d9e8      	bls.n	8003706 <IAP_Set+0x16>
	}
  /* Enable the SYSCFG peripheral clock*/
#if 1 //STM32
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <IAP_Set+0x74>)
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <IAP_Set+0x74>)
 800373a:	2101      	movs	r1, #1
 800373c:	430a      	orrs	r2, r1
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <IAP_Set+0x74>)
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2201      	movs	r2, #1
 8003746:	4013      	ands	r3, r2
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	687b      	ldr	r3, [r7, #4]

  __HAL_SYSCFG_REMAPMEMORY_SRAM();
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <IAP_Set+0x78>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <IAP_Set+0x78>)
 8003752:	2103      	movs	r1, #3
 8003754:	430a      	orrs	r2, r1
 8003756:	601a      	str	r2, [r3, #0]
#else //AMP32
    RCM_EnableAPB2PeriphClock(RCM_APB2_PERIPH_SYSCFG);
    /* Remap SRAM at 0x00000000 */
    SYSCFG->CFG1_B.MMSEL = SYSCFG_MemoryRemap_SRAM;
#endif
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b004      	add	sp, #16
 800375e:	bd80      	pop	{r7, pc}
 8003760:	08001800 	.word	0x08001800
 8003764:	40021000 	.word	0x40021000
 8003768:	40010000 	.word	0x40010000

0800376c <i2c_port_set_to_input>:

void i2c_port_set_to_input(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	0018      	movs	r0, r3
 8003776:	2314      	movs	r3, #20
 8003778:	001a      	movs	r2, r3
 800377a:	2100      	movs	r1, #0
 800377c:	f004 f9cf 	bl	8007b1e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003780:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <i2c_port_set_to_input+0x6c>)
 8003782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <i2c_port_set_to_input+0x6c>)
 8003786:	2101      	movs	r1, #1
 8003788:	430a      	orrs	r2, r1
 800378a:	635a      	str	r2, [r3, #52]	; 0x34
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <i2c_port_set_to_input+0x6c>)
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 8003798:	23c0      	movs	r3, #192	; 0xc0
 800379a:	0159      	lsls	r1, r3, #5
 800379c:	23a0      	movs	r3, #160	; 0xa0
 800379e:	05db      	lsls	r3, r3, #23
 80037a0:	2200      	movs	r2, #0
 80037a2:	0018      	movs	r0, r3
 80037a4:	f002 fd67 	bl	8006276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	22c0      	movs	r2, #192	; 0xc0
 80037ac:	0152      	lsls	r2, r2, #5
 80037ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b0:	1d3b      	adds	r3, r7, #4
 80037b2:	2200      	movs	r2, #0
 80037b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	2201      	movs	r2, #1
 80037ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	2200      	movs	r2, #0
 80037c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c2:	1d3a      	adds	r2, r7, #4
 80037c4:	23a0      	movs	r3, #160	; 0xa0
 80037c6:	05db      	lsls	r3, r3, #23
 80037c8:	0011      	movs	r1, r2
 80037ca:	0018      	movs	r0, r3
 80037cc:	f002 fbd2 	bl	8005f74 <HAL_GPIO_Init>
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000

080037dc <irq_port_init>:

void irq_port_init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	0018      	movs	r0, r3
 80037e6:	2314      	movs	r3, #20
 80037e8:	001a      	movs	r2, r3
 80037ea:	2100      	movs	r1, #0
 80037ec:	f004 f997 	bl	8007b1e <memset>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f0:	4b15      	ldr	r3, [pc, #84]	; (8003848 <irq_port_init+0x6c>)
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <irq_port_init+0x6c>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	430a      	orrs	r2, r1
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <irq_port_init+0x6c>)
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	2201      	movs	r2, #1
 8003802:	4013      	ands	r3, r2
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	0199      	lsls	r1, r3, #6
 800380c:	23a0      	movs	r3, #160	; 0xa0
 800380e:	05db      	lsls	r3, r3, #23
 8003810:	2201      	movs	r2, #1
 8003812:	0018      	movs	r0, r3
 8003814:	f002 fd2f 	bl	8006276 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	0192      	lsls	r2, r2, #6
 800381e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	2201      	movs	r2, #1
 8003824:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	1d3b      	adds	r3, r7, #4
 800382e:	2203      	movs	r2, #3
 8003830:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003832:	1d3a      	adds	r2, r7, #4
 8003834:	23a0      	movs	r3, #160	; 0xa0
 8003836:	05db      	lsls	r3, r3, #23
 8003838:	0011      	movs	r1, r2
 800383a:	0018      	movs	r0, r3
 800383c:	f002 fb9a 	bl	8005f74 <HAL_GPIO_Init>
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b006      	add	sp, #24
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <init_flash_data>:

void init_flash_data(void) 
{   
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  if (!(readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE))) {
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	005a      	lsls	r2, r3, #1
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <init_flash_data+0x98>)
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f7fe feab 	bl	80025b4 <readPackedMessageFromFlash>
 800385e:	1e03      	subs	r3, r0, #0
 8003860:	d124      	bne.n	80038ac <init_flash_data+0x60>
    i2c_address[0] = I2C_ADDRESS;
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <init_flash_data+0x9c>)
 8003864:	2246      	movs	r2, #70	; 0x46
 8003866:	701a      	strb	r2, [r3, #0]

    flash_data[0] = i2c_address[0];
 8003868:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <init_flash_data+0x9c>)
 800386a:	781a      	ldrb	r2, [r3, #0]
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <init_flash_data+0x98>)
 800386e:	701a      	strb	r2, [r3, #0]
    flash_data[1] = is_irq_enable;
 8003870:	4b1e      	ldr	r3, [pc, #120]	; (80038ec <init_flash_data+0xa0>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <init_flash_data+0x98>)
 8003878:	705a      	strb	r2, [r3, #1]
    memcpy(&flash_data[2], (uint8_t *)sys_rgb_color_switch_0, 32);
 800387a:	491d      	ldr	r1, [pc, #116]	; (80038f0 <init_flash_data+0xa4>)
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <init_flash_data+0xa8>)
 800387e:	2220      	movs	r2, #32
 8003880:	0018      	movs	r0, r3
 8003882:	f004 f943 	bl	8007b0c <memcpy>
    memcpy(&flash_data[2+32], (uint8_t *)sys_rgb_color_switch_1, 32);
 8003886:	491c      	ldr	r1, [pc, #112]	; (80038f8 <init_flash_data+0xac>)
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <init_flash_data+0xb0>)
 800388a:	2220      	movs	r2, #32
 800388c:	0018      	movs	r0, r3
 800388e:	f004 f93d 	bl	8007b0c <memcpy>
    flash_data[2+32+32] = rgb_show_mode;
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <init_flash_data+0xb4>)
 8003894:	7819      	ldrb	r1, [r3, #0]
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <init_flash_data+0x98>)
 8003898:	2242      	movs	r2, #66	; 0x42
 800389a:	5499      	strb	r1, [r3, r2]
    writeMessageToFlash(flash_data , FLASH_DATA_SIZE);
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	005a      	lsls	r2, r3, #1
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <init_flash_data+0x98>)
 80038a2:	0011      	movs	r1, r2
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fe fecd 	bl	8002644 <writeMessageToFlash>
    is_irq_enable = flash_data[1];
    memcpy((uint8_t *)sys_rgb_color_switch_0, &flash_data[2], 32);
    memcpy((uint8_t *)sys_rgb_color_switch_1, &flash_data[2+32], 32);
    rgb_show_mode = flash_data[2+32+32];
  }
}
 80038aa:	e018      	b.n	80038de <init_flash_data+0x92>
    i2c_address[0] = flash_data[0];
 80038ac:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <init_flash_data+0x98>)
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <init_flash_data+0x9c>)
 80038b2:	701a      	strb	r2, [r3, #0]
    is_irq_enable = flash_data[1];
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <init_flash_data+0x98>)
 80038b6:	785a      	ldrb	r2, [r3, #1]
 80038b8:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <init_flash_data+0xa0>)
 80038ba:	701a      	strb	r2, [r3, #0]
    memcpy((uint8_t *)sys_rgb_color_switch_0, &flash_data[2], 32);
 80038bc:	490d      	ldr	r1, [pc, #52]	; (80038f4 <init_flash_data+0xa8>)
 80038be:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <init_flash_data+0xa4>)
 80038c0:	2220      	movs	r2, #32
 80038c2:	0018      	movs	r0, r3
 80038c4:	f004 f922 	bl	8007b0c <memcpy>
    memcpy((uint8_t *)sys_rgb_color_switch_1, &flash_data[2+32], 32);
 80038c8:	490c      	ldr	r1, [pc, #48]	; (80038fc <init_flash_data+0xb0>)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <init_flash_data+0xac>)
 80038cc:	2220      	movs	r2, #32
 80038ce:	0018      	movs	r0, r3
 80038d0:	f004 f91c 	bl	8007b0c <memcpy>
    rgb_show_mode = flash_data[2+32+32];
 80038d4:	4b03      	ldr	r3, [pc, #12]	; (80038e4 <init_flash_data+0x98>)
 80038d6:	2242      	movs	r2, #66	; 0x42
 80038d8:	5c9a      	ldrb	r2, [r3, r2]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <init_flash_data+0xb4>)
 80038dc:	701a      	strb	r2, [r3, #0]
}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	200005e0 	.word	0x200005e0
 80038e8:	200005dc 	.word	0x200005dc
 80038ec:	200006f8 	.word	0x200006f8
 80038f0:	200006fc 	.word	0x200006fc
 80038f4:	200005e2 	.word	0x200005e2
 80038f8:	2000071c 	.word	0x2000071c
 80038fc:	20000602 	.word	0x20000602
 8003900:	200006f9 	.word	0x200006f9

08003904 <flash_data_write_back>:

void flash_data_write_back(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  if (readPackedMessageFromFlash(flash_data, FLASH_DATA_SIZE)) {
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	005a      	lsls	r2, r3, #1
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <flash_data_write_back+0x60>)
 800390e:	0011      	movs	r1, r2
 8003910:	0018      	movs	r0, r3
 8003912:	f7fe fe4f 	bl	80025b4 <readPackedMessageFromFlash>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d020      	beq.n	800395c <flash_data_write_back+0x58>
    flash_data[0] = i2c_address[0];
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <flash_data_write_back+0x64>)
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <flash_data_write_back+0x60>)
 8003920:	701a      	strb	r2, [r3, #0]
    flash_data[1] = is_irq_enable;
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <flash_data_write_back+0x68>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <flash_data_write_back+0x60>)
 800392a:	705a      	strb	r2, [r3, #1]
    memcpy(&flash_data[2], (uint8_t *)sys_rgb_color_switch_0, 32);
 800392c:	4910      	ldr	r1, [pc, #64]	; (8003970 <flash_data_write_back+0x6c>)
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <flash_data_write_back+0x70>)
 8003930:	2220      	movs	r2, #32
 8003932:	0018      	movs	r0, r3
 8003934:	f004 f8ea 	bl	8007b0c <memcpy>
    memcpy(&flash_data[2+32], (uint8_t *)sys_rgb_color_switch_1, 32);
 8003938:	490f      	ldr	r1, [pc, #60]	; (8003978 <flash_data_write_back+0x74>)
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <flash_data_write_back+0x78>)
 800393c:	2220      	movs	r2, #32
 800393e:	0018      	movs	r0, r3
 8003940:	f004 f8e4 	bl	8007b0c <memcpy>
    flash_data[2+32+32] = rgb_show_mode;
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <flash_data_write_back+0x7c>)
 8003946:	7819      	ldrb	r1, [r3, #0]
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <flash_data_write_back+0x60>)
 800394a:	2242      	movs	r2, #66	; 0x42
 800394c:	5499      	strb	r1, [r3, r2]
    writeMessageToFlash(flash_data , FLASH_DATA_SIZE);
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	005a      	lsls	r2, r3, #1
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <flash_data_write_back+0x60>)
 8003954:	0011      	movs	r1, r2
 8003956:	0018      	movs	r0, r3
 8003958:	f7fe fe74 	bl	8002644 <writeMessageToFlash>
  }     
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	200005e0 	.word	0x200005e0
 8003968:	200005dc 	.word	0x200005dc
 800396c:	200006f8 	.word	0x200006f8
 8003970:	200006fc 	.word	0x200006fc
 8003974:	200005e2 	.word	0x200005e2
 8003978:	2000071c 	.word	0x2000071c
 800397c:	20000602 	.word	0x20000602
 8003980:	200006f9 	.word	0x200006f9

08003984 <init_swtich_status>:

void init_swtich_status(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  switch_status |= (!!(SW_K1_GPIO_Port->IDR&(SW_K1_Pin)));
 8003988:	23a0      	movs	r3, #160	; 0xa0
 800398a:	05db      	lsls	r3, r3, #23
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	2201      	movs	r2, #1
 8003990:	4013      	ands	r3, r2
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	4193      	sbcs	r3, r2
 8003996:	b2db      	uxtb	r3, r3
 8003998:	b25a      	sxtb	r2, r3
 800399a:	4b47      	ldr	r3, [pc, #284]	; (8003ab8 <init_swtich_status+0x134>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <init_swtich_status+0x134>)
 80039aa:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K2_GPIO_Port->IDR&(SW_K2_Pin))) << 1);
 80039ac:	23a0      	movs	r3, #160	; 0xa0
 80039ae:	05db      	lsls	r3, r3, #23
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	001a      	movs	r2, r3
 80039b4:	2302      	movs	r3, #2
 80039b6:	4013      	ands	r3, r2
 80039b8:	b25a      	sxtb	r2, r3
 80039ba:	4b3f      	ldr	r3, [pc, #252]	; (8003ab8 <init_swtich_status+0x134>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	4313      	orrs	r3, r2
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b3b      	ldr	r3, [pc, #236]	; (8003ab8 <init_swtich_status+0x134>)
 80039ca:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K3_GPIO_Port->IDR&(SW_K3_Pin))) << 2);
 80039cc:	23a0      	movs	r3, #160	; 0xa0
 80039ce:	05db      	lsls	r3, r3, #23
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2220      	movs	r2, #32
 80039d4:	4013      	ands	r3, r2
 80039d6:	d001      	beq.n	80039dc <init_swtich_status+0x58>
 80039d8:	2304      	movs	r3, #4
 80039da:	e000      	b.n	80039de <init_swtich_status+0x5a>
 80039dc:	2300      	movs	r3, #0
 80039de:	b25a      	sxtb	r2, r3
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <init_swtich_status+0x134>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	b25b      	sxtb	r3, r3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <init_swtich_status+0x134>)
 80039f0:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K4_GPIO_Port->IDR&(SW_K4_Pin))) << 3);
 80039f2:	23a0      	movs	r3, #160	; 0xa0
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2240      	movs	r2, #64	; 0x40
 80039fa:	4013      	ands	r3, r2
 80039fc:	d001      	beq.n	8003a02 <init_swtich_status+0x7e>
 80039fe:	2308      	movs	r3, #8
 8003a00:	e000      	b.n	8003a04 <init_swtich_status+0x80>
 8003a02:	2300      	movs	r3, #0
 8003a04:	b25a      	sxtb	r2, r3
 8003a06:	4b2c      	ldr	r3, [pc, #176]	; (8003ab8 <init_swtich_status+0x134>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <init_swtich_status+0x134>)
 8003a16:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K5_GPIO_Port->IDR&(SW_K5_Pin))) << 4);
 8003a18:	23a0      	movs	r3, #160	; 0xa0
 8003a1a:	05db      	lsls	r3, r3, #23
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	4013      	ands	r3, r2
 8003a22:	d001      	beq.n	8003a28 <init_swtich_status+0xa4>
 8003a24:	2310      	movs	r3, #16
 8003a26:	e000      	b.n	8003a2a <init_swtich_status+0xa6>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	b25a      	sxtb	r2, r3
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <init_swtich_status+0x134>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	4313      	orrs	r3, r2
 8003a36:	b25b      	sxtb	r3, r3
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <init_swtich_status+0x134>)
 8003a3c:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K6_GPIO_Port->IDR&(SW_K6_Pin))) << 5);
 8003a3e:	23a0      	movs	r3, #160	; 0xa0
 8003a40:	05db      	lsls	r3, r3, #23
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d001      	beq.n	8003a50 <init_swtich_status+0xcc>
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e000      	b.n	8003a52 <init_swtich_status+0xce>
 8003a50:	2300      	movs	r3, #0
 8003a52:	b25a      	sxtb	r2, r3
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <init_swtich_status+0x134>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <init_swtich_status+0x134>)
 8003a64:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K7_GPIO_Port->IDR&(SW_K7_Pin))) << 6);
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <init_swtich_status+0x138>)
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d001      	beq.n	8003a74 <init_swtich_status+0xf0>
 8003a70:	2340      	movs	r3, #64	; 0x40
 8003a72:	e000      	b.n	8003a76 <init_swtich_status+0xf2>
 8003a74:	2300      	movs	r3, #0
 8003a76:	b25a      	sxtb	r2, r3
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <init_swtich_status+0x134>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b25b      	sxtb	r3, r3
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <init_swtich_status+0x134>)
 8003a88:	701a      	strb	r2, [r3, #0]
  switch_status |= ((!!(SW_K8_GPIO_Port->IDR&(SW_K8_Pin))) << 7);
 8003a8a:	23a0      	movs	r3, #160	; 0xa0
 8003a8c:	05db      	lsls	r3, r3, #23
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4013      	ands	r3, r2
 8003a96:	d001      	beq.n	8003a9c <init_swtich_status+0x118>
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	e000      	b.n	8003a9e <init_swtich_status+0x11a>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	b25a      	sxtb	r2, r3
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <init_swtich_status+0x134>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4b02      	ldr	r3, [pc, #8]	; (8003ab8 <init_swtich_status+0x134>)
 8003ab0:	701a      	strb	r2, [r3, #0]
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200006ec 	.word	0x200006ec
 8003abc:	50000400 	.word	0x50000400

08003ac0 <Slave_Complete_Callback>:

void Slave_Complete_Callback(uint8_t *rx_data, uint16_t len)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b0be      	sub	sp, #248	; 0xf8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	000a      	movs	r2, r1
 8003aca:	1cbb      	adds	r3, r7, #2
 8003acc:	801a      	strh	r2, [r3, #0]
  uint8_t buf[48];
  uint8_t rx_buf[48];
  uint8_t rx_mark[48] = {0}; 
 8003ace:	233c      	movs	r3, #60	; 0x3c
 8003ad0:	18fb      	adds	r3, r7, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	222c      	movs	r2, #44	; 0x2c
 8003ada:	2100      	movs	r1, #0
 8003adc:	0018      	movs	r0, r3
 8003ade:	f004 f81e 	bl	8007b1e <memset>

  if (len > 1) {
 8003ae2:	1cbb      	adds	r3, r7, #2
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d800      	bhi.n	8003aec <Slave_Complete_Callback+0x2c>
 8003aea:	e2b8      	b.n	800405e <Slave_Complete_Callback+0x59e>
    if (rx_data[0] == 0xFF) 
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2bff      	cmp	r3, #255	; 0xff
 8003af2:	d118      	bne.n	8003b26 <Slave_Complete_Callback+0x66>
    {
      if (len == 2) {
 8003af4:	1cbb      	adds	r3, r7, #2
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d001      	beq.n	8003b00 <Slave_Complete_Callback+0x40>
 8003afc:	f000 fbf2 	bl	80042e4 <Slave_Complete_Callback+0x824>
        if (rx_data[1] < 128) {
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3301      	adds	r3, #1
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	da01      	bge.n	8003b10 <Slave_Complete_Callback+0x50>
 8003b0c:	f000 fbea 	bl	80042e4 <Slave_Complete_Callback+0x824>
          i2c_address[0] = rx_data[1];
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	785a      	ldrb	r2, [r3, #1]
 8003b14:	4bcf      	ldr	r3, [pc, #828]	; (8003e54 <Slave_Complete_Callback+0x394>)
 8003b16:	701a      	strb	r2, [r3, #0]
          is_flash_write_back = 1;
 8003b18:	4bcf      	ldr	r3, [pc, #828]	; (8003e58 <Slave_Complete_Callback+0x398>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
          user_i2c_init();
 8003b1e:	f7ff f901 	bl	8002d24 <user_i2c_init>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_1, 8*4);
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x90], 0xAF-rx_data[0]+1);               
    }     
  }
 
}
 8003b22:	f000 fbdf 	bl	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0xF1) 
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2bf1      	cmp	r3, #241	; 0xf1
 8003b2c:	d116      	bne.n	8003b5c <Slave_Complete_Callback+0x9c>
      is_irq_enable = !!rx_data[1];
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3301      	adds	r3, #1
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	4193      	sbcs	r3, r2
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	4bc7      	ldr	r3, [pc, #796]	; (8003e5c <Slave_Complete_Callback+0x39c>)
 8003b3e:	701a      	strb	r2, [r3, #0]
      is_flash_write_back = 1;
 8003b40:	4bc5      	ldr	r3, [pc, #788]	; (8003e58 <Slave_Complete_Callback+0x398>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
      if (is_irq_enable) {
 8003b46:	4bc5      	ldr	r3, [pc, #788]	; (8003e5c <Slave_Complete_Callback+0x39c>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <Slave_Complete_Callback+0x94>
 8003b50:	f000 fbc8 	bl	80042e4 <Slave_Complete_Callback+0x824>
        irq_port_init();
 8003b54:	f7ff fe42 	bl	80037dc <irq_port_init>
}
 8003b58:	f000 fbc4 	bl	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0xF0) 
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2bf0      	cmp	r3, #240	; 0xf0
 8003b62:	d104      	bne.n	8003b6e <Slave_Complete_Callback+0xae>
      is_flash_write_back = 1;
 8003b64:	4bbc      	ldr	r3, [pc, #752]	; (8003e58 <Slave_Complete_Callback+0x398>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
}
 8003b6a:	f000 fbbb 	bl	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x10) && (rx_data[0] <= 0x19)) {
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d95c      	bls.n	8003c30 <Slave_Complete_Callback+0x170>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b19      	cmp	r3, #25
 8003b7c:	d858      	bhi.n	8003c30 <Slave_Complete_Callback+0x170>
      for(int i = 0; i < len - 1; i++) {
 8003b7e:	2300      	movs	r3, #0
 8003b80:	22f4      	movs	r2, #244	; 0xf4
 8003b82:	18ba      	adds	r2, r7, r2
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e04a      	b.n	8003c1e <Slave_Complete_Callback+0x15e>
        uint8_t rx_index = rx_data[0]-0x10+i;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	21f4      	movs	r1, #244	; 0xf4
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	18d3      	adds	r3, r2, r3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	20df      	movs	r0, #223	; 0xdf
 8003b9a:	183b      	adds	r3, r7, r0
 8003b9c:	3a10      	subs	r2, #16
 8003b9e:	701a      	strb	r2, [r3, #0]
        rx_buf[rx_index] = rx_data[1+i];
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	189a      	adds	r2, r3, r2
 8003bac:	183b      	adds	r3, r7, r0
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	7811      	ldrb	r1, [r2, #0]
 8003bb2:	256c      	movs	r5, #108	; 0x6c
 8003bb4:	197a      	adds	r2, r7, r5
 8003bb6:	54d1      	strb	r1, [r2, r3]
        rx_mark[rx_index] = 1;
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	243c      	movs	r4, #60	; 0x3c
 8003bbe:	193a      	adds	r2, r7, r4
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	54d1      	strb	r1, [r2, r3]
        if (rx_mark[9] == 0 && rx_mark[10] == 0)     
 8003bc4:	0022      	movs	r2, r4
 8003bc6:	18bb      	adds	r3, r7, r2
 8003bc8:	7a5b      	ldrb	r3, [r3, #9]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10c      	bne.n	8003be8 <Slave_Complete_Callback+0x128>
 8003bce:	18bb      	adds	r3, r7, r2
 8003bd0:	7a9b      	ldrb	r3, [r3, #10]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d108      	bne.n	8003be8 <Slave_Complete_Callback+0x128>
          brightness_index[rx_index] = rx_buf[rx_index];
 8003bd6:	183b      	adds	r3, r7, r0
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	183b      	adds	r3, r7, r0
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	1979      	adds	r1, r7, r5
 8003be0:	5c89      	ldrb	r1, [r1, r2]
 8003be2:	4a9f      	ldr	r2, [pc, #636]	; (8003e60 <Slave_Complete_Callback+0x3a0>)
 8003be4:	54d1      	strb	r1, [r2, r3]
 8003be6:	e014      	b.n	8003c12 <Slave_Complete_Callback+0x152>
        else if (rx_mark[9] && rx_mark[10] == 0 && rx_index == 9)
 8003be8:	223c      	movs	r2, #60	; 0x3c
 8003bea:	18bb      	adds	r3, r7, r2
 8003bec:	7a5b      	ldrb	r3, [r3, #9]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00f      	beq.n	8003c12 <Slave_Complete_Callback+0x152>
 8003bf2:	18bb      	adds	r3, r7, r2
 8003bf4:	7a9b      	ldrb	r3, [r3, #10]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <Slave_Complete_Callback+0x152>
 8003bfa:	22df      	movs	r2, #223	; 0xdf
 8003bfc:	18bb      	adds	r3, r7, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b09      	cmp	r3, #9
 8003c02:	d106      	bne.n	8003c12 <Slave_Complete_Callback+0x152>
          rgb_show_mode = rx_buf[rx_index];
 8003c04:	18bb      	adds	r3, r7, r2
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	226c      	movs	r2, #108	; 0x6c
 8003c0a:	18ba      	adds	r2, r7, r2
 8003c0c:	5cd2      	ldrb	r2, [r2, r3]
 8003c0e:	4b95      	ldr	r3, [pc, #596]	; (8003e64 <Slave_Complete_Callback+0x3a4>)
 8003c10:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < len - 1; i++) {
 8003c12:	22f4      	movs	r2, #244	; 0xf4
 8003c14:	18bb      	adds	r3, r7, r2
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	18ba      	adds	r2, r7, r2
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	1cbb      	adds	r3, r7, #2
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	22f4      	movs	r2, #244	; 0xf4
 8003c26:	18ba      	adds	r2, r7, r2
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	dbac      	blt.n	8003b88 <Slave_Complete_Callback+0xc8>
 8003c2e:	e359      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x43)) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b1f      	cmp	r3, #31
 8003c36:	d800      	bhi.n	8003c3a <Slave_Complete_Callback+0x17a>
 8003c38:	e086      	b.n	8003d48 <Slave_Complete_Callback+0x288>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b43      	cmp	r3, #67	; 0x43
 8003c40:	d900      	bls.n	8003c44 <Slave_Complete_Callback+0x184>
 8003c42:	e081      	b.n	8003d48 <Slave_Complete_Callback+0x288>
      uint32_t *rgb_point_temp = getQueueRear(rgb_buffer);
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <Slave_Complete_Callback+0x3a8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f001 f80b 	bl	8004c64 <getQueueRear>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	22d8      	movs	r2, #216	; 0xd8
 8003c52:	18b9      	adds	r1, r7, r2
 8003c54:	600b      	str	r3, [r1, #0]
      if (rgb_point_temp != NULL) {
 8003c56:	18bb      	adds	r3, r7, r2
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d010      	beq.n	8003c80 <Slave_Complete_Callback+0x1c0>
        memcpy((uint8_t *)lastest_rgb_color, (uint8_t *)rgb_point_temp, PIXEL_MAX*4);
 8003c5e:	4b83      	ldr	r3, [pc, #524]	; (8003e6c <Slave_Complete_Callback+0x3ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	18ba      	adds	r2, r7, r2
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f003 ff4f 	bl	8007b0c <memcpy>
        enqueue(rgb_buffer, lastest_rgb_color);
 8003c6e:	4b7e      	ldr	r3, [pc, #504]	; (8003e68 <Slave_Complete_Callback+0x3a8>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b7e      	ldr	r3, [pc, #504]	; (8003e6c <Slave_Complete_Callback+0x3ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0019      	movs	r1, r3
 8003c78:	0010      	movs	r0, r2
 8003c7a:	f000 ffa1 	bl	8004bc0 <enqueue>
 8003c7e:	e015      	b.n	8003cac <Slave_Complete_Callback+0x1ec>
        uint32_t rgb_temp[PIXEL_MAX] = {0};
 8003c80:	240c      	movs	r4, #12
 8003c82:	193b      	adds	r3, r7, r4
 8003c84:	0018      	movs	r0, r3
 8003c86:	2324      	movs	r3, #36	; 0x24
 8003c88:	001a      	movs	r2, r3
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f003 ff47 	bl	8007b1e <memset>
        memcpy(rgb_temp, lastest_rgb_color, sizeof(rgb_temp));
 8003c90:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <Slave_Complete_Callback+0x3ac>)
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	193b      	adds	r3, r7, r4
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f003 ff37 	bl	8007b0c <memcpy>
        enqueue(rgb_buffer, rgb_temp);
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <Slave_Complete_Callback+0x3a8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	193a      	adds	r2, r7, r4
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 ff8a 	bl	8004bc0 <enqueue>
      for(int i = 0; i < len - 1; i++) {
 8003cac:	2300      	movs	r3, #0
 8003cae:	22f0      	movs	r2, #240	; 0xf0
 8003cb0:	18ba      	adds	r2, r7, r2
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	e03f      	b.n	8003d36 <Slave_Complete_Callback+0x276>
        uint8_t rx_index = rx_data[0]-0x20+i;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	20f0      	movs	r0, #240	; 0xf0
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	18d3      	adds	r3, r2, r3
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	21d7      	movs	r1, #215	; 0xd7
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	3a20      	subs	r2, #32
 8003ccc:	701a      	strb	r2, [r3, #0]
        rx_buf[rx_index] = rx_data[1+i];
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	001a      	movs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	189a      	adds	r2, r3, r2
 8003cda:	0008      	movs	r0, r1
 8003cdc:	183b      	adds	r3, r7, r0
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	7811      	ldrb	r1, [r2, #0]
 8003ce2:	246c      	movs	r4, #108	; 0x6c
 8003ce4:	193a      	adds	r2, r7, r4
 8003ce6:	54d1      	strb	r1, [r2, r3]
        rx_mark[rx_index] = 1;
 8003ce8:	183b      	adds	r3, r7, r0
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	253c      	movs	r5, #60	; 0x3c
 8003cee:	197a      	adds	r2, r7, r5
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	54d1      	strb	r1, [r2, r3]
        if (rx_mark[36] == 0) {
 8003cf4:	197b      	adds	r3, r7, r5
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	5c9b      	ldrb	r3, [r3, r2]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d115      	bne.n	8003d2a <Slave_Complete_Callback+0x26a>
          ((uint8_t *)lastest_rgb_color)[rx_index] = rx_buf[rx_index];
 8003cfe:	183b      	adds	r3, r7, r0
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	4b5a      	ldr	r3, [pc, #360]	; (8003e6c <Slave_Complete_Callback+0x3ac>)
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	183b      	adds	r3, r7, r0
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	18cb      	adds	r3, r1, r3
 8003d0c:	1939      	adds	r1, r7, r4
 8003d0e:	5c8a      	ldrb	r2, [r1, r2]
 8003d10:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)rgb_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8003d12:	183b      	adds	r3, r7, r0
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <Slave_Complete_Callback+0x3a8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	183b      	adds	r3, r7, r0
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	18cb      	adds	r3, r1, r3
 8003d24:	1939      	adds	r1, r7, r4
 8003d26:	5c8a      	ldrb	r2, [r1, r2]
 8003d28:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < len - 1; i++) {
 8003d2a:	22f0      	movs	r2, #240	; 0xf0
 8003d2c:	18bb      	adds	r3, r7, r2
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	18ba      	adds	r2, r7, r2
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	1cbb      	adds	r3, r7, #2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	22f0      	movs	r2, #240	; 0xf0
 8003d3e:	18ba      	adds	r2, r7, r2
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dbb7      	blt.n	8003cb6 <Slave_Complete_Callback+0x1f6>
    else if ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x43)) {
 8003d46:	e2cd      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F)) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b6f      	cmp	r3, #111	; 0x6f
 8003d4e:	d93e      	bls.n	8003dce <Slave_Complete_Callback+0x30e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b8f      	cmp	r3, #143	; 0x8f
 8003d56:	d83a      	bhi.n	8003dce <Slave_Complete_Callback+0x30e>
      for(int i = 0; i < len - 1; i++) {
 8003d58:	2300      	movs	r3, #0
 8003d5a:	22ec      	movs	r2, #236	; 0xec
 8003d5c:	18ba      	adds	r2, r7, r2
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	e02c      	b.n	8003dbc <Slave_Complete_Callback+0x2fc>
        uint8_t rx_index = rx_data[0]-0x70+i;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	24ec      	movs	r4, #236	; 0xec
 8003d68:	193b      	adds	r3, r7, r4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	21d6      	movs	r1, #214	; 0xd6
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	3a70      	subs	r2, #112	; 0x70
 8003d78:	701a      	strb	r2, [r3, #0]
        rx_buf[rx_index] = rx_data[1+i];
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	001a      	movs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	189a      	adds	r2, r3, r2
 8003d86:	0008      	movs	r0, r1
 8003d88:	187b      	adds	r3, r7, r1
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	7811      	ldrb	r1, [r2, #0]
 8003d8e:	256c      	movs	r5, #108	; 0x6c
 8003d90:	197a      	adds	r2, r7, r5
 8003d92:	54d1      	strb	r1, [r2, r3]
        rx_mark[rx_index] = 1;
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	223c      	movs	r2, #60	; 0x3c
 8003d9a:	18ba      	adds	r2, r7, r2
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	54d1      	strb	r1, [r2, r3]
        ((uint8_t *)sys_rgb_color_switch_0)[rx_index] = rx_buf[rx_index];
 8003da0:	183b      	adds	r3, r7, r0
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	7819      	ldrb	r1, [r3, #0]
 8003da8:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <Slave_Complete_Callback+0x3b0>)
 8003daa:	18cb      	adds	r3, r1, r3
 8003dac:	1979      	adds	r1, r7, r5
 8003dae:	5c8a      	ldrb	r2, [r1, r2]
 8003db0:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < len - 1; i++) {
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	193a      	adds	r2, r7, r4
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	1cbb      	adds	r3, r7, #2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	22ec      	movs	r2, #236	; 0xec
 8003dc4:	18ba      	adds	r2, r7, r2
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dbca      	blt.n	8003d62 <Slave_Complete_Callback+0x2a2>
 8003dcc:	e28a      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x90) && (rx_data[0] <= 0xAF)) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b8f      	cmp	r3, #143	; 0x8f
 8003dd4:	d950      	bls.n	8003e78 <Slave_Complete_Callback+0x3b8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2baf      	cmp	r3, #175	; 0xaf
 8003ddc:	d84c      	bhi.n	8003e78 <Slave_Complete_Callback+0x3b8>
      for(int i = 0; i < len - 1; i++) {
 8003dde:	2300      	movs	r3, #0
 8003de0:	22e8      	movs	r2, #232	; 0xe8
 8003de2:	18ba      	adds	r2, r7, r2
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	e02c      	b.n	8003e42 <Slave_Complete_Callback+0x382>
        uint8_t rx_index = rx_data[0]-0x90+i;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	24e8      	movs	r4, #232	; 0xe8
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	18d3      	adds	r3, r2, r3
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	21d5      	movs	r1, #213	; 0xd5
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	3270      	adds	r2, #112	; 0x70
 8003dfe:	701a      	strb	r2, [r3, #0]
        rx_buf[rx_index] = rx_data[1+i];
 8003e00:	193b      	adds	r3, r7, r4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	001a      	movs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	189a      	adds	r2, r3, r2
 8003e0c:	0008      	movs	r0, r1
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	7811      	ldrb	r1, [r2, #0]
 8003e14:	256c      	movs	r5, #108	; 0x6c
 8003e16:	197a      	adds	r2, r7, r5
 8003e18:	54d1      	strb	r1, [r2, r3]
        rx_mark[rx_index] = 1;
 8003e1a:	183b      	adds	r3, r7, r0
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	223c      	movs	r2, #60	; 0x3c
 8003e20:	18ba      	adds	r2, r7, r2
 8003e22:	2101      	movs	r1, #1
 8003e24:	54d1      	strb	r1, [r2, r3]
        ((uint8_t *)sys_rgb_color_switch_1)[rx_index] = rx_buf[rx_index];
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	183b      	adds	r3, r7, r0
 8003e2c:	7819      	ldrb	r1, [r3, #0]
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <Slave_Complete_Callback+0x3b4>)
 8003e30:	18cb      	adds	r3, r1, r3
 8003e32:	1979      	adds	r1, r7, r5
 8003e34:	5c8a      	ldrb	r2, [r1, r2]
 8003e36:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < len - 1; i++) {
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	193a      	adds	r2, r7, r4
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	1cbb      	adds	r3, r7, #2
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	22e8      	movs	r2, #232	; 0xe8
 8003e4a:	18ba      	adds	r2, r7, r2
 8003e4c:	6812      	ldr	r2, [r2, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	dbca      	blt.n	8003de8 <Slave_Complete_Callback+0x328>
 8003e52:	e247      	b.n	80042e4 <Slave_Complete_Callback+0x824>
 8003e54:	200005dc 	.word	0x200005dc
 8003e58:	2000073c 	.word	0x2000073c
 8003e5c:	200006f8 	.word	0x200006f8
 8003e60:	20000814 	.word	0x20000814
 8003e64:	200006f9 	.word	0x200006f9
 8003e68:	20000828 	.word	0x20000828
 8003e6c:	20000820 	.word	0x20000820
 8003e70:	200006fc 	.word	0x200006fc
 8003e74:	2000071c 	.word	0x2000071c
    else if ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x58)) {
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b4f      	cmp	r3, #79	; 0x4f
 8003e7e:	d800      	bhi.n	8003e82 <Slave_Complete_Callback+0x3c2>
 8003e80:	e089      	b.n	8003f96 <Slave_Complete_Callback+0x4d6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b58      	cmp	r3, #88	; 0x58
 8003e88:	d900      	bls.n	8003e8c <Slave_Complete_Callback+0x3cc>
 8003e8a:	e084      	b.n	8003f96 <Slave_Complete_Callback+0x4d6>
      uint8_t *rgb_233_temp = getQueueRear_rgb233(rgb_233_buffer);
 8003e8c:	4bd7      	ldr	r3, [pc, #860]	; (80041ec <Slave_Complete_Callback+0x72c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 ff5d 	bl	8004d50 <getQueueRear_rgb233>
 8003e96:	0003      	movs	r3, r0
 8003e98:	22d0      	movs	r2, #208	; 0xd0
 8003e9a:	18b9      	adds	r1, r7, r2
 8003e9c:	600b      	str	r3, [r1, #0]
      if (rgb_233_temp != NULL) {
 8003e9e:	18bb      	adds	r3, r7, r2
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <Slave_Complete_Callback+0x408>
        memcpy((uint8_t *)lastest_rgb_233_color, (uint8_t *)rgb_233_temp, PIXEL_MAX);
 8003ea6:	4bd2      	ldr	r3, [pc, #840]	; (80041f0 <Slave_Complete_Callback+0x730>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	18ba      	adds	r2, r7, r2
 8003eac:	6811      	ldr	r1, [r2, #0]
 8003eae:	2209      	movs	r2, #9
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f003 fe2b 	bl	8007b0c <memcpy>
        enqueue_rgb233(rgb_233_buffer, lastest_rgb_233_color);
 8003eb6:	4bcd      	ldr	r3, [pc, #820]	; (80041ec <Slave_Complete_Callback+0x72c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4bcd      	ldr	r3, [pc, #820]	; (80041f0 <Slave_Complete_Callback+0x730>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0019      	movs	r1, r3
 8003ec0:	0010      	movs	r0, r2
 8003ec2:	f000 fef3 	bl	8004cac <enqueue_rgb233>
 8003ec6:	e019      	b.n	8003efc <Slave_Complete_Callback+0x43c>
        uint8_t rgb_temp[PIXEL_MAX] = {0};
 8003ec8:	2430      	movs	r4, #48	; 0x30
 8003eca:	193b      	adds	r3, r7, r4
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f003 fe21 	bl	8007b1e <memset>
        memcpy(rgb_temp, lastest_rgb_233_color, PIXEL_MAX);
 8003edc:	4bc4      	ldr	r3, [pc, #784]	; (80041f0 <Slave_Complete_Callback+0x730>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	193a      	adds	r2, r7, r4
 8003ee2:	0010      	movs	r0, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	2309      	movs	r3, #9
 8003ee8:	001a      	movs	r2, r3
 8003eea:	f003 fe0f 	bl	8007b0c <memcpy>
        enqueue_rgb233(rgb_233_buffer, rgb_temp);
 8003eee:	4bbf      	ldr	r3, [pc, #764]	; (80041ec <Slave_Complete_Callback+0x72c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	0011      	movs	r1, r2
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f000 fed8 	bl	8004cac <enqueue_rgb233>
      for(int i = 0; i < len - 1; i++) {
 8003efc:	2300      	movs	r3, #0
 8003efe:	22e4      	movs	r2, #228	; 0xe4
 8003f00:	18ba      	adds	r2, r7, r2
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e03e      	b.n	8003f84 <Slave_Complete_Callback+0x4c4>
        uint8_t rx_index = rx_data[0]-0x50+i;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	20e4      	movs	r0, #228	; 0xe4
 8003f0c:	183b      	adds	r3, r7, r0
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	18d3      	adds	r3, r2, r3
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	21cf      	movs	r1, #207	; 0xcf
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	3a50      	subs	r2, #80	; 0x50
 8003f1c:	701a      	strb	r2, [r3, #0]
        rx_buf[rx_index] = rx_data[1+i];
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	001a      	movs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	189a      	adds	r2, r3, r2
 8003f2a:	0008      	movs	r0, r1
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	7811      	ldrb	r1, [r2, #0]
 8003f32:	246c      	movs	r4, #108	; 0x6c
 8003f34:	193a      	adds	r2, r7, r4
 8003f36:	54d1      	strb	r1, [r2, r3]
        rx_mark[rx_index] = 1;
 8003f38:	183b      	adds	r3, r7, r0
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	253c      	movs	r5, #60	; 0x3c
 8003f3e:	197a      	adds	r2, r7, r5
 8003f40:	2101      	movs	r1, #1
 8003f42:	54d1      	strb	r1, [r2, r3]
        if (rx_mark[9] == 0) {
 8003f44:	197b      	adds	r3, r7, r5
 8003f46:	7a5b      	ldrb	r3, [r3, #9]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d115      	bne.n	8003f78 <Slave_Complete_Callback+0x4b8>
          ((uint8_t *)lastest_rgb_233_color)[rx_index] = rx_buf[rx_index];
 8003f4c:	183b      	adds	r3, r7, r0
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	4ba7      	ldr	r3, [pc, #668]	; (80041f0 <Slave_Complete_Callback+0x730>)
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	183b      	adds	r3, r7, r0
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	18cb      	adds	r3, r1, r3
 8003f5a:	1939      	adds	r1, r7, r4
 8003f5c:	5c8a      	ldrb	r2, [r1, r2]
 8003f5e:	701a      	strb	r2, [r3, #0]
          ((uint8_t *)rgb_233_buffer->rear->data)[rx_index] = rx_buf[rx_index];
 8003f60:	183b      	adds	r3, r7, r0
 8003f62:	781a      	ldrb	r2, [r3, #0]
 8003f64:	4ba1      	ldr	r3, [pc, #644]	; (80041ec <Slave_Complete_Callback+0x72c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	183b      	adds	r3, r7, r0
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	18cb      	adds	r3, r1, r3
 8003f72:	1939      	adds	r1, r7, r4
 8003f74:	5c8a      	ldrb	r2, [r1, r2]
 8003f76:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i < len - 1; i++) {
 8003f78:	22e4      	movs	r2, #228	; 0xe4
 8003f7a:	18bb      	adds	r3, r7, r2
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	18ba      	adds	r2, r7, r2
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	1cbb      	adds	r3, r7, #2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	22e4      	movs	r2, #228	; 0xe4
 8003f8c:	18ba      	adds	r2, r7, r2
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	dbb8      	blt.n	8003f06 <Slave_Complete_Callback+0x446>
    else if ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x58)) {
 8003f94:	e1a6      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0xFD)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2bfd      	cmp	r3, #253	; 0xfd
 8003f9c:	d000      	beq.n	8003fa0 <Slave_Complete_Callback+0x4e0>
 8003f9e:	e1a1      	b.n	80042e4 <Slave_Complete_Callback+0x824>
      if (rx_data[1] == 1) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d000      	beq.n	8003fac <Slave_Complete_Callback+0x4ec>
 8003faa:	e19b      	b.n	80042e4 <Slave_Complete_Callback+0x824>
        flag_jump_bootloader = 1;
 8003fac:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <Slave_Complete_Callback+0x734>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	701a      	strb	r2, [r3, #0]
        if (flag_jump_bootloader) {
 8003fb2:	4b90      	ldr	r3, [pc, #576]	; (80041f4 <Slave_Complete_Callback+0x734>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d100      	bne.n	8003fbe <Slave_Complete_Callback+0x4fe>
 8003fbc:	e192      	b.n	80042e4 <Slave_Complete_Callback+0x824>
          LL_I2C_DeInit(I2C2);
 8003fbe:	4b8e      	ldr	r3, [pc, #568]	; (80041f8 <Slave_Complete_Callback+0x738>)
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f003 fcd3 	bl	800796c <LL_I2C_DeInit>
          LL_I2C_DisableAutoEndMode(I2C2);
 8003fc6:	4b8c      	ldr	r3, [pc, #560]	; (80041f8 <Slave_Complete_Callback+0x738>)
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fb61 	bl	8003690 <LL_I2C_DisableAutoEndMode>
          LL_I2C_Disable(I2C2);
 8003fce:	4b8a      	ldr	r3, [pc, #552]	; (80041f8 <Slave_Complete_Callback+0x738>)
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff fb3f 	bl	8003654 <LL_I2C_Disable>
          LL_I2C_DisableIT_ADDR(I2C2);
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <Slave_Complete_Callback+0x738>)
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fb4a 	bl	8003672 <LL_I2C_DisableIT_ADDR>
          HAL_TIM_PWM_MspDeInit(&htim3); 
 8003fde:	4b87      	ldr	r3, [pc, #540]	; (80041fc <Slave_Complete_Callback+0x73c>)
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 fdbd 	bl	8004b60 <HAL_TIM_PWM_MspDeInit>
          my_gpio_deinit();
 8003fe6:	f7fe fd4b 	bl	8002a80 <my_gpio_deinit>
          i2c_port_set_to_input();
 8003fea:	f7ff fbbf 	bl	800376c <i2c_port_set_to_input>
          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 8003fee:	e00d      	b.n	800400c <Slave_Complete_Callback+0x54c>
            jump_bootloader_timeout++;
 8003ff0:	4b83      	ldr	r3, [pc, #524]	; (8004200 <Slave_Complete_Callback+0x740>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <Slave_Complete_Callback+0x740>)
 8003ff8:	601a      	str	r2, [r3, #0]
            if (jump_bootloader_timeout >= 60000) {
 8003ffa:	4b81      	ldr	r3, [pc, #516]	; (8004200 <Slave_Complete_Callback+0x740>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a81      	ldr	r2, [pc, #516]	; (8004204 <Slave_Complete_Callback+0x744>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d903      	bls.n	800400c <Slave_Complete_Callback+0x54c>
              flag_jump_bootloader = 0;
 8004004:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <Slave_Complete_Callback+0x734>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
              break;
 800400a:	e013      	b.n	8004034 <Slave_Complete_Callback+0x574>
          while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) || HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	011a      	lsls	r2, r3, #4
 8004010:	23a0      	movs	r3, #160	; 0xa0
 8004012:	05db      	lsls	r3, r3, #23
 8004014:	0011      	movs	r1, r2
 8004016:	0018      	movs	r0, r3
 8004018:	f002 f910 	bl	800623c <HAL_GPIO_ReadPin>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d1e7      	bne.n	8003ff0 <Slave_Complete_Callback+0x530>
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	23a0      	movs	r3, #160	; 0xa0
 8004026:	05db      	lsls	r3, r3, #23
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f002 f906 	bl	800623c <HAL_GPIO_ReadPin>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d1dd      	bne.n	8003ff0 <Slave_Complete_Callback+0x530>
          if (jump_bootloader_timeout < 60000) {
 8004034:	4b72      	ldr	r3, [pc, #456]	; (8004200 <Slave_Complete_Callback+0x740>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a72      	ldr	r2, [pc, #456]	; (8004204 <Slave_Complete_Callback+0x744>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d801      	bhi.n	8004042 <Slave_Complete_Callback+0x582>
            NVIC_SystemReset();
 800403e:	f7ff fa39 	bl	80034b4 <__NVIC_SystemReset>
            MX_GPIO_Init();
 8004042:	f7fe fcb5 	bl	80029b0 <MX_GPIO_Init>
            MX_DMA_Init();
 8004046:	f7fe fa59 	bl	80024fc <MX_DMA_Init>
            MX_TIM3_Init(); 
 800404a:	f000 fc9d 	bl	8004988 <MX_TIM3_Init>
            user_i2c_init(); 
 800404e:	f7fe fe69 	bl	8002d24 <user_i2c_init>
            i2c2_it_enable(); 
 8004052:	f7ff f8a1 	bl	8003198 <i2c2_it_enable>
            jump_bootloader_timeout = 0;
 8004056:	4b6a      	ldr	r3, [pc, #424]	; (8004200 <Slave_Complete_Callback+0x740>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
}
 800405c:	e142      	b.n	80042e4 <Slave_Complete_Callback+0x824>
  else if (len == 1) {
 800405e:	1cbb      	adds	r3, r7, #2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d000      	beq.n	8004068 <Slave_Complete_Callback+0x5a8>
 8004066:	e13d      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    if (rx_data[0] == 0xFF) 
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2bff      	cmp	r3, #255	; 0xff
 800406e:	d105      	bne.n	800407c <Slave_Complete_Callback+0x5bc>
      i2c2_set_send_data(i2c_address, 1);
 8004070:	4b65      	ldr	r3, [pc, #404]	; (8004208 <Slave_Complete_Callback+0x748>)
 8004072:	2101      	movs	r1, #1
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff f8c9 	bl	800320c <i2c2_set_send_data>
}
 800407a:	e133      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0xFE) 
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2bfe      	cmp	r3, #254	; 0xfe
 8004082:	d105      	bne.n	8004090 <Slave_Complete_Callback+0x5d0>
      i2c2_set_send_data((uint8_t *)&fm_version, 1);
 8004084:	4b61      	ldr	r3, [pc, #388]	; (800420c <Slave_Complete_Callback+0x74c>)
 8004086:	2101      	movs	r1, #1
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff f8bf 	bl	800320c <i2c2_set_send_data>
}
 800408e:	e129      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0xF1) 
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2bf1      	cmp	r3, #241	; 0xf1
 8004096:	d105      	bne.n	80040a4 <Slave_Complete_Callback+0x5e4>
      i2c2_set_send_data((uint8_t *)&is_irq_enable, 1);
 8004098:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <Slave_Complete_Callback+0x750>)
 800409a:	2101      	movs	r1, #1
 800409c:	0018      	movs	r0, r3
 800409e:	f7ff f8b5 	bl	800320c <i2c2_set_send_data>
}
 80040a2:	e11f      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if (rx_data[0] == 0) {
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <Slave_Complete_Callback+0x60c>
      if (is_irq_enable)
 80040ac:	4b58      	ldr	r3, [pc, #352]	; (8004210 <Slave_Complete_Callback+0x750>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d004      	beq.n	80040c0 <Slave_Complete_Callback+0x600>
        GPIOA->BSRR = GPIO_PIN_13;
 80040b6:	23a0      	movs	r3, #160	; 0xa0
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0192      	lsls	r2, r2, #6
 80040be:	619a      	str	r2, [r3, #24]
      i2c2_set_send_data((uint8_t *)&switch_status, 1);
 80040c0:	4b54      	ldr	r3, [pc, #336]	; (8004214 <Slave_Complete_Callback+0x754>)
 80040c2:	2101      	movs	r1, #1
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7ff f8a1 	bl	800320c <i2c2_set_send_data>
}
 80040ca:	e10b      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x60) && (rx_data[0] <= 0x67)) {
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b5f      	cmp	r3, #95	; 0x5f
 80040d2:	d944      	bls.n	800415e <Slave_Complete_Callback+0x69e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b67      	cmp	r3, #103	; 0x67
 80040da:	d840      	bhi.n	800415e <Slave_Complete_Callback+0x69e>
      for (int i = 0; i < 8; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	22e0      	movs	r2, #224	; 0xe0
 80040e0:	18ba      	adds	r2, r7, r2
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e025      	b.n	8004132 <Slave_Complete_Callback+0x672>
        switch_status_set[i] = (!!(switch_status & (1 << i)));
 80040e6:	4b4b      	ldr	r3, [pc, #300]	; (8004214 <Slave_Complete_Callback+0x754>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	001a      	movs	r2, r3
 80040ee:	20e0      	movs	r0, #224	; 0xe0
 80040f0:	183b      	adds	r3, r7, r0
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	411a      	asrs	r2, r3
 80040f6:	0013      	movs	r3, r2
 80040f8:	2201      	movs	r2, #1
 80040fa:	4013      	ands	r3, r2
 80040fc:	1e5a      	subs	r2, r3, #1
 80040fe:	4193      	sbcs	r3, r2
 8004100:	b2db      	uxtb	r3, r3
 8004102:	0019      	movs	r1, r3
 8004104:	4a44      	ldr	r2, [pc, #272]	; (8004218 <Slave_Complete_Callback+0x758>)
 8004106:	183b      	adds	r3, r7, r0
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	1c0a      	adds	r2, r1, #0
 800410e:	701a      	strb	r2, [r3, #0]
        buf[i] = switch_status_set[i];
 8004110:	4a41      	ldr	r2, [pc, #260]	; (8004218 <Slave_Complete_Callback+0x758>)
 8004112:	183b      	adds	r3, r7, r0
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	7819      	ldrb	r1, [r3, #0]
 800411a:	239c      	movs	r3, #156	; 0x9c
 800411c:	18fa      	adds	r2, r7, r3
 800411e:	183b      	adds	r3, r7, r0
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	1c0a      	adds	r2, r1, #0
 8004126:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 8; i++) {
 8004128:	183b      	adds	r3, r7, r0
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	183a      	adds	r2, r7, r0
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	23e0      	movs	r3, #224	; 0xe0
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b07      	cmp	r3, #7
 800413a:	ddd4      	ble.n	80040e6 <Slave_Complete_Callback+0x626>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x60], 0x67-rx_data[0]+1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	3b60      	subs	r3, #96	; 0x60
 8004142:	229c      	movs	r2, #156	; 0x9c
 8004144:	18ba      	adds	r2, r7, r2
 8004146:	18d2      	adds	r2, r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	2168      	movs	r1, #104	; 0x68
 8004150:	1acb      	subs	r3, r1, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	0019      	movs	r1, r3
 8004156:	0010      	movs	r0, r2
 8004158:	f7ff f858 	bl	800320c <i2c2_set_send_data>
 800415c:	e0c2      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x10) && (rx_data[0] <= 0x19)) {
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b0f      	cmp	r3, #15
 8004164:	d921      	bls.n	80041aa <Slave_Complete_Callback+0x6ea>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b19      	cmp	r3, #25
 800416c:	d81d      	bhi.n	80041aa <Slave_Complete_Callback+0x6ea>
      memcpy(buf, brightness_index, 9);
 800416e:	249c      	movs	r4, #156	; 0x9c
 8004170:	193a      	adds	r2, r7, r4
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <Slave_Complete_Callback+0x75c>)
 8004174:	0010      	movs	r0, r2
 8004176:	0019      	movs	r1, r3
 8004178:	2309      	movs	r3, #9
 800417a:	001a      	movs	r2, r3
 800417c:	f003 fcc6 	bl	8007b0c <memcpy>
      buf[9] = rgb_show_mode;
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <Slave_Complete_Callback+0x760>)
 8004182:	781a      	ldrb	r2, [r3, #0]
 8004184:	0021      	movs	r1, r4
 8004186:	187b      	adds	r3, r7, r1
 8004188:	725a      	strb	r2, [r3, #9]
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x10], 0x19-rx_data[0]+1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	3b10      	subs	r3, #16
 8004190:	187a      	adds	r2, r7, r1
 8004192:	18d2      	adds	r2, r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	211a      	movs	r1, #26
 800419c:	1acb      	subs	r3, r1, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	0019      	movs	r1, r3
 80041a2:	0010      	movs	r0, r2
 80041a4:	f7ff f832 	bl	800320c <i2c2_set_send_data>
 80041a8:	e09c      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x20) && (rx_data[0] <= 0x43)) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b1f      	cmp	r3, #31
 80041b0:	d93a      	bls.n	8004228 <Slave_Complete_Callback+0x768>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b43      	cmp	r3, #67	; 0x43
 80041b8:	d836      	bhi.n	8004228 <Slave_Complete_Callback+0x768>
      memcpy(buf, (uint8_t *)lastest_rgb_color, PIXEL_MAX*4);
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <Slave_Complete_Callback+0x764>)
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	249c      	movs	r4, #156	; 0x9c
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	0018      	movs	r0, r3
 80041c6:	f003 fca1 	bl	8007b0c <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x20], 0x43-rx_data[0]+1);               
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	3b20      	subs	r3, #32
 80041d0:	193a      	adds	r2, r7, r4
 80041d2:	18d2      	adds	r2, r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2144      	movs	r1, #68	; 0x44
 80041dc:	1acb      	subs	r3, r1, r3
 80041de:	b29b      	uxth	r3, r3
 80041e0:	0019      	movs	r1, r3
 80041e2:	0010      	movs	r0, r2
 80041e4:	f7ff f812 	bl	800320c <i2c2_set_send_data>
 80041e8:	e07c      	b.n	80042e4 <Slave_Complete_Callback+0x824>
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	2000082c 	.word	0x2000082c
 80041f0:	20000824 	.word	0x20000824
 80041f4:	200006e0 	.word	0x200006e0
 80041f8:	40005800 	.word	0x40005800
 80041fc:	20000744 	.word	0x20000744
 8004200:	200006e4 	.word	0x200006e4
 8004204:	0000ea5f 	.word	0x0000ea5f
 8004208:	200005dc 	.word	0x200005dc
 800420c:	20000000 	.word	0x20000000
 8004210:	200006f8 	.word	0x200006f8
 8004214:	200006ec 	.word	0x200006ec
 8004218:	200006f0 	.word	0x200006f0
 800421c:	20000814 	.word	0x20000814
 8004220:	200006f9 	.word	0x200006f9
 8004224:	20000820 	.word	0x20000820
    else if ((rx_data[0] >= 0x50) && (rx_data[0] <= 0x58)) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b4f      	cmp	r3, #79	; 0x4f
 800422e:	d91b      	bls.n	8004268 <Slave_Complete_Callback+0x7a8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b58      	cmp	r3, #88	; 0x58
 8004236:	d817      	bhi.n	8004268 <Slave_Complete_Callback+0x7a8>
      memcpy(buf, (uint8_t *)lastest_rgb_233_color, PIXEL_MAX);
 8004238:	4b2c      	ldr	r3, [pc, #176]	; (80042ec <Slave_Complete_Callback+0x82c>)
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	249c      	movs	r4, #156	; 0x9c
 800423e:	193b      	adds	r3, r7, r4
 8004240:	2209      	movs	r2, #9
 8004242:	0018      	movs	r0, r3
 8004244:	f003 fc62 	bl	8007b0c <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x50], 0x58-rx_data[0]+1);               
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	3b50      	subs	r3, #80	; 0x50
 800424e:	193a      	adds	r2, r7, r4
 8004250:	18d2      	adds	r2, r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b29b      	uxth	r3, r3
 8004258:	2159      	movs	r1, #89	; 0x59
 800425a:	1acb      	subs	r3, r1, r3
 800425c:	b29b      	uxth	r3, r3
 800425e:	0019      	movs	r1, r3
 8004260:	0010      	movs	r0, r2
 8004262:	f7fe ffd3 	bl	800320c <i2c2_set_send_data>
 8004266:	e03d      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x70) && (rx_data[0] <= 0x8F)) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b6f      	cmp	r3, #111	; 0x6f
 800426e:	d91a      	bls.n	80042a6 <Slave_Complete_Callback+0x7e6>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b8f      	cmp	r3, #143	; 0x8f
 8004276:	d816      	bhi.n	80042a6 <Slave_Complete_Callback+0x7e6>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_0, 8*4);
 8004278:	491d      	ldr	r1, [pc, #116]	; (80042f0 <Slave_Complete_Callback+0x830>)
 800427a:	249c      	movs	r4, #156	; 0x9c
 800427c:	193b      	adds	r3, r7, r4
 800427e:	2220      	movs	r2, #32
 8004280:	0018      	movs	r0, r3
 8004282:	f003 fc43 	bl	8007b0c <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x70], 0x8F-rx_data[0]+1);                
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	3b70      	subs	r3, #112	; 0x70
 800428c:	193a      	adds	r2, r7, r4
 800428e:	18d2      	adds	r2, r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	2190      	movs	r1, #144	; 0x90
 8004298:	1acb      	subs	r3, r1, r3
 800429a:	b29b      	uxth	r3, r3
 800429c:	0019      	movs	r1, r3
 800429e:	0010      	movs	r0, r2
 80042a0:	f7fe ffb4 	bl	800320c <i2c2_set_send_data>
 80042a4:	e01e      	b.n	80042e4 <Slave_Complete_Callback+0x824>
    else if ((rx_data[0] >= 0x90) && (rx_data[0] <= 0xAF)) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b8f      	cmp	r3, #143	; 0x8f
 80042ac:	d91a      	bls.n	80042e4 <Slave_Complete_Callback+0x824>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2baf      	cmp	r3, #175	; 0xaf
 80042b4:	d816      	bhi.n	80042e4 <Slave_Complete_Callback+0x824>
      memcpy(buf, (uint8_t *)sys_rgb_color_switch_1, 8*4);
 80042b6:	490f      	ldr	r1, [pc, #60]	; (80042f4 <Slave_Complete_Callback+0x834>)
 80042b8:	249c      	movs	r4, #156	; 0x9c
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	2220      	movs	r2, #32
 80042be:	0018      	movs	r0, r3
 80042c0:	f003 fc24 	bl	8007b0c <memcpy>
      i2c2_set_send_data((uint8_t *)&buf[rx_data[0]-0x90], 0xAF-rx_data[0]+1);               
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	3b90      	subs	r3, #144	; 0x90
 80042ca:	193a      	adds	r2, r7, r4
 80042cc:	18d2      	adds	r2, r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	21b0      	movs	r1, #176	; 0xb0
 80042d6:	1acb      	subs	r3, r1, r3
 80042d8:	b29b      	uxth	r3, r3
 80042da:	0019      	movs	r1, r3
 80042dc:	0010      	movs	r0, r2
 80042de:	f7fe ff95 	bl	800320c <i2c2_set_send_data>
}
 80042e2:	e7ff      	b.n	80042e4 <Slave_Complete_Callback+0x824>
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b03e      	add	sp, #248	; 0xf8
 80042ea:	bdb0      	pop	{r4, r5, r7, pc}
 80042ec:	20000824 	.word	0x20000824
 80042f0:	200006fc 	.word	0x200006fc
 80042f4:	2000071c 	.word	0x2000071c

080042f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b090      	sub	sp, #64	; 0x40
 80042fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  IAP_Set();
 80042fe:	f7ff f9f7 	bl	80036f0 <IAP_Set>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004302:	f000 ffa3 	bl	800524c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004306:	f000 f90b 	bl	8004520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800430a:	f7fe fb51 	bl	80029b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800430e:	f7fe f8f5 	bl	80024fc <MX_DMA_Init>
  // MX_I2C2_Init();
  MX_TIM3_Init();
 8004312:	f000 fb39 	bl	8004988 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  init_flash_data();
 8004316:	f7ff fa99 	bl	800384c <init_flash_data>
  if (is_irq_enable) {
 800431a:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <main+0x1f0>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <main+0x30>
    irq_port_init();
 8004324:	f7ff fa5a 	bl	80037dc <irq_port_init>
  }
  sk6812_init(PIXEL_MAX);
 8004328:	2009      	movs	r0, #9
 800432a:	f000 fd21 	bl	8004d70 <sk6812_init>
  init_swtich_status();
 800432e:	f7ff fb29 	bl	8003984 <init_swtich_status>

  user_i2c_init(); 
 8004332:	f7fe fcf7 	bl	8002d24 <user_i2c_init>
  i2c2_it_enable(); 
 8004336:	f7fe ff2f 	bl	8003198 <i2c2_it_enable>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    i2c_timeout_counter = 0;
 800433a:	4b6c      	ldr	r3, [pc, #432]	; (80044ec <main+0x1f4>)
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
    if (i2c_stop_timeout_flag) {
 8004340:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <main+0x1f8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <main+0x76>
      if (i2c_stop_timeout_delay < HAL_GetTick()) {
 8004348:	f000 fffc 	bl	8005344 <HAL_GetTick>
 800434c:	0002      	movs	r2, r0
 800434e:	4b69      	ldr	r3, [pc, #420]	; (80044f4 <main+0x1fc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d90b      	bls.n	800436e <main+0x76>
        i2c_stop_timeout_counter++;
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <main+0x200>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	4b66      	ldr	r3, [pc, #408]	; (80044f8 <main+0x200>)
 800435e:	601a      	str	r2, [r3, #0]
        i2c_stop_timeout_delay = HAL_GetTick() + 10;
 8004360:	f000 fff0 	bl	8005344 <HAL_GetTick>
 8004364:	0003      	movs	r3, r0
 8004366:	330a      	adds	r3, #10
 8004368:	001a      	movs	r2, r3
 800436a:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <main+0x1fc>)
 800436c:	601a      	str	r2, [r3, #0]
      }
    }
    if (i2c_stop_timeout_counter > 50) {
 800436e:	4b62      	ldr	r3, [pc, #392]	; (80044f8 <main+0x200>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b32      	cmp	r3, #50	; 0x32
 8004374:	d918      	bls.n	80043a8 <main+0xb0>
      LL_I2C_DeInit(I2C2);
 8004376:	4b61      	ldr	r3, [pc, #388]	; (80044fc <main+0x204>)
 8004378:	0018      	movs	r0, r3
 800437a:	f003 faf7 	bl	800796c <LL_I2C_DeInit>
      LL_I2C_DisableAutoEndMode(I2C2);
 800437e:	4b5f      	ldr	r3, [pc, #380]	; (80044fc <main+0x204>)
 8004380:	0018      	movs	r0, r3
 8004382:	f7ff f985 	bl	8003690 <LL_I2C_DisableAutoEndMode>
      LL_I2C_Disable(I2C2);
 8004386:	4b5d      	ldr	r3, [pc, #372]	; (80044fc <main+0x204>)
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff f963 	bl	8003654 <LL_I2C_Disable>
      LL_I2C_DisableIT_ADDR(I2C2);     
 800438e:	4b5b      	ldr	r3, [pc, #364]	; (80044fc <main+0x204>)
 8004390:	0018      	movs	r0, r3
 8004392:	f7ff f96e 	bl	8003672 <LL_I2C_DisableIT_ADDR>
      user_i2c_init();    
 8004396:	f7fe fcc5 	bl	8002d24 <user_i2c_init>
      i2c2_it_enable();
 800439a:	f7fe fefd 	bl	8003198 <i2c2_it_enable>
      HAL_Delay(500);
 800439e:	23fa      	movs	r3, #250	; 0xfa
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 ffd8 	bl	8005358 <HAL_Delay>
    } 

    uint32_t rgb_show_temp[PIXEL_MAX] = {0};
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	0018      	movs	r0, r3
 80043ac:	2324      	movs	r3, #36	; 0x24
 80043ae:	001a      	movs	r2, r3
 80043b0:	2100      	movs	r1, #0
 80043b2:	f003 fbb4 	bl	8007b1e <memset>
    uint8_t rgb_233_show_temp[PIXEL_MAX] = {0};
 80043b6:	2328      	movs	r3, #40	; 0x28
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	3304      	adds	r3, #4
 80043c0:	2205      	movs	r2, #5
 80043c2:	2100      	movs	r1, #0
 80043c4:	0018      	movs	r0, r3
 80043c6:	f003 fbaa 	bl	8007b1e <memset>
    if (!rgb_show_lock) {
 80043ca:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <main+0x208>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d000      	beq.n	80043d4 <main+0xdc>
 80043d2:	e07e      	b.n	80044d2 <main+0x1da>
      if (rgb_show_mode) {
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <main+0x20c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02e      	beq.n	800443a <main+0x142>
          for (int i = 0; i < 8; i++) {
 80043dc:	2300      	movs	r3, #0
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e0:	e01f      	b.n	8004422 <main+0x12a>
            if ((switch_status >> i) & 0x01) {
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <main+0x210>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	001a      	movs	r2, r3
 80043ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ec:	411a      	asrs	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	2201      	movs	r2, #1
 80043f2:	4013      	ands	r3, r2
 80043f4:	d009      	beq.n	800440a <main+0x112>
              neopixel_set_color(i, sys_rgb_color_switch_1[i]);
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f8:	b2d8      	uxtb	r0, r3
 80043fa:	4b44      	ldr	r3, [pc, #272]	; (800450c <main+0x214>)
 80043fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	58d3      	ldr	r3, [r2, r3]
 8004402:	0019      	movs	r1, r3
 8004404:	f000 fd02 	bl	8004e0c <neopixel_set_color>
 8004408:	e008      	b.n	800441c <main+0x124>
            }
            else {
              neopixel_set_color(i, sys_rgb_color_switch_0[i]);
 800440a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440c:	b2d8      	uxtb	r0, r3
 800440e:	4b40      	ldr	r3, [pc, #256]	; (8004510 <main+0x218>)
 8004410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	58d3      	ldr	r3, [r2, r3]
 8004416:	0019      	movs	r1, r3
 8004418:	f000 fcf8 	bl	8004e0c <neopixel_set_color>
          for (int i = 0; i < 8; i++) {
 800441c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441e:	3301      	adds	r3, #1
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004424:	2b07      	cmp	r3, #7
 8004426:	dddc      	ble.n	80043e2 <main+0xea>
            }
          }
          neopixel_set_color(8, 0);
 8004428:	2100      	movs	r1, #0
 800442a:	2008      	movs	r0, #8
 800442c:	f000 fcee 	bl	8004e0c <neopixel_set_color>
          rgb_show_lock = 1;
 8004430:	4b33      	ldr	r3, [pc, #204]	; (8004500 <main+0x208>)
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
          ws2812_show();        
 8004436:	f000 fe31 	bl	800509c <ws2812_show>
      }
      if (dequeue(rgb_buffer, rgb_show_temp) == 1) {
 800443a:	4b36      	ldr	r3, [pc, #216]	; (8004514 <main+0x21c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1d3a      	adds	r2, r7, #4
 8004440:	0011      	movs	r1, r2
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fbe5 	bl	8004c12 <dequeue>
 8004448:	0003      	movs	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d11a      	bne.n	8004484 <main+0x18c>
        if (!rgb_show_mode) {
 800444e:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <main+0x20c>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <main+0x18c>
          for (int i = 0; i < PIXEL_MAX; i++) {
 8004456:	2300      	movs	r3, #0
 8004458:	63bb      	str	r3, [r7, #56]	; 0x38
 800445a:	e00b      	b.n	8004474 <main+0x17c>
            neopixel_set_color(i, rgb_show_temp[i]);
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	b2d8      	uxtb	r0, r3
 8004460:	1d3b      	adds	r3, r7, #4
 8004462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004464:	0092      	lsls	r2, r2, #2
 8004466:	58d3      	ldr	r3, [r2, r3]
 8004468:	0019      	movs	r1, r3
 800446a:	f000 fccf 	bl	8004e0c <neopixel_set_color>
          for (int i = 0; i < PIXEL_MAX; i++) {
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	3301      	adds	r3, #1
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	2b08      	cmp	r3, #8
 8004478:	ddf0      	ble.n	800445c <main+0x164>
          }
          rgb_show_lock = 1;
 800447a:	4b21      	ldr	r3, [pc, #132]	; (8004500 <main+0x208>)
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
          ws2812_show();
 8004480:	f000 fe0c 	bl	800509c <ws2812_show>
        }
      }
      if (dequeue_rgb233(rgb_233_buffer, rgb_233_show_temp) == 1) {
 8004484:	4b24      	ldr	r3, [pc, #144]	; (8004518 <main+0x220>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2228      	movs	r2, #40	; 0x28
 800448a:	18ba      	adds	r2, r7, r2
 800448c:	0011      	movs	r1, r2
 800448e:	0018      	movs	r0, r3
 8004490:	f000 fc35 	bl	8004cfe <dequeue_rgb233>
 8004494:	0003      	movs	r3, r0
 8004496:	2b01      	cmp	r3, #1
 8004498:	d11b      	bne.n	80044d2 <main+0x1da>
        if (!rgb_show_mode) {
 800449a:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <main+0x20c>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d117      	bne.n	80044d2 <main+0x1da>
          for (int i = 0; i < PIXEL_MAX; i++) {
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e00c      	b.n	80044c2 <main+0x1ca>
            rgb233_to_rgb888(i, rgb_233_show_temp[i]);
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	b2d8      	uxtb	r0, r3
 80044ac:	2328      	movs	r3, #40	; 0x28
 80044ae:	18fa      	adds	r2, r7, r3
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	0019      	movs	r1, r3
 80044b8:	f000 fd70 	bl	8004f9c <rgb233_to_rgb888>
          for (int i = 0; i < PIXEL_MAX; i++) {
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	3301      	adds	r3, #1
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	ddef      	ble.n	80044a8 <main+0x1b0>
          }
          rgb_show_lock = 1;
 80044c8:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <main+0x208>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
          ws2812_show();
 80044ce:	f000 fde5 	bl	800509c <ws2812_show>
        }
      }
    }
    if (is_flash_write_back) {
 80044d2:	4b12      	ldr	r3, [pc, #72]	; (800451c <main+0x224>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d100      	bne.n	80044dc <main+0x1e4>
 80044da:	e72e      	b.n	800433a <main+0x42>
      flash_data_write_back();
 80044dc:	f7ff fa12 	bl	8003904 <flash_data_write_back>
      is_flash_write_back = 0;
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <main+0x224>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  {
 80044e6:	e728      	b.n	800433a <main+0x42>
 80044e8:	200006f8 	.word	0x200006f8
 80044ec:	200005d0 	.word	0x200005d0
 80044f0:	200005d4 	.word	0x200005d4
 80044f4:	200006e8 	.word	0x200006e8
 80044f8:	200005d8 	.word	0x200005d8
 80044fc:	40005800 	.word	0x40005800
 8004500:	20000830 	.word	0x20000830
 8004504:	200006f9 	.word	0x200006f9
 8004508:	200006ec 	.word	0x200006ec
 800450c:	2000071c 	.word	0x2000071c
 8004510:	200006fc 	.word	0x200006fc
 8004514:	20000828 	.word	0x20000828
 8004518:	2000082c 	.word	0x2000082c
 800451c:	2000073c 	.word	0x2000073c

08004520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8004524:	2002      	movs	r0, #2
 8004526:	f7ff f8c3 	bl	80036b0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	f7ff f8d4 	bl	80036d8 <LL_FLASH_GetLatency>
 8004530:	0003      	movs	r3, r0
 8004532:	2b02      	cmp	r3, #2
 8004534:	d1fa      	bne.n	800452c <SystemClock_Config+0xc>
  {
  }

  /* HSI configuration and activation */
  LL_RCC_HSI_Enable();
 8004536:	f7fe ffcf 	bl	80034d8 <LL_RCC_HSI_Enable>
  while(LL_RCC_HSI_IsReady() != 1)
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	f7fe ffda 	bl	80034f4 <LL_RCC_HSI_IsReady>
 8004540:	0003      	movs	r3, r0
 8004542:	2b01      	cmp	r3, #1
 8004544:	d1fa      	bne.n	800453c <SystemClock_Config+0x1c>
  {
  }

  /* Main PLL configuration and activation */
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	059b      	lsls	r3, r3, #22
 800454a:	2208      	movs	r2, #8
 800454c:	2100      	movs	r1, #0
 800454e:	2002      	movs	r0, #2
 8004550:	f7ff f852 	bl	80035f8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8004554:	f7ff f82e 	bl	80035b4 <LL_RCC_PLL_Enable>
  LL_RCC_PLL_EnableDomain_SYS();
 8004558:	f7ff f86e 	bl	8003638 <LL_RCC_PLL_EnableDomain_SYS>
  while(LL_RCC_PLL_IsReady() != 1)
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	f7ff f837 	bl	80035d0 <LL_RCC_PLL_IsReady>
 8004562:	0003      	movs	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d1fa      	bne.n	800455e <SystemClock_Config+0x3e>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8004568:	2000      	movs	r0, #0
 800456a:	f7fe fff7 	bl	800355c <LL_RCC_SetAHBPrescaler>

  /* Sysclk activation on the main PLL */
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800456e:	2002      	movs	r0, #2
 8004570:	f7fe ffd4 	bl	800351c <LL_RCC_SetSysClkSource>
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	f7fe ffe5 	bl	8003544 <LL_RCC_GetSysClkSource>
 800457a:	0003      	movs	r3, r0
 800457c:	2b10      	cmp	r3, #16
 800457e:	d1fa      	bne.n	8004576 <SystemClock_Config+0x56>
  {
  }

  /* Set APB1 prescaler*/
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8004580:	2000      	movs	r0, #0
 8004582:	f7ff f801 	bl	8003588 <LL_RCC_SetAPB1Prescaler>
  /* Update CMSIS variable (which can be updated also through SystemCoreClockUpdate function) */
  LL_SetSystemCoreClock(64000000);
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <SystemClock_Config+0x84>)
 8004588:	0018      	movs	r0, r3
 800458a:	f003 fa69 	bl	8007a60 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800458e:	2003      	movs	r0, #3
 8004590:	f000 fe7c 	bl	800528c <HAL_InitTick>
 8004594:	1e03      	subs	r3, r0, #0
 8004596:	d001      	beq.n	800459c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8004598:	f000 f806 	bl	80045a8 <Error_Handler>
  }
}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	03d09000 	.word	0x03d09000

080045a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045ac:	b672      	cpsid	i
}
 80045ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045b0:	e7fe      	b.n	80045b0 <Error_Handler+0x8>
	...

080045b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <HAL_MspInit+0x44>)
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_MspInit+0x44>)
 80045c0:	2101      	movs	r1, #1
 80045c2:	430a      	orrs	r2, r1
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
 80045c6:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <HAL_MspInit+0x44>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2201      	movs	r2, #1
 80045cc:	4013      	ands	r3, r2
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_MspInit+0x44>)
 80045d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_MspInit+0x44>)
 80045d8:	2180      	movs	r1, #128	; 0x80
 80045da:	0549      	lsls	r1, r1, #21
 80045dc:	430a      	orrs	r2, r1
 80045de:	63da      	str	r2, [r3, #60]	; 0x3c
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_MspInit+0x44>)
 80045e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	055b      	lsls	r3, r3, #21
 80045e8:	4013      	ands	r3, r2
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	40021000 	.word	0x40021000

080045fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <NMI_Handler+0x4>

08004602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004606:	e7fe      	b.n	8004606 <HardFault_Handler+0x4>

08004608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004620:	f000 fe7e 	bl	8005320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K1_Pin);
 8004630:	2001      	movs	r0, #1
 8004632:	f001 fe3d 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K2_Pin);
 8004636:	2002      	movs	r0, #2
 8004638:	f001 fe3a 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  if ((SW_K1_GPIO_Port->IDR&(SW_K1_Pin))>0) {
 800463c:	23a0      	movs	r3, #160	; 0xa0
 800463e:	05db      	lsls	r3, r3, #23
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	2201      	movs	r2, #1
 8004644:	4013      	ands	r3, r2
 8004646:	d012      	beq.n	800466e <EXTI0_1_IRQHandler+0x42>
    switch_status |= (!!(SW_K1_GPIO_Port->IDR&(SW_K1_Pin)));
 8004648:	23a0      	movs	r3, #160	; 0xa0
 800464a:	05db      	lsls	r3, r3, #23
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2201      	movs	r2, #1
 8004650:	4013      	ands	r3, r2
 8004652:	1e5a      	subs	r2, r3, #1
 8004654:	4193      	sbcs	r3, r2
 8004656:	b2db      	uxtb	r3, r3
 8004658:	b25a      	sxtb	r2, r3
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	b2db      	uxtb	r3, r3
 8004660:	b25b      	sxtb	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	b25b      	sxtb	r3, r3
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e007      	b.n	800467e <EXTI0_1_IRQHandler+0x52>
  }
  else {
    switch_status &= (~(1));
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2201      	movs	r2, #1
 8004676:	4393      	bics	r3, r2
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 800467c:	701a      	strb	r2, [r3, #0]
  }

  if ((SW_K2_GPIO_Port->IDR&(SW_K2_Pin))>0) {
 800467e:	23a0      	movs	r3, #160	; 0xa0
 8004680:	05db      	lsls	r3, r3, #23
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2202      	movs	r2, #2
 8004686:	4013      	ands	r3, r2
 8004688:	d010      	beq.n	80046ac <EXTI0_1_IRQHandler+0x80>
    switch_status |= ((!!(SW_K2_GPIO_Port->IDR&(SW_K2_Pin))) << 1);
 800468a:	23a0      	movs	r3, #160	; 0xa0
 800468c:	05db      	lsls	r3, r3, #23
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	001a      	movs	r2, r3
 8004692:	2302      	movs	r3, #2
 8004694:	4013      	ands	r3, r2
 8004696:	b25a      	sxtb	r2, r3
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	b25b      	sxtb	r3, r3
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e007      	b.n	80046bc <EXTI0_1_IRQHandler+0x90>
  }
  else {
    switch_status &= (~(1 << 1));
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2202      	movs	r2, #2
 80046b4:	4393      	bics	r3, r2
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <EXTI0_1_IRQHandler+0xac>)
 80046ba:	701a      	strb	r2, [r3, #0]
  }

  if (is_irq_enable)
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <EXTI0_1_IRQHandler+0xb0>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <EXTI0_1_IRQHandler+0xa4>
    GPIOA->BRR = GPIO_PIN_13;
 80046c6:	23a0      	movs	r3, #160	; 0xa0
 80046c8:	05db      	lsls	r3, r3, #23
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	0192      	lsls	r2, r2, #6
 80046ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	200006ec 	.word	0x200006ec
 80046dc:	200006f8 	.word	0x200006f8

080046e0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K7_Pin);
 80046e4:	2008      	movs	r0, #8
 80046e6:	f001 fde3 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  if ((SW_K7_GPIO_Port->IDR&(SW_K7_Pin))>0) {
 80046ea:	4b16      	ldr	r3, [pc, #88]	; (8004744 <EXTI2_3_IRQHandler+0x64>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2208      	movs	r2, #8
 80046f0:	4013      	ands	r3, r2
 80046f2:	d012      	beq.n	800471a <EXTI2_3_IRQHandler+0x3a>
    switch_status |= ((!!(SW_K7_GPIO_Port->IDR&(SW_K7_Pin))) << 6);
 80046f4:	4b13      	ldr	r3, [pc, #76]	; (8004744 <EXTI2_3_IRQHandler+0x64>)
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2208      	movs	r2, #8
 80046fa:	4013      	ands	r3, r2
 80046fc:	d001      	beq.n	8004702 <EXTI2_3_IRQHandler+0x22>
 80046fe:	2340      	movs	r3, #64	; 0x40
 8004700:	e000      	b.n	8004704 <EXTI2_3_IRQHandler+0x24>
 8004702:	2300      	movs	r3, #0
 8004704:	b25a      	sxtb	r2, r3
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <EXTI2_3_IRQHandler+0x68>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	b25b      	sxtb	r3, r3
 800470e:	4313      	orrs	r3, r2
 8004710:	b25b      	sxtb	r3, r3
 8004712:	b2da      	uxtb	r2, r3
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <EXTI2_3_IRQHandler+0x68>)
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e007      	b.n	800472a <EXTI2_3_IRQHandler+0x4a>
  }
  else {
    switch_status &= (~(1 << 6));
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <EXTI2_3_IRQHandler+0x68>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	4393      	bics	r3, r2
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <EXTI2_3_IRQHandler+0x68>)
 8004728:	701a      	strb	r2, [r3, #0]
  }

  if (is_irq_enable)
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <EXTI2_3_IRQHandler+0x6c>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <EXTI2_3_IRQHandler+0x5e>
    GPIOA->BRR = GPIO_PIN_13;  
 8004734:	23a0      	movs	r3, #160	; 0xa0
 8004736:	05db      	lsls	r3, r3, #23
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	0192      	lsls	r2, r2, #6
 800473c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	50000400 	.word	0x50000400
 8004748:	200006ec 	.word	0x200006ec
 800474c:	200006f8 	.word	0x200006f8

08004750 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_K3_Pin);
 8004754:	2020      	movs	r0, #32
 8004756:	f001 fdab 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K4_Pin);
 800475a:	2040      	movs	r0, #64	; 0x40
 800475c:	f001 fda8 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K5_Pin);
 8004760:	2080      	movs	r0, #128	; 0x80
 8004762:	f001 fda5 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K8_Pin);
 8004766:	2380      	movs	r3, #128	; 0x80
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	0018      	movs	r0, r3
 800476c:	f001 fda0 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_K6_Pin);
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	0018      	movs	r0, r3
 8004776:	f001 fd9b 	bl	80062b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */
  if ((SW_K3_GPIO_Port->IDR&(SW_K3_Pin))>0) {
 800477a:	23a0      	movs	r3, #160	; 0xa0
 800477c:	05db      	lsls	r3, r3, #23
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2220      	movs	r2, #32
 8004782:	4013      	ands	r3, r2
 8004784:	d013      	beq.n	80047ae <EXTI4_15_IRQHandler+0x5e>
    switch_status |= ((!!(SW_K3_GPIO_Port->IDR&(SW_K3_Pin))) << 2);
 8004786:	23a0      	movs	r3, #160	; 0xa0
 8004788:	05db      	lsls	r3, r3, #23
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2220      	movs	r2, #32
 800478e:	4013      	ands	r3, r2
 8004790:	d001      	beq.n	8004796 <EXTI4_15_IRQHandler+0x46>
 8004792:	2304      	movs	r3, #4
 8004794:	e000      	b.n	8004798 <EXTI4_15_IRQHandler+0x48>
 8004796:	2300      	movs	r3, #0
 8004798:	b25a      	sxtb	r2, r3
 800479a:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e007      	b.n	80047be <EXTI4_15_IRQHandler+0x6e>
  }
  else {
    switch_status &= (~(1 << 2));
 80047ae:	4b50      	ldr	r3, [pc, #320]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2204      	movs	r2, #4
 80047b6:	4393      	bics	r3, r2
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4b4d      	ldr	r3, [pc, #308]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047bc:	701a      	strb	r2, [r3, #0]
  }

  if ((SW_K4_GPIO_Port->IDR&(SW_K4_Pin))>0) {
 80047be:	23a0      	movs	r3, #160	; 0xa0
 80047c0:	05db      	lsls	r3, r3, #23
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2240      	movs	r2, #64	; 0x40
 80047c6:	4013      	ands	r3, r2
 80047c8:	d013      	beq.n	80047f2 <EXTI4_15_IRQHandler+0xa2>
    switch_status |= ((!!(SW_K4_GPIO_Port->IDR&(SW_K4_Pin))) << 3);
 80047ca:	23a0      	movs	r3, #160	; 0xa0
 80047cc:	05db      	lsls	r3, r3, #23
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2240      	movs	r2, #64	; 0x40
 80047d2:	4013      	ands	r3, r2
 80047d4:	d001      	beq.n	80047da <EXTI4_15_IRQHandler+0x8a>
 80047d6:	2308      	movs	r3, #8
 80047d8:	e000      	b.n	80047dc <EXTI4_15_IRQHandler+0x8c>
 80047da:	2300      	movs	r3, #0
 80047dc:	b25a      	sxtb	r2, r3
 80047de:	4b44      	ldr	r3, [pc, #272]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	b25b      	sxtb	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	4b40      	ldr	r3, [pc, #256]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e007      	b.n	8004802 <EXTI4_15_IRQHandler+0xb2>
  }
  else {
    switch_status &= (~(1 << 3));
 80047f2:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2208      	movs	r2, #8
 80047fa:	4393      	bics	r3, r2
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004800:	701a      	strb	r2, [r3, #0]
  }  

  if ((SW_K5_GPIO_Port->IDR&(SW_K5_Pin))>0) {
 8004802:	23a0      	movs	r3, #160	; 0xa0
 8004804:	05db      	lsls	r3, r3, #23
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	4013      	ands	r3, r2
 800480c:	d013      	beq.n	8004836 <EXTI4_15_IRQHandler+0xe6>
    switch_status |= ((!!(SW_K5_GPIO_Port->IDR&(SW_K5_Pin))) << 4);
 800480e:	23a0      	movs	r3, #160	; 0xa0
 8004810:	05db      	lsls	r3, r3, #23
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2280      	movs	r2, #128	; 0x80
 8004816:	4013      	ands	r3, r2
 8004818:	d001      	beq.n	800481e <EXTI4_15_IRQHandler+0xce>
 800481a:	2310      	movs	r3, #16
 800481c:	e000      	b.n	8004820 <EXTI4_15_IRQHandler+0xd0>
 800481e:	2300      	movs	r3, #0
 8004820:	b25a      	sxtb	r2, r3
 8004822:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	b25b      	sxtb	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b25b      	sxtb	r3, r3
 800482e:	b2da      	uxtb	r2, r3
 8004830:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e007      	b.n	8004846 <EXTI4_15_IRQHandler+0xf6>
  }
  else {
    switch_status &= (~(1 << 4));
 8004836:	4b2e      	ldr	r3, [pc, #184]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2210      	movs	r2, #16
 800483e:	4393      	bics	r3, r2
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004844:	701a      	strb	r2, [r3, #0]
  }  

  if ((SW_K8_GPIO_Port->IDR&(SW_K8_Pin))>0) {
 8004846:	23a0      	movs	r3, #160	; 0xa0
 8004848:	05db      	lsls	r3, r3, #23
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	2380      	movs	r3, #128	; 0x80
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d014      	beq.n	800487e <EXTI4_15_IRQHandler+0x12e>
    switch_status |= ((!!(SW_K8_GPIO_Port->IDR&(SW_K8_Pin))) << 7);
 8004854:	23a0      	movs	r3, #160	; 0xa0
 8004856:	05db      	lsls	r3, r3, #23
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	2380      	movs	r3, #128	; 0x80
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4013      	ands	r3, r2
 8004860:	d001      	beq.n	8004866 <EXTI4_15_IRQHandler+0x116>
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	e000      	b.n	8004868 <EXTI4_15_IRQHandler+0x118>
 8004866:	2300      	movs	r3, #0
 8004868:	b25a      	sxtb	r2, r3
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	b25b      	sxtb	r3, r3
 8004872:	4313      	orrs	r3, r2
 8004874:	b25b      	sxtb	r3, r3
 8004876:	b2da      	uxtb	r2, r3
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e007      	b.n	800488e <EXTI4_15_IRQHandler+0x13e>
  }
  else {
    switch_status &= (~(1 << 7));
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	b2db      	uxtb	r3, r3
 8004884:	227f      	movs	r2, #127	; 0x7f
 8004886:	4013      	ands	r3, r2
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4b19      	ldr	r3, [pc, #100]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 800488c:	701a      	strb	r2, [r3, #0]
  }  

  if ((SW_K6_GPIO_Port->IDR&(SW_K6_Pin))>0) {
 800488e:	23a0      	movs	r3, #160	; 0xa0
 8004890:	05db      	lsls	r3, r3, #23
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	4013      	ands	r3, r2
 800489a:	d014      	beq.n	80048c6 <EXTI4_15_IRQHandler+0x176>
    switch_status |= ((!!(SW_K6_GPIO_Port->IDR&(SW_K6_Pin))) << 5);
 800489c:	23a0      	movs	r3, #160	; 0xa0
 800489e:	05db      	lsls	r3, r3, #23
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	2380      	movs	r3, #128	; 0x80
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	4013      	ands	r3, r2
 80048a8:	d001      	beq.n	80048ae <EXTI4_15_IRQHandler+0x15e>
 80048aa:	2320      	movs	r3, #32
 80048ac:	e000      	b.n	80048b0 <EXTI4_15_IRQHandler+0x160>
 80048ae:	2300      	movs	r3, #0
 80048b0:	b25a      	sxtb	r2, r3
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	4313      	orrs	r3, r2
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e007      	b.n	80048d6 <EXTI4_15_IRQHandler+0x186>
  }
  else {
    switch_status &= (~(1 << 5));
 80048c6:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2220      	movs	r2, #32
 80048ce:	4393      	bics	r3, r2
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <EXTI4_15_IRQHandler+0x1a0>)
 80048d4:	701a      	strb	r2, [r3, #0]
  }  

  if (is_irq_enable)
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <EXTI4_15_IRQHandler+0x1a4>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <EXTI4_15_IRQHandler+0x19a>
    GPIOA->BRR = GPIO_PIN_13;
 80048e0:	23a0      	movs	r3, #160	; 0xa0
 80048e2:	05db      	lsls	r3, r3, #23
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	0192      	lsls	r2, r2, #6
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200006ec 	.word	0x200006ec
 80048f4:	200006f8 	.word	0x200006f8

080048f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <DMA1_Channel1_IRQHandler+0x14>)
 80048fe:	0018      	movs	r0, r3
 8004900:	f001 f850 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	20000790 	.word	0x20000790

08004910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <_sbrk+0x5c>)
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <_sbrk+0x60>)
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004924:	4b13      	ldr	r3, [pc, #76]	; (8004974 <_sbrk+0x64>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <_sbrk+0x64>)
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <_sbrk+0x68>)
 8004930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <_sbrk+0x64>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	429a      	cmp	r2, r3
 800493e:	d207      	bcs.n	8004950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004940:	f003 f8a6 	bl	8007a90 <__errno>
 8004944:	0003      	movs	r3, r0
 8004946:	220c      	movs	r2, #12
 8004948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800494a:	2301      	movs	r3, #1
 800494c:	425b      	negs	r3, r3
 800494e:	e009      	b.n	8004964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004950:	4b08      	ldr	r3, [pc, #32]	; (8004974 <_sbrk+0x64>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <_sbrk+0x64>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	18d2      	adds	r2, r2, r3
 800495e:	4b05      	ldr	r3, [pc, #20]	; (8004974 <_sbrk+0x64>)
 8004960:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004962:	68fb      	ldr	r3, [r7, #12]
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	b006      	add	sp, #24
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20002000 	.word	0x20002000
 8004970:	00000400 	.word	0x00000400
 8004974:	20000740 	.word	0x20000740
 8004978:	20000a20 	.word	0x20000a20

0800497c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498e:	231c      	movs	r3, #28
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	0018      	movs	r0, r3
 8004994:	230c      	movs	r3, #12
 8004996:	001a      	movs	r2, r3
 8004998:	2100      	movs	r1, #0
 800499a:	f003 f8c0 	bl	8007b1e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800499e:	003b      	movs	r3, r7
 80049a0:	0018      	movs	r0, r3
 80049a2:	231c      	movs	r3, #28
 80049a4:	001a      	movs	r2, r3
 80049a6:	2100      	movs	r1, #0
 80049a8:	f003 f8b9 	bl	8007b1e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049ac:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049ae:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <MX_TIM3_Init+0xbc>)
 80049b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049b2:	4b23      	ldr	r3, [pc, #140]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b8:	4b21      	ldr	r3, [pc, #132]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 80049be:	4b20      	ldr	r3, [pc, #128]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049c0:	224f      	movs	r2, #79	; 0x4f
 80049c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c4:	4b1e      	ldr	r3, [pc, #120]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ca:	4b1d      	ldr	r3, [pc, #116]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049d2:	0018      	movs	r0, r3
 80049d4:	f001 fcaa 	bl	800632c <HAL_TIM_PWM_Init>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80049dc:	f7ff fde4 	bl	80045a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049e0:	211c      	movs	r1, #28
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049e8:	187b      	adds	r3, r7, r1
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80049ee:	187a      	adds	r2, r7, r1
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <MX_TIM3_Init+0xb8>)
 80049f2:	0011      	movs	r1, r2
 80049f4:	0018      	movs	r0, r3
 80049f6:	f002 fd7d 	bl	80074f4 <HAL_TIMEx_MasterConfigSynchronization>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80049fe:	f7ff fdd3 	bl	80045a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a02:	003b      	movs	r3, r7
 8004a04:	2260      	movs	r2, #96	; 0x60
 8004a06:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004a08:	003b      	movs	r3, r7
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a0e:	003b      	movs	r3, r7
 8004a10:	2200      	movs	r2, #0
 8004a12:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a14:	003b      	movs	r3, r7
 8004a16:	2200      	movs	r2, #0
 8004a18:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a1a:	0039      	movs	r1, r7
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <MX_TIM3_Init+0xb8>)
 8004a1e:	2204      	movs	r2, #4
 8004a20:	0018      	movs	r0, r3
 8004a22:	f002 f83f 	bl	8006aa4 <HAL_TIM_PWM_ConfigChannel>
 8004a26:	1e03      	subs	r3, r0, #0
 8004a28:	d001      	beq.n	8004a2e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8004a2a:	f7ff fdbd 	bl	80045a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a2e:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <MX_TIM3_Init+0xb8>)
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 f857 	bl	8004ae4 <HAL_TIM_MspPostInit>

}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b00a      	add	sp, #40	; 0x28
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	20000744 	.word	0x20000744
 8004a44:	40000400 	.word	0x40000400

08004a48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <HAL_TIM_PWM_MspInit+0x8c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d137      	bne.n	8004aca <HAL_TIM_PWM_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	; (8004ad8 <HAL_TIM_PWM_MspInit+0x90>)
 8004a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_TIM_PWM_MspInit+0x90>)
 8004a60:	2102      	movs	r1, #2
 8004a62:	430a      	orrs	r2, r1
 8004a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_TIM_PWM_MspInit+0x90>)
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a74:	4a1a      	ldr	r2, [pc, #104]	; (8004ae0 <HAL_TIM_PWM_MspInit+0x98>)
 8004a76:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8004a78:	4b18      	ldr	r3, [pc, #96]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a7a:	2221      	movs	r2, #33	; 0x21
 8004a7c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a80:	2210      	movs	r2, #16
 8004a82:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a90:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a92:	2280      	movs	r2, #128	; 0x80
 8004a94:	0052      	lsls	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	00d2      	lsls	r2, r2, #3
 8004a9e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004aa6:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004aa8:	2280      	movs	r2, #128	; 0x80
 8004aaa:	0152      	lsls	r2, r2, #5
 8004aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 fd85 	bl	80055c0 <HAL_DMA_Init>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_TIM_PWM_MspInit+0x76>
    {
      Error_Handler();
 8004aba:	f7ff fd75 	bl	80045a8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a06      	ldr	r2, [pc, #24]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ac4:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_TIM_PWM_MspInit+0x94>)
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b004      	add	sp, #16
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	20000790 	.word	0x20000790
 8004ae0:	40020008 	.word	0x40020008

08004ae4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	240c      	movs	r4, #12
 8004aee:	193b      	adds	r3, r7, r4
 8004af0:	0018      	movs	r0, r3
 8004af2:	2314      	movs	r3, #20
 8004af4:	001a      	movs	r2, r3
 8004af6:	2100      	movs	r1, #0
 8004af8:	f003 f811 	bl	8007b1e <memset>
  if(timHandle->Instance==TIM3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <HAL_TIM_MspPostInit+0x70>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d121      	bne.n	8004b4a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b06:	4b14      	ldr	r3, [pc, #80]	; (8004b58 <HAL_TIM_MspPostInit+0x74>)
 8004b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_TIM_MspPostInit+0x74>)
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	635a      	str	r2, [r3, #52]	; 0x34
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_TIM_MspPostInit+0x74>)
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	2202      	movs	r2, #2
 8004b18:	4013      	ands	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RGB_Pin;
 8004b1e:	0021      	movs	r1, r4
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2220      	movs	r2, #32
 8004b24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2202      	movs	r2, #2
 8004b2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	2200      	movs	r2, #0
 8004b36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RGB_GPIO_Port, &GPIO_InitStruct);
 8004b3e:	187b      	adds	r3, r7, r1
 8004b40:	4a06      	ldr	r2, [pc, #24]	; (8004b5c <HAL_TIM_MspPostInit+0x78>)
 8004b42:	0019      	movs	r1, r3
 8004b44:	0010      	movs	r0, r2
 8004b46:	f001 fa15 	bl	8005f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	b009      	add	sp, #36	; 0x24
 8004b50:	bd90      	pop	{r4, r7, pc}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	50000400 	.word	0x50000400

08004b60 <HAL_TIM_PWM_MspDeInit>:

void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <HAL_TIM_PWM_MspDeInit+0x30>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10a      	bne.n	8004b88 <HAL_TIM_PWM_MspDeInit+0x28>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_TIM_PWM_MspDeInit+0x34>)
 8004b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <HAL_TIM_PWM_MspDeInit+0x34>)
 8004b78:	2102      	movs	r1, #2
 8004b7a:	438a      	bics	r2, r1
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* TIM3 DMA DeInit */
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_CC2]);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fda6 	bl	80056d4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }
}
 8004b88:	46c0      	nop			; (mov r8, r8)
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b002      	add	sp, #8
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40000400 	.word	0x40000400
 8004b94:	40021000 	.word	0x40021000

08004b98 <createBuffer>:
	.head[1] = 0,
	.head[2] = 0,
	.tail = 0,
};

FIFOBuffer* createBuffer() {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
    FIFOBuffer* buffer = (FIFOBuffer*)malloc(sizeof(FIFOBuffer));
 8004b9e:	2008      	movs	r0, #8
 8004ba0:	f002 ffa0 	bl	8007ae4 <malloc>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	607b      	str	r3, [r7, #4]
    buffer->front = buffer->rear = NULL;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
    return buffer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
}
 8004bb8:	0018      	movs	r0, r3
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <enqueue>:

void enqueue(FIFOBuffer* buffer, uint32_t newData[PIXEL_MAX]) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
    Node* newNode = (Node*)malloc(sizeof(Node));
 8004bca:	2028      	movs	r0, #40	; 0x28
 8004bcc:	f002 ff8a 	bl	8007ae4 <malloc>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	60fb      	str	r3, [r7, #12]
    memcpy(newNode->data, newData, PIXEL_MAX * sizeof(uint32_t));
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6839      	ldr	r1, [r7, #0]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f002 ff96 	bl	8007b0c <memcpy>
    newNode->next = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    
    if (buffer->rear == NULL) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d107      	bne.n	8004bfe <enqueue+0x3e>
        buffer->front = buffer->rear = newNode;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	605a      	str	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	601a      	str	r2, [r3, #0]
        return;
 8004bfc:	e006      	b.n	8004c0c <enqueue+0x4c>
    }
    
    buffer->rear->next = newNode;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	625a      	str	r2, [r3, #36]	; 0x24
    buffer->rear = newNode;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	605a      	str	r2, [r3, #4]
}
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <dequeue>:

int8_t dequeue(FIFOBuffer* buffer, uint32_t result[PIXEL_MAX]) {
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
    if (buffer->front == NULL) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <dequeue+0x16>
        return 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e019      	b.n	8004c5c <dequeue+0x4a>
    }

    Node* temp = buffer->front;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
    memcpy(result, temp->data, PIXEL_MAX * sizeof(uint32_t));
 8004c2e:	68f9      	ldr	r1, [r7, #12]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2224      	movs	r2, #36	; 0x24
 8004c34:	0018      	movs	r0, r3
 8004c36:	f002 ff69 	bl	8007b0c <memcpy>
    buffer->front = buffer->front->next;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]

    if (buffer->front == NULL) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d102      	bne.n	8004c52 <dequeue+0x40>
        buffer->rear = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	605a      	str	r2, [r3, #4]
    }

    free(temp);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f002 ff4f 	bl	8007af8 <free>

    return 1;
 8004c5a:	2301      	movs	r3, #1
}
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	b004      	add	sp, #16
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <getQueueRear>:

uint32_t* getQueueRear(FIFOBuffer* buffer) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    if (buffer->rear != NULL) {
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <getQueueRear+0x16>
        return buffer->rear->data;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	e000      	b.n	8004c7c <getQueueRear+0x18>
    } else {
        return NULL; // 如果队列为空，返回 NULL
 8004c7a:	2300      	movs	r3, #0
    }
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b002      	add	sp, #8
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <createBuffer_rgb233>:

FIFOBuffer_RGB233* createBuffer_rgb233() {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
    FIFOBuffer_RGB233* buffer = (FIFOBuffer_RGB233*)malloc(sizeof(FIFOBuffer_RGB233));
 8004c8a:	2008      	movs	r0, #8
 8004c8c:	f002 ff2a 	bl	8007ae4 <malloc>
 8004c90:	0003      	movs	r3, r0
 8004c92:	607b      	str	r3, [r7, #4]
    buffer->front = buffer->rear = NULL;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	601a      	str	r2, [r3, #0]
    return buffer;
 8004ca2:	687b      	ldr	r3, [r7, #4]
}
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b002      	add	sp, #8
 8004caa:	bd80      	pop	{r7, pc}

08004cac <enqueue_rgb233>:

void enqueue_rgb233(FIFOBuffer_RGB233* buffer, uint8_t newData[PIXEL_MAX]) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
    Node_RGB233* newNode = (Node_RGB233*)malloc(sizeof(Node_RGB233));
 8004cb6:	2010      	movs	r0, #16
 8004cb8:	f002 ff14 	bl	8007ae4 <malloc>
 8004cbc:	0003      	movs	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
    memcpy(newNode->data, newData, PIXEL_MAX * sizeof(uint8_t));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6839      	ldr	r1, [r7, #0]
 8004cc4:	2209      	movs	r2, #9
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f002 ff20 	bl	8007b0c <memcpy>
    newNode->next = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	60da      	str	r2, [r3, #12]
    
    if (buffer->rear == NULL) {
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d107      	bne.n	8004cea <enqueue_rgb233+0x3e>
        buffer->front = buffer->rear = newNode;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
        return;
 8004ce8:	e006      	b.n	8004cf8 <enqueue_rgb233+0x4c>
    }
    
    buffer->rear->next = newNode;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	60da      	str	r2, [r3, #12]
    buffer->rear = newNode;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	605a      	str	r2, [r3, #4]
}
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b004      	add	sp, #16
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <dequeue_rgb233>:

int8_t dequeue_rgb233(FIFOBuffer_RGB233* buffer, uint8_t result[PIXEL_MAX]) {
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
    if (buffer->front == NULL) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <dequeue_rgb233+0x16>
        return 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e019      	b.n	8004d48 <dequeue_rgb233+0x4a>
    }

    Node_RGB233* temp = buffer->front;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
    memcpy(result, temp->data, PIXEL_MAX * sizeof(uint8_t));
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2209      	movs	r2, #9
 8004d20:	0018      	movs	r0, r3
 8004d22:	f002 fef3 	bl	8007b0c <memcpy>
    buffer->front = buffer->front->next;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]

    if (buffer->front == NULL) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <dequeue_rgb233+0x40>
        buffer->rear = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
    }

    free(temp);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	0018      	movs	r0, r3
 8004d42:	f002 fed9 	bl	8007af8 <free>

    return 1;
 8004d46:	2301      	movs	r3, #1
}
 8004d48:	0018      	movs	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	b004      	add	sp, #16
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <getQueueRear_rgb233>:

uint8_t* getQueueRear_rgb233(FIFOBuffer_RGB233* buffer) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
    if (buffer->rear != NULL) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <getQueueRear_rgb233+0x16>
        return buffer->rear->data;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	e000      	b.n	8004d68 <getQueueRear_rgb233+0x18>
    } else {
        return NULL; // 如果队列为空，返回 NULL
 8004d66:	2300      	movs	r3, #0
    }
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b002      	add	sp, #8
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <sk6812_init>:

void sk6812_init(uint8_t num) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	0002      	movs	r2, r0
 8004d78:	1dfb      	adds	r3, r7, #7
 8004d7a:	701a      	strb	r2, [r3, #0]
  color_buf = (uint32_t *)calloc(num, sizeof(uint32_t));
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2104      	movs	r1, #4
 8004d82:	0018      	movs	r0, r3
 8004d84:	f002 fe7a 	bl	8007a7c <calloc>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	001a      	movs	r2, r3
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <sk6812_init+0x84>)
 8004d8e:	601a      	str	r2, [r3, #0]
  lastest_rgb_color = (uint32_t *)calloc(num, sizeof(uint32_t));
 8004d90:	1dfb      	adds	r3, r7, #7
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2104      	movs	r1, #4
 8004d96:	0018      	movs	r0, r3
 8004d98:	f002 fe70 	bl	8007a7c <calloc>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	001a      	movs	r2, r3
 8004da0:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <sk6812_init+0x88>)
 8004da2:	601a      	str	r2, [r3, #0]
  lastest_rgb_233_color = (uint8_t *)calloc(num, sizeof(uint8_t));
 8004da4:	1dfb      	adds	r3, r7, #7
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	0018      	movs	r0, r3
 8004dac:	f002 fe66 	bl	8007a7c <calloc>
 8004db0:	0003      	movs	r3, r0
 8004db2:	001a      	movs	r2, r3
 8004db4:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <sk6812_init+0x8c>)
 8004db6:	601a      	str	r2, [r3, #0]
  rgb_buffer = createBuffer();
 8004db8:	f7ff feee 	bl	8004b98 <createBuffer>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <sk6812_init+0x90>)
 8004dc0:	601a      	str	r2, [r3, #0]
  rgb_233_buffer = createBuffer_rgb233();
 8004dc2:	f7ff ff5f 	bl	8004c84 <createBuffer_rgb233>
 8004dc6:	0002      	movs	r2, r0
 8004dc8:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <sk6812_init+0x94>)
 8004dca:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < PIXEL_MAX; i++) {
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e007      	b.n	8004de2 <sk6812_init+0x72>
    brightness_index[i] = 255;
 8004dd2:	4a0d      	ldr	r2, [pc, #52]	; (8004e08 <sk6812_init+0x98>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	18d3      	adds	r3, r2, r3
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < PIXEL_MAX; i++) {
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	ddf4      	ble.n	8004dd2 <sk6812_init+0x62>
  }
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	200007ec 	.word	0x200007ec
 8004df8:	20000820 	.word	0x20000820
 8004dfc:	20000824 	.word	0x20000824
 8004e00:	20000828 	.word	0x20000828
 8004e04:	2000082c 	.word	0x2000082c
 8004e08:	20000814 	.word	0x20000814

08004e0c <neopixel_set_color>:

void neopixel_set_color(uint8_t num, uint32_t color) {
 8004e0c:	b5b0      	push	{r4, r5, r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	0002      	movs	r2, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	701a      	strb	r2, [r3, #0]
  uint16_t r, g, b;
  if (num >= PIXEL_MAX)
 8004e1a:	1dfb      	adds	r3, r7, #7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d900      	bls.n	8004e24 <neopixel_set_color+0x18>
 8004e22:	e0aa      	b.n	8004f7a <neopixel_set_color+0x16e>
    return;
  
  if (brightness_index[num] < 10 && brightness_index[num])
 8004e24:	1dfb      	adds	r3, r7, #7
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	4a56      	ldr	r2, [pc, #344]	; (8004f84 <neopixel_set_color+0x178>)
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	d80a      	bhi.n	8004e46 <neopixel_set_color+0x3a>
 8004e30:	1dfb      	adds	r3, r7, #7
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	4a53      	ldr	r2, [pc, #332]	; (8004f84 <neopixel_set_color+0x178>)
 8004e36:	5cd3      	ldrb	r3, [r2, r3]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <neopixel_set_color+0x3a>
    brightness_index[num] = 10;
 8004e3c:	1dfb      	adds	r3, r7, #7
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	4a50      	ldr	r2, [pc, #320]	; (8004f84 <neopixel_set_color+0x178>)
 8004e42:	210a      	movs	r1, #10
 8004e44:	54d1      	strb	r1, [r2, r3]

  r = ((color >> 16) & 0xff) * ((float)brightness_index[num] / 255.0f);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	22ff      	movs	r2, #255	; 0xff
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7fd fa0a 	bl	8002268 <__aeabi_ui2f>
 8004e54:	1c04      	adds	r4, r0, #0
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	4a4a      	ldr	r2, [pc, #296]	; (8004f84 <neopixel_set_color+0x178>)
 8004e5c:	5cd3      	ldrb	r3, [r2, r3]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fd fa02 	bl	8002268 <__aeabi_ui2f>
 8004e64:	1c03      	adds	r3, r0, #0
 8004e66:	4948      	ldr	r1, [pc, #288]	; (8004f88 <neopixel_set_color+0x17c>)
 8004e68:	1c18      	adds	r0, r3, #0
 8004e6a:	f7fc fdf1 	bl	8001a50 <__aeabi_fdiv>
 8004e6e:	1c03      	adds	r3, r0, #0
 8004e70:	1c19      	adds	r1, r3, #0
 8004e72:	1c20      	adds	r0, r4, #0
 8004e74:	f7fc ff04 	bl	8001c80 <__aeabi_fmul>
 8004e78:	1c03      	adds	r3, r0, #0
 8004e7a:	250e      	movs	r5, #14
 8004e7c:	197c      	adds	r4, r7, r5
 8004e7e:	1c18      	adds	r0, r3, #0
 8004e80:	f7fc fdce 	bl	8001a20 <__aeabi_f2uiz>
 8004e84:	0003      	movs	r3, r0
 8004e86:	8023      	strh	r3, [r4, #0]
  g = ((color >> 8) & 0xff) * ((float)brightness_index[num] / 255.0f);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	22ff      	movs	r2, #255	; 0xff
 8004e8e:	4013      	ands	r3, r2
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7fd f9e9 	bl	8002268 <__aeabi_ui2f>
 8004e96:	1c04      	adds	r4, r0, #0
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4a39      	ldr	r2, [pc, #228]	; (8004f84 <neopixel_set_color+0x178>)
 8004e9e:	5cd3      	ldrb	r3, [r2, r3]
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7fd f9e1 	bl	8002268 <__aeabi_ui2f>
 8004ea6:	1c03      	adds	r3, r0, #0
 8004ea8:	4937      	ldr	r1, [pc, #220]	; (8004f88 <neopixel_set_color+0x17c>)
 8004eaa:	1c18      	adds	r0, r3, #0
 8004eac:	f7fc fdd0 	bl	8001a50 <__aeabi_fdiv>
 8004eb0:	1c03      	adds	r3, r0, #0
 8004eb2:	1c19      	adds	r1, r3, #0
 8004eb4:	1c20      	adds	r0, r4, #0
 8004eb6:	f7fc fee3 	bl	8001c80 <__aeabi_fmul>
 8004eba:	1c03      	adds	r3, r0, #0
 8004ebc:	220c      	movs	r2, #12
 8004ebe:	18bc      	adds	r4, r7, r2
 8004ec0:	1c18      	adds	r0, r3, #0
 8004ec2:	f7fc fdad 	bl	8001a20 <__aeabi_f2uiz>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	8023      	strh	r3, [r4, #0]
  b = (color & 0xff) * ((float)brightness_index[num] / 255.0f);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f7fd f9c9 	bl	8002268 <__aeabi_ui2f>
 8004ed6:	1c04      	adds	r4, r0, #0
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <neopixel_set_color+0x178>)
 8004ede:	5cd3      	ldrb	r3, [r2, r3]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fd f9c1 	bl	8002268 <__aeabi_ui2f>
 8004ee6:	1c03      	adds	r3, r0, #0
 8004ee8:	4927      	ldr	r1, [pc, #156]	; (8004f88 <neopixel_set_color+0x17c>)
 8004eea:	1c18      	adds	r0, r3, #0
 8004eec:	f7fc fdb0 	bl	8001a50 <__aeabi_fdiv>
 8004ef0:	1c03      	adds	r3, r0, #0
 8004ef2:	1c19      	adds	r1, r3, #0
 8004ef4:	1c20      	adds	r0, r4, #0
 8004ef6:	f7fc fec3 	bl	8001c80 <__aeabi_fmul>
 8004efa:	1c03      	adds	r3, r0, #0
 8004efc:	220a      	movs	r2, #10
 8004efe:	18bc      	adds	r4, r7, r2
 8004f00:	1c18      	adds	r0, r3, #0
 8004f02:	f7fc fd8d 	bl	8001a20 <__aeabi_f2uiz>
 8004f06:	0003      	movs	r3, r0
 8004f08:	8023      	strh	r3, [r4, #0]

  if (r > 255) r = 255;
 8004f0a:	197b      	adds	r3, r7, r5
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	2bff      	cmp	r3, #255	; 0xff
 8004f10:	d902      	bls.n	8004f18 <neopixel_set_color+0x10c>
 8004f12:	197b      	adds	r3, r7, r5
 8004f14:	22ff      	movs	r2, #255	; 0xff
 8004f16:	801a      	strh	r2, [r3, #0]
  if (g > 255) g = 255;
 8004f18:	220c      	movs	r2, #12
 8004f1a:	18bb      	adds	r3, r7, r2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	2bff      	cmp	r3, #255	; 0xff
 8004f20:	d902      	bls.n	8004f28 <neopixel_set_color+0x11c>
 8004f22:	18bb      	adds	r3, r7, r2
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	801a      	strh	r2, [r3, #0]
  if (b > 255) b = 255;
 8004f28:	220a      	movs	r2, #10
 8004f2a:	18bb      	adds	r3, r7, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	2bff      	cmp	r3, #255	; 0xff
 8004f30:	d902      	bls.n	8004f38 <neopixel_set_color+0x12c>
 8004f32:	18bb      	adds	r3, r7, r2
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	801a      	strh	r2, [r3, #0]
	rled[num] = r;
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	220e      	movs	r2, #14
 8004f3e:	18ba      	adds	r2, r7, r2
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	b2d1      	uxtb	r1, r2
 8004f44:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <neopixel_set_color+0x180>)
 8004f46:	54d1      	strb	r1, [r2, r3]
	gled[num] = g;
 8004f48:	1dfb      	adds	r3, r7, #7
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	220c      	movs	r2, #12
 8004f4e:	18ba      	adds	r2, r7, r2
 8004f50:	8812      	ldrh	r2, [r2, #0]
 8004f52:	b2d1      	uxtb	r1, r2
 8004f54:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <neopixel_set_color+0x184>)
 8004f56:	54d1      	strb	r1, [r2, r3]
	bled[num] = b;
 8004f58:	1dfb      	adds	r3, r7, #7
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	220a      	movs	r2, #10
 8004f5e:	18ba      	adds	r2, r7, r2
 8004f60:	8812      	ldrh	r2, [r2, #0]
 8004f62:	b2d1      	uxtb	r1, r2
 8004f64:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <neopixel_set_color+0x188>)
 8004f66:	54d1      	strb	r1, [r2, r3]
	color_buf[num] = color;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <neopixel_set_color+0x18c>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	1dfb      	adds	r3, r7, #7
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e000      	b.n	8004f7c <neopixel_set_color+0x170>
    return;
 8004f7a:	46c0      	nop			; (mov r8, r8)
}
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bdb0      	pop	{r4, r5, r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	20000814 	.word	0x20000814
 8004f88:	437f0000 	.word	0x437f0000
 8004f8c:	200007f0 	.word	0x200007f0
 8004f90:	200007fc 	.word	0x200007fc
 8004f94:	20000808 	.word	0x20000808
 8004f98:	200007ec 	.word	0x200007ec

08004f9c <rgb233_to_rgb888>:

uint32_t rgb233_to_rgb888(uint8_t num, uint8_t color)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	0002      	movs	r2, r0
 8004fa4:	1dfb      	adds	r3, r7, #7
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	1dbb      	adds	r3, r7, #6
 8004faa:	1c0a      	adds	r2, r1, #0
 8004fac:	701a      	strb	r2, [r3, #0]
  uint32_t rgb_888 = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  uint8_t r_led, g_led, b_led;

  if (num >= PIXEL_MAX)
 8004fb2:	1dfb      	adds	r3, r7, #7
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d901      	bls.n	8004fbe <rgb233_to_rgb888+0x22>
    return 0xFFFFFF;  
 8004fba:	4b37      	ldr	r3, [pc, #220]	; (8005098 <rgb233_to_rgb888+0xfc>)
 8004fbc:	e067      	b.n	800508e <rgb233_to_rgb888+0xf2>

  r_led = ((color & 0xC0) >> 6);
 8004fbe:	200b      	movs	r0, #11
 8004fc0:	183b      	adds	r3, r7, r0
 8004fc2:	1dba      	adds	r2, r7, #6
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	0992      	lsrs	r2, r2, #6
 8004fc8:	701a      	strb	r2, [r3, #0]
  g_led = ((color & 0x38) >> 3);
 8004fca:	1dbb      	adds	r3, r7, #6
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	10db      	asrs	r3, r3, #3
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	240a      	movs	r4, #10
 8004fd4:	193b      	adds	r3, r7, r4
 8004fd6:	2107      	movs	r1, #7
 8004fd8:	400a      	ands	r2, r1
 8004fda:	701a      	strb	r2, [r3, #0]
  b_led = (color & 0x07);
 8004fdc:	2509      	movs	r5, #9
 8004fde:	197b      	adds	r3, r7, r5
 8004fe0:	1dba      	adds	r2, r7, #6
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	2107      	movs	r1, #7
 8004fe6:	400a      	ands	r2, r1
 8004fe8:	701a      	strb	r2, [r3, #0]

  b_led = ((b_led << 5) | ((b_led & 0x03) << 3) | b_led);
 8004fea:	197b      	adds	r3, r7, r5
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	015b      	lsls	r3, r3, #5
 8004ff0:	b25a      	sxtb	r2, r3
 8004ff2:	197b      	adds	r3, r7, r5
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	b25b      	sxtb	r3, r3
 8004ffa:	2118      	movs	r1, #24
 8004ffc:	400b      	ands	r3, r1
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	4313      	orrs	r3, r2
 8005002:	b25a      	sxtb	r2, r3
 8005004:	197b      	adds	r3, r7, r5
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	b25b      	sxtb	r3, r3
 800500a:	4313      	orrs	r3, r2
 800500c:	b25a      	sxtb	r2, r3
 800500e:	197b      	adds	r3, r7, r5
 8005010:	701a      	strb	r2, [r3, #0]
  g_led = ((g_led << 5) | ((g_led & 0x03) << 3) | g_led);
 8005012:	193b      	adds	r3, r7, r4
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	015b      	lsls	r3, r3, #5
 8005018:	b25a      	sxtb	r2, r3
 800501a:	193b      	adds	r3, r7, r4
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	b25b      	sxtb	r3, r3
 8005022:	2118      	movs	r1, #24
 8005024:	400b      	ands	r3, r1
 8005026:	b25b      	sxtb	r3, r3
 8005028:	4313      	orrs	r3, r2
 800502a:	b25a      	sxtb	r2, r3
 800502c:	193b      	adds	r3, r7, r4
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b25b      	sxtb	r3, r3
 8005032:	4313      	orrs	r3, r2
 8005034:	b25a      	sxtb	r2, r3
 8005036:	193b      	adds	r3, r7, r4
 8005038:	701a      	strb	r2, [r3, #0]
  r_led |= (r_led << 2);
 800503a:	0001      	movs	r1, r0
 800503c:	187b      	adds	r3, r7, r1
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	b25a      	sxtb	r2, r3
 8005044:	187b      	adds	r3, r7, r1
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	b25b      	sxtb	r3, r3
 800504a:	4313      	orrs	r3, r2
 800504c:	b25a      	sxtb	r2, r3
 800504e:	187b      	adds	r3, r7, r1
 8005050:	701a      	strb	r2, [r3, #0]
  r_led |= (r_led << 4);
 8005052:	187b      	adds	r3, r7, r1
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	b25a      	sxtb	r2, r3
 800505a:	187b      	adds	r3, r7, r1
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	b25b      	sxtb	r3, r3
 8005060:	4313      	orrs	r3, r2
 8005062:	b25a      	sxtb	r2, r3
 8005064:	187b      	adds	r3, r7, r1
 8005066:	701a      	strb	r2, [r3, #0]

  rgb_888 = ((r_led << 16) | (g_led << 8) | b_led);
 8005068:	187b      	adds	r3, r7, r1
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	041a      	lsls	r2, r3, #16
 800506e:	193b      	adds	r3, r7, r4
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	431a      	orrs	r2, r3
 8005076:	197b      	adds	r3, r7, r5
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  neopixel_set_color(num, rgb_888);
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	0011      	movs	r1, r2
 8005086:	0018      	movs	r0, r3
 8005088:	f7ff fec0 	bl	8004e0c <neopixel_set_color>
  return rgb_888;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bdb0      	pop	{r4, r5, r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	00ffffff 	.word	0x00ffffff

0800509c <ws2812_show>:

  return rgb_233;
}

void ws2812_show(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80050a2:	4b46      	ldr	r3, [pc, #280]	; (80051bc <ws2812_show+0x120>)
 80050a4:	2104      	movs	r1, #4
 80050a6:	0018      	movs	r0, r3
 80050a8:	f001 f998 	bl	80063dc <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <ws2812_show+0x120>)
 80050ae:	2104      	movs	r1, #4
 80050b0:	0018      	movs	r0, r3
 80050b2:	f001 fc0d 	bl	80068d0 <HAL_TIM_PWM_Stop_DMA>
	uint8_t i, j;

	for(i = 0; i < PIXEL_MAX; i++) {
 80050b6:	1dfb      	adds	r3, r7, #7
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e070      	b.n	80051a0 <ws2812_show+0x104>
		for(j = 0; j < 8; j++) {														// G->R->B
 80050be:	1dbb      	adds	r3, r7, #6
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e063      	b.n	800518e <ws2812_show+0xf2>
			 frame.data[24 * i + j] = (gled[i] & (0x80 >> j)) ? BIT_1 : BIT_0; 			// 将高低位扩展到16bit
 80050c6:	1dfb      	adds	r3, r7, #7
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	4a3d      	ldr	r2, [pc, #244]	; (80051c0 <ws2812_show+0x124>)
 80050cc:	5cd3      	ldrb	r3, [r2, r3]
 80050ce:	0019      	movs	r1, r3
 80050d0:	1dbb      	adds	r3, r7, #6
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	411a      	asrs	r2, r3
 80050d8:	0013      	movs	r3, r2
 80050da:	400b      	ands	r3, r1
 80050dc:	d001      	beq.n	80050e2 <ws2812_show+0x46>
 80050de:	213b      	movs	r1, #59	; 0x3b
 80050e0:	e000      	b.n	80050e4 <ws2812_show+0x48>
 80050e2:	2114      	movs	r1, #20
 80050e4:	1dfb      	adds	r3, r7, #7
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	0013      	movs	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	001a      	movs	r2, r3
 80050f2:	1dbb      	adds	r3, r7, #6
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	18d3      	adds	r3, r2, r3
 80050f8:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <ws2812_show+0x128>)
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	18d3      	adds	r3, r2, r3
 80050fe:	3306      	adds	r3, #6
 8005100:	1c0a      	adds	r2, r1, #0
 8005102:	801a      	strh	r2, [r3, #0]
			 frame.data[24 * i + j + 8]   = (rled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;	
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	4a2f      	ldr	r2, [pc, #188]	; (80051c8 <ws2812_show+0x12c>)
 800510a:	5cd3      	ldrb	r3, [r2, r3]
 800510c:	0019      	movs	r1, r3
 800510e:	1dbb      	adds	r3, r7, #6
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	411a      	asrs	r2, r3
 8005116:	0013      	movs	r3, r2
 8005118:	400b      	ands	r3, r1
 800511a:	d001      	beq.n	8005120 <ws2812_show+0x84>
 800511c:	213b      	movs	r1, #59	; 0x3b
 800511e:	e000      	b.n	8005122 <ws2812_show+0x86>
 8005120:	2114      	movs	r1, #20
 8005122:	1dfb      	adds	r3, r7, #7
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	0013      	movs	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	189b      	adds	r3, r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	001a      	movs	r2, r3
 8005130:	1dbb      	adds	r3, r7, #6
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	18d3      	adds	r3, r2, r3
 8005136:	3308      	adds	r3, #8
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <ws2812_show+0x128>)
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	18d3      	adds	r3, r2, r3
 800513e:	3306      	adds	r3, #6
 8005140:	1c0a      	adds	r2, r1, #0
 8005142:	801a      	strh	r2, [r3, #0]
			 frame.data[24 * i + j + 16]  = (bled[i] & (0x80 >> j)) ? BIT_1 : BIT_0;
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	4a20      	ldr	r2, [pc, #128]	; (80051cc <ws2812_show+0x130>)
 800514a:	5cd3      	ldrb	r3, [r2, r3]
 800514c:	0019      	movs	r1, r3
 800514e:	1dbb      	adds	r3, r7, #6
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2280      	movs	r2, #128	; 0x80
 8005154:	411a      	asrs	r2, r3
 8005156:	0013      	movs	r3, r2
 8005158:	400b      	ands	r3, r1
 800515a:	d001      	beq.n	8005160 <ws2812_show+0xc4>
 800515c:	213b      	movs	r1, #59	; 0x3b
 800515e:	e000      	b.n	8005162 <ws2812_show+0xc6>
 8005160:	2114      	movs	r1, #20
 8005162:	1dfb      	adds	r3, r7, #7
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	0013      	movs	r3, r2
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	189b      	adds	r3, r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	001a      	movs	r2, r3
 8005170:	1dbb      	adds	r3, r7, #6
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	18d3      	adds	r3, r2, r3
 8005176:	3310      	adds	r3, #16
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <ws2812_show+0x128>)
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	3306      	adds	r3, #6
 8005180:	1c0a      	adds	r2, r1, #0
 8005182:	801a      	strh	r2, [r3, #0]
		for(j = 0; j < 8; j++) {														// G->R->B
 8005184:	1dbb      	adds	r3, r7, #6
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	1dbb      	adds	r3, r7, #6
 800518a:	3201      	adds	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	1dbb      	adds	r3, r7, #6
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b07      	cmp	r3, #7
 8005194:	d997      	bls.n	80050c6 <ws2812_show+0x2a>
	for(i = 0; i < PIXEL_MAX; i++) {
 8005196:	1dfb      	adds	r3, r7, #7
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	1dfb      	adds	r3, r7, #7
 800519c:	3201      	adds	r2, #1
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	1dfb      	adds	r3, r7, #7
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d98a      	bls.n	80050be <ws2812_show+0x22>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, (uint32_t *)&frame, 3 + 24 * PIXEL_MAX + 1);
 80051a8:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <ws2812_show+0x128>)
 80051aa:	4804      	ldr	r0, [pc, #16]	; (80051bc <ws2812_show+0x120>)
 80051ac:	23dc      	movs	r3, #220	; 0xdc
 80051ae:	2104      	movs	r1, #4
 80051b0:	f001 f99a 	bl	80064e8 <HAL_TIM_PWM_Start_DMA>
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b002      	add	sp, #8
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000744 	.word	0x20000744
 80051c0:	200007fc 	.word	0x200007fc
 80051c4:	20000834 	.word	0x20000834
 80051c8:	200007f0 	.word	0x200007f0
 80051cc:	20000808 	.word	0x20000808

080051d0 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE BEGIN 2 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80051da:	2104      	movs	r1, #4
 80051dc:	0018      	movs	r0, r3
 80051de:	f001 f8fd 	bl	80063dc <HAL_TIM_PWM_Stop>
  rgb_show_lock = 0;
 80051e2:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000744 	.word	0x20000744
 80051f4:	20000830 	.word	0x20000830

080051f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051f8:	480d      	ldr	r0, [pc, #52]	; (8005230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051fc:	f7ff fbbe 	bl	800497c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005200:	480c      	ldr	r0, [pc, #48]	; (8005234 <LoopForever+0x6>)
  ldr r1, =_edata
 8005202:	490d      	ldr	r1, [pc, #52]	; (8005238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005204:	4a0d      	ldr	r2, [pc, #52]	; (800523c <LoopForever+0xe>)
  movs r3, #0
 8005206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005208:	e002      	b.n	8005210 <LoopCopyDataInit>

0800520a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800520a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800520c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800520e:	3304      	adds	r3, #4

08005210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005214:	d3f9      	bcc.n	800520a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005216:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005218:	4c0a      	ldr	r4, [pc, #40]	; (8005244 <LoopForever+0x16>)
  movs r3, #0
 800521a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800521c:	e001      	b.n	8005222 <LoopFillZerobss>

0800521e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800521e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005220:	3204      	adds	r2, #4

08005222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005224:	d3fb      	bcc.n	800521e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005226:	f002 fc39 	bl	8007a9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800522a:	f7ff f865 	bl	80042f8 <main>

0800522e <LoopForever>:

LoopForever:
  b LoopForever
 800522e:	e7fe      	b.n	800522e <LoopForever>
  ldr   r0, =_estack
 8005230:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005238:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800523c:	08007edc 	.word	0x08007edc
  ldr r2, =_sbss
 8005240:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8005244:	20000a1c 	.word	0x20000a1c

08005248 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005248:	e7fe      	b.n	8005248 <ADC1_IRQHandler>
	...

0800524c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005252:	1dfb      	adds	r3, r7, #7
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005258:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_Init+0x3c>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4b0a      	ldr	r3, [pc, #40]	; (8005288 <HAL_Init+0x3c>)
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	0049      	lsls	r1, r1, #1
 8005262:	430a      	orrs	r2, r1
 8005264:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005266:	2003      	movs	r0, #3
 8005268:	f000 f810 	bl	800528c <HAL_InitTick>
 800526c:	1e03      	subs	r3, r0, #0
 800526e:	d003      	beq.n	8005278 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005270:	1dfb      	adds	r3, r7, #7
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e001      	b.n	800527c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005278:	f7ff f99c 	bl	80045b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800527c:	1dfb      	adds	r3, r7, #7
 800527e:	781b      	ldrb	r3, [r3, #0]
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b002      	add	sp, #8
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40022000 	.word	0x40022000

0800528c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800528c:	b590      	push	{r4, r7, lr}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005294:	230f      	movs	r3, #15
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800529c:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_InitTick+0x88>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d02b      	beq.n	80052fc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <HAL_InitTick+0x8c>)
 80052a6:	681c      	ldr	r4, [r3, #0]
 80052a8:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <HAL_InitTick+0x88>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	0019      	movs	r1, r3
 80052ae:	23fa      	movs	r3, #250	; 0xfa
 80052b0:	0098      	lsls	r0, r3, #2
 80052b2:	f7fc fb29 	bl	8001908 <__udivsi3>
 80052b6:	0003      	movs	r3, r0
 80052b8:	0019      	movs	r1, r3
 80052ba:	0020      	movs	r0, r4
 80052bc:	f7fc fb24 	bl	8001908 <__udivsi3>
 80052c0:	0003      	movs	r3, r0
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 f96f 	bl	80055a6 <HAL_SYSTICK_Config>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d112      	bne.n	80052f2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d80a      	bhi.n	80052e8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	2301      	movs	r3, #1
 80052d6:	425b      	negs	r3, r3
 80052d8:	2200      	movs	r2, #0
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f92e 	bl	800553c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <HAL_InitTick+0x90>)
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e00d      	b.n	8005304 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80052e8:	230f      	movs	r3, #15
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e008      	b.n	8005304 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052f2:	230f      	movs	r3, #15
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	2201      	movs	r2, #1
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e003      	b.n	8005304 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052fc:	230f      	movs	r3, #15
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005304:	230f      	movs	r3, #15
 8005306:	18fb      	adds	r3, r7, r3
 8005308:	781b      	ldrb	r3, [r3, #0]
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b005      	add	sp, #20
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	2000000c 	.word	0x2000000c
 8005318:	20000004 	.word	0x20000004
 800531c:	20000008 	.word	0x20000008

08005320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_IncTick+0x1c>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	001a      	movs	r2, r3
 800532a:	4b05      	ldr	r3, [pc, #20]	; (8005340 <HAL_IncTick+0x20>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	18d2      	adds	r2, r2, r3
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_IncTick+0x20>)
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	2000000c 	.word	0x2000000c
 8005340:	200009ec 	.word	0x200009ec

08005344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  return uwTick;
 8005348:	4b02      	ldr	r3, [pc, #8]	; (8005354 <HAL_GetTick+0x10>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	0018      	movs	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	200009ec 	.word	0x200009ec

08005358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005360:	f7ff fff0 	bl	8005344 <HAL_GetTick>
 8005364:	0003      	movs	r3, r0
 8005366:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	d005      	beq.n	800537e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005372:	4b0a      	ldr	r3, [pc, #40]	; (800539c <HAL_Delay+0x44>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	001a      	movs	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	189b      	adds	r3, r3, r2
 800537c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	f7ff ffe0 	bl	8005344 <HAL_GetTick>
 8005384:	0002      	movs	r2, r0
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d8f7      	bhi.n	8005380 <HAL_Delay+0x28>
  {
  }
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	2000000c 	.word	0x2000000c

080053a0 <__NVIC_EnableIRQ>:
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	0002      	movs	r2, r0
 80053a8:	1dfb      	adds	r3, r7, #7
 80053aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	1dfb      	adds	r3, r7, #7
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b7f      	cmp	r3, #127	; 0x7f
 80053b2:	d809      	bhi.n	80053c8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	001a      	movs	r2, r3
 80053ba:	231f      	movs	r3, #31
 80053bc:	401a      	ands	r2, r3
 80053be:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <__NVIC_EnableIRQ+0x30>)
 80053c0:	2101      	movs	r1, #1
 80053c2:	4091      	lsls	r1, r2
 80053c4:	000a      	movs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]
}
 80053c8:	46c0      	nop			; (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b002      	add	sp, #8
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	e000e100 	.word	0xe000e100

080053d4 <__NVIC_DisableIRQ>:
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0002      	movs	r2, r0
 80053dc:	1dfb      	adds	r3, r7, #7
 80053de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80053e0:	1dfb      	adds	r3, r7, #7
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b7f      	cmp	r3, #127	; 0x7f
 80053e6:	d810      	bhi.n	800540a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053e8:	1dfb      	adds	r3, r7, #7
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	001a      	movs	r2, r3
 80053ee:	231f      	movs	r3, #31
 80053f0:	4013      	ands	r3, r2
 80053f2:	4908      	ldr	r1, [pc, #32]	; (8005414 <__NVIC_DisableIRQ+0x40>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	409a      	lsls	r2, r3
 80053f8:	0013      	movs	r3, r2
 80053fa:	2280      	movs	r2, #128	; 0x80
 80053fc:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80053fe:	f3bf 8f4f 	dsb	sy
}
 8005402:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8005404:	f3bf 8f6f 	isb	sy
}
 8005408:	46c0      	nop			; (mov r8, r8)
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b002      	add	sp, #8
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
{
 8005418:	b590      	push	{r4, r7, lr}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	0002      	movs	r2, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	1dfb      	adds	r3, r7, #7
 8005424:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005426:	1dfb      	adds	r3, r7, #7
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b7f      	cmp	r3, #127	; 0x7f
 800542c:	d828      	bhi.n	8005480 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <__NVIC_SetPriority+0xd4>)
 8005430:	1dfb      	adds	r3, r7, #7
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	b25b      	sxtb	r3, r3
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	33c0      	adds	r3, #192	; 0xc0
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	589b      	ldr	r3, [r3, r2]
 800543e:	1dfa      	adds	r2, r7, #7
 8005440:	7812      	ldrb	r2, [r2, #0]
 8005442:	0011      	movs	r1, r2
 8005444:	2203      	movs	r2, #3
 8005446:	400a      	ands	r2, r1
 8005448:	00d2      	lsls	r2, r2, #3
 800544a:	21ff      	movs	r1, #255	; 0xff
 800544c:	4091      	lsls	r1, r2
 800544e:	000a      	movs	r2, r1
 8005450:	43d2      	mvns	r2, r2
 8005452:	401a      	ands	r2, r3
 8005454:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	401a      	ands	r2, r3
 800545e:	1dfb      	adds	r3, r7, #7
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	0018      	movs	r0, r3
 8005464:	2303      	movs	r3, #3
 8005466:	4003      	ands	r3, r0
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800546c:	481f      	ldr	r0, [pc, #124]	; (80054ec <__NVIC_SetPriority+0xd4>)
 800546e:	1dfb      	adds	r3, r7, #7
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	b25b      	sxtb	r3, r3
 8005474:	089b      	lsrs	r3, r3, #2
 8005476:	430a      	orrs	r2, r1
 8005478:	33c0      	adds	r3, #192	; 0xc0
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	501a      	str	r2, [r3, r0]
}
 800547e:	e031      	b.n	80054e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005480:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <__NVIC_SetPriority+0xd8>)
 8005482:	1dfb      	adds	r3, r7, #7
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	0019      	movs	r1, r3
 8005488:	230f      	movs	r3, #15
 800548a:	400b      	ands	r3, r1
 800548c:	3b08      	subs	r3, #8
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	3306      	adds	r3, #6
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	3304      	adds	r3, #4
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	1dfa      	adds	r2, r7, #7
 800549c:	7812      	ldrb	r2, [r2, #0]
 800549e:	0011      	movs	r1, r2
 80054a0:	2203      	movs	r2, #3
 80054a2:	400a      	ands	r2, r1
 80054a4:	00d2      	lsls	r2, r2, #3
 80054a6:	21ff      	movs	r1, #255	; 0xff
 80054a8:	4091      	lsls	r1, r2
 80054aa:	000a      	movs	r2, r1
 80054ac:	43d2      	mvns	r2, r2
 80054ae:	401a      	ands	r2, r3
 80054b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	22ff      	movs	r2, #255	; 0xff
 80054b8:	401a      	ands	r2, r3
 80054ba:	1dfb      	adds	r3, r7, #7
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	0018      	movs	r0, r3
 80054c0:	2303      	movs	r3, #3
 80054c2:	4003      	ands	r3, r0
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80054c8:	4809      	ldr	r0, [pc, #36]	; (80054f0 <__NVIC_SetPriority+0xd8>)
 80054ca:	1dfb      	adds	r3, r7, #7
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	001c      	movs	r4, r3
 80054d0:	230f      	movs	r3, #15
 80054d2:	4023      	ands	r3, r4
 80054d4:	3b08      	subs	r3, #8
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	430a      	orrs	r2, r1
 80054da:	3306      	adds	r3, #6
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	18c3      	adds	r3, r0, r3
 80054e0:	3304      	adds	r3, #4
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	46c0      	nop			; (mov r8, r8)
 80054e6:	46bd      	mov	sp, r7
 80054e8:	b003      	add	sp, #12
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	e000e100 	.word	0xe000e100
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	1e5a      	subs	r2, r3, #1
 8005500:	2380      	movs	r3, #128	; 0x80
 8005502:	045b      	lsls	r3, r3, #17
 8005504:	429a      	cmp	r2, r3
 8005506:	d301      	bcc.n	800550c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005508:	2301      	movs	r3, #1
 800550a:	e010      	b.n	800552e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <SysTick_Config+0x44>)
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	3a01      	subs	r2, #1
 8005512:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005514:	2301      	movs	r3, #1
 8005516:	425b      	negs	r3, r3
 8005518:	2103      	movs	r1, #3
 800551a:	0018      	movs	r0, r3
 800551c:	f7ff ff7c 	bl	8005418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <SysTick_Config+0x44>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005526:	4b04      	ldr	r3, [pc, #16]	; (8005538 <SysTick_Config+0x44>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800552c:	2300      	movs	r3, #0
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b002      	add	sp, #8
 8005534:	bd80      	pop	{r7, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	e000e010 	.word	0xe000e010

0800553c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	210f      	movs	r1, #15
 8005548:	187b      	adds	r3, r7, r1
 800554a:	1c02      	adds	r2, r0, #0
 800554c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	187b      	adds	r3, r7, r1
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	b25b      	sxtb	r3, r3
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff ff5d 	bl	8005418 <__NVIC_SetPriority>
}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b004      	add	sp, #16
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	0002      	movs	r2, r0
 800556e:	1dfb      	adds	r3, r7, #7
 8005570:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005572:	1dfb      	adds	r3, r7, #7
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	b25b      	sxtb	r3, r3
 8005578:	0018      	movs	r0, r3
 800557a:	f7ff ff11 	bl	80053a0 <__NVIC_EnableIRQ>
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	0002      	movs	r2, r0
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b25b      	sxtb	r3, r3
 8005598:	0018      	movs	r0, r3
 800559a:	f7ff ff1b 	bl	80053d4 <__NVIC_DisableIRQ>
}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	0018      	movs	r0, r3
 80055b2:	f7ff ff9f 	bl	80054f4 <SysTick_Config>
 80055b6:	0003      	movs	r3, r0
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b002      	add	sp, #8
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e077      	b.n	80056c2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	; (80056cc <HAL_DMA_Init+0x10c>)
 80055d8:	4694      	mov	ip, r2
 80055da:	4463      	add	r3, ip
 80055dc:	2114      	movs	r1, #20
 80055de:	0018      	movs	r0, r3
 80055e0:	f7fc f992 	bl	8001908 <__udivsi3>
 80055e4:	0003      	movs	r3, r0
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2225      	movs	r2, #37	; 0x25
 80055f0:	2102      	movs	r1, #2
 80055f2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4934      	ldr	r1, [pc, #208]	; (80056d0 <HAL_DMA_Init+0x110>)
 8005600:	400a      	ands	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6819      	ldr	r1, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	0018      	movs	r0, r3
 800563e:	f000 faa3 	bl	8005b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	01db      	lsls	r3, r3, #7
 800564a:	429a      	cmp	r2, r3
 800564c:	d102      	bne.n	8005654 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565c:	213f      	movs	r1, #63	; 0x3f
 800565e:	400a      	ands	r2, r1
 8005660:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800566a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <HAL_DMA_Init+0xd8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d80d      	bhi.n	8005698 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 faae 	bl	8005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	e008      	b.n	80056aa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2225      	movs	r2, #37	; 0x25
 80056b4:	2101      	movs	r1, #1
 80056b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	2100      	movs	r1, #0
 80056be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	0018      	movs	r0, r3
 80056c4:	46bd      	mov	sp, r7
 80056c6:	b002      	add	sp, #8
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	46c0      	nop			; (mov r8, r8)
 80056cc:	bffdfff8 	.word	0xbffdfff8
 80056d0:	ffff800f 	.word	0xffff800f

080056d4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e066      	b.n	80057b4 <HAL_DMA_DeInit+0xe0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2101      	movs	r1, #1
 80056f2:	438a      	bics	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a30      	ldr	r2, [pc, #192]	; (80057bc <HAL_DMA_DeInit+0xe8>)
 80056fc:	4694      	mov	ip, r2
 80056fe:	4463      	add	r3, ip
 8005700:	2114      	movs	r1, #20
 8005702:	0018      	movs	r0, r3
 8005704:	f7fc f900 	bl	8001908 <__udivsi3>
 8005708:	0003      	movs	r3, r0
 800570a:	009a      	lsls	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005718:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <HAL_DMA_DeInit+0xec>)
 800571a:	6859      	ldr	r1, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	221c      	movs	r2, #28
 8005722:	4013      	ands	r3, r2
 8005724:	2201      	movs	r2, #1
 8005726:	409a      	lsls	r2, r3
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_DMA_DeInit+0xec>)
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fa29 	bl	8005b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005746:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_DMA_DeInit+0x9e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d80c      	bhi.n	8005772 <HAL_DMA_DeInit+0x9e>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	0018      	movs	r0, r3
 800575c:	f000 fa40 	bl	8005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005770:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	651a      	str	r2, [r3, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	659a      	str	r2, [r3, #88]	; 0x58

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2225      	movs	r2, #37	; 0x25
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2224      	movs	r2, #36	; 0x24
 80057ae:	2100      	movs	r1, #0
 80057b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b002      	add	sp, #8
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	bffdfff8 	.word	0xbffdfff8
 80057c0:	40020000 	.word	0x40020000

080057c4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2317      	movs	r3, #23
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2224      	movs	r2, #36	; 0x24
 80057de:	5c9b      	ldrb	r3, [r3, r2]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_DMA_Start_IT+0x24>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e06f      	b.n	80058c8 <HAL_DMA_Start_IT+0x104>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2224      	movs	r2, #36	; 0x24
 80057ec:	2101      	movs	r1, #1
 80057ee:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2225      	movs	r2, #37	; 0x25
 80057f4:	5c9b      	ldrb	r3, [r3, r2]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d157      	bne.n	80058ac <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2225      	movs	r2, #37	; 0x25
 8005800:	2102      	movs	r1, #2
 8005802:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2101      	movs	r1, #1
 8005816:	438a      	bics	r2, r1
 8005818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f971 	bl	8005b08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	210e      	movs	r1, #14
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e00f      	b.n	8005860 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2104      	movs	r1, #4
 800584c:	438a      	bics	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	210a      	movs	r1, #10
 800585c:	430a      	orrs	r2, r1
 800585e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	2380      	movs	r3, #128	; 0x80
 8005868:	025b      	lsls	r3, r3, #9
 800586a:	4013      	ands	r3, r2
 800586c:	d008      	beq.n	8005880 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005878:	2180      	movs	r1, #128	; 0x80
 800587a:	0049      	lsls	r1, r1, #1
 800587c:	430a      	orrs	r2, r1
 800587e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005892:	2180      	movs	r1, #128	; 0x80
 8005894:	0049      	lsls	r1, r1, #1
 8005896:	430a      	orrs	r2, r1
 8005898:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e00a      	b.n	80058c2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2280      	movs	r2, #128	; 0x80
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2224      	movs	r2, #36	; 0x24
 80058b6:	2100      	movs	r1, #0
 80058b8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80058ba:	2317      	movs	r3, #23
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80058c2:	2317      	movs	r3, #23
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	781b      	ldrb	r3, [r3, #0]
}
 80058c8:	0018      	movs	r0, r3
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b006      	add	sp, #24
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d8:	210f      	movs	r1, #15
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2225      	movs	r2, #37	; 0x25
 80058e4:	5c9b      	ldrb	r3, [r3, r2]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d006      	beq.n	80058fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2204      	movs	r2, #4
 80058f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058f2:	187b      	adds	r3, r7, r1
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e049      	b.n	800598e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	210e      	movs	r1, #14
 8005906:	438a      	bics	r2, r1
 8005908:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2101      	movs	r1, #1
 8005916:	438a      	bics	r2, r1
 8005918:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	491d      	ldr	r1, [pc, #116]	; (800599c <HAL_DMA_Abort_IT+0xcc>)
 8005926:	400a      	ands	r2, r1
 8005928:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800592a:	4b1d      	ldr	r3, [pc, #116]	; (80059a0 <HAL_DMA_Abort_IT+0xd0>)
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	221c      	movs	r2, #28
 8005934:	4013      	ands	r3, r2
 8005936:	2201      	movs	r2, #1
 8005938:	409a      	lsls	r2, r3
 800593a:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_DMA_Abort_IT+0xd0>)
 800593c:	430a      	orrs	r2, r1
 800593e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005948:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00c      	beq.n	800596c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	490f      	ldr	r1, [pc, #60]	; (800599c <HAL_DMA_Abort_IT+0xcc>)
 800595e:	400a      	ands	r2, r1
 8005960:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800596a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2225      	movs	r2, #37	; 0x25
 8005970:	2101      	movs	r1, #1
 8005972:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	0010      	movs	r0, r2
 800598c:	4798      	blx	r3
    }
  }
  return status;
 800598e:	230f      	movs	r3, #15
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	781b      	ldrb	r3, [r3, #0]
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b004      	add	sp, #16
 800599a:	bd80      	pop	{r7, pc}
 800599c:	fffffeff 	.word	0xfffffeff
 80059a0:	40020000 	.word	0x40020000

080059a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80059ac:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	221c      	movs	r2, #28
 80059c0:	4013      	ands	r3, r2
 80059c2:	2204      	movs	r2, #4
 80059c4:	409a      	lsls	r2, r3
 80059c6:	0013      	movs	r3, r2
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4013      	ands	r3, r2
 80059cc:	d027      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x7a>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2204      	movs	r2, #4
 80059d2:	4013      	ands	r3, r2
 80059d4:	d023      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2220      	movs	r2, #32
 80059de:	4013      	ands	r3, r2
 80059e0:	d107      	bne.n	80059f2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2104      	movs	r1, #4
 80059ee:	438a      	bics	r2, r1
 80059f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80059f2:	4b44      	ldr	r3, [pc, #272]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 80059f4:	6859      	ldr	r1, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	221c      	movs	r2, #28
 80059fc:	4013      	ands	r3, r2
 80059fe:	2204      	movs	r2, #4
 8005a00:	409a      	lsls	r2, r3
 8005a02:	4b40      	ldr	r3, [pc, #256]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d100      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x6e>
 8005a10:	e073      	b.n	8005afa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	0010      	movs	r0, r2
 8005a1a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005a1c:	e06d      	b.n	8005afa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	221c      	movs	r2, #28
 8005a24:	4013      	ands	r3, r2
 8005a26:	2202      	movs	r2, #2
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	0013      	movs	r3, r2
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d02e      	beq.n	8005a90 <HAL_DMA_IRQHandler+0xec>
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2202      	movs	r2, #2
 8005a36:	4013      	ands	r3, r2
 8005a38:	d02a      	beq.n	8005a90 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2220      	movs	r2, #32
 8005a42:	4013      	ands	r3, r2
 8005a44:	d10b      	bne.n	8005a5e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	210a      	movs	r1, #10
 8005a52:	438a      	bics	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2225      	movs	r2, #37	; 0x25
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005a5e:	4b29      	ldr	r3, [pc, #164]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	221c      	movs	r2, #28
 8005a68:	4013      	ands	r3, r2
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2224      	movs	r2, #36	; 0x24
 8005a78:	2100      	movs	r1, #0
 8005a7a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d03a      	beq.n	8005afa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	0010      	movs	r0, r2
 8005a8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005a8e:	e034      	b.n	8005afa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	221c      	movs	r2, #28
 8005a96:	4013      	ands	r3, r2
 8005a98:	2208      	movs	r2, #8
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	0013      	movs	r3, r2
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d02b      	beq.n	8005afc <HAL_DMA_IRQHandler+0x158>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d027      	beq.n	8005afc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	210e      	movs	r1, #14
 8005ab8:	438a      	bics	r2, r1
 8005aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005abc:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 8005abe:	6859      	ldr	r1, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	221c      	movs	r2, #28
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_DMA_IRQHandler+0x160>)
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2225      	movs	r2, #37	; 0x25
 8005adc:	2101      	movs	r1, #1
 8005ade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2224      	movs	r2, #36	; 0x24
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	0010      	movs	r0, r2
 8005af8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	46c0      	nop			; (mov r8, r8)
}
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b004      	add	sp, #16
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40020000 	.word	0x40020000

08005b08 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d004      	beq.n	8005b32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b30:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <DMA_SetConfig+0x7c>)
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	221c      	movs	r2, #28
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	2201      	movs	r2, #1
 8005b40:	409a      	lsls	r2, r3
 8005b42:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <DMA_SetConfig+0x7c>)
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d108      	bne.n	8005b6a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b68:	e007      	b.n	8005b7a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]
}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b004      	add	sp, #16
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	40020000 	.word	0x40020000

08005b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	089b      	lsrs	r3, r3, #2
 8005b96:	4a10      	ldr	r2, [pc, #64]	; (8005bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005b98:	4694      	mov	ip, r2
 8005b9a:	4463      	add	r3, ip
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	001a      	movs	r2, r3
 8005baa:	23ff      	movs	r3, #255	; 0xff
 8005bac:	4013      	ands	r3, r2
 8005bae:	3b08      	subs	r3, #8
 8005bb0:	2114      	movs	r1, #20
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f7fb fea8 	bl	8001908 <__udivsi3>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005bc0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	221f      	movs	r2, #31
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2201      	movs	r2, #1
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005bd0:	46c0      	nop			; (mov r8, r8)
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	b004      	add	sp, #16
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	10008200 	.word	0x10008200
 8005bdc:	40020880 	.word	0x40020880

08005be0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	223f      	movs	r2, #63	; 0x3f
 8005bee:	4013      	ands	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005bf6:	4694      	mov	ip, r2
 8005bf8:	4463      	add	r3, ip
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	001a      	movs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c06:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2201      	movs	r2, #1
 8005c12:	409a      	lsls	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58
}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b004      	add	sp, #16
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	1000823f 	.word	0x1000823f
 8005c24:	40020940 	.word	0x40020940

08005c28 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603a      	str	r2, [r7, #0]
 8005c34:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c36:	4b21      	ldr	r3, [pc, #132]	; (8005cbc <HAL_FLASH_Program+0x94>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_FLASH_Program+0x1a>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e038      	b.n	8005cb4 <HAL_FLASH_Program+0x8c>
 8005c42:	4b1e      	ldr	r3, [pc, #120]	; (8005cbc <HAL_FLASH_Program+0x94>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <HAL_FLASH_Program+0x94>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c4e:	2517      	movs	r5, #23
 8005c50:	197c      	adds	r4, r7, r5
 8005c52:	23fa      	movs	r3, #250	; 0xfa
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f87a 	bl	8005d50 <FLASH_WaitForLastOperation>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005c60:	197b      	adds	r3, r7, r5
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11f      	bne.n	8005ca8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d106      	bne.n	8005c7c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	0008      	movs	r0, r1
 8005c76:	f000 f8b9 	bl	8005dec <FLASH_Program_DoubleWord>
 8005c7a:	e005      	b.n	8005c88 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	0011      	movs	r1, r2
 8005c82:	0018      	movs	r0, r3
 8005c84:	f002 f894 	bl	8007db0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c88:	2317      	movs	r3, #23
 8005c8a:	18fc      	adds	r4, r7, r3
 8005c8c:	23fa      	movs	r3, #250	; 0xfa
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f85d 	bl	8005d50 <FLASH_WaitForLastOperation>
 8005c96:	0003      	movs	r3, r0
 8005c98:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005c9a:	4b09      	ldr	r3, [pc, #36]	; (8005cc0 <HAL_FLASH_Program+0x98>)
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	43d9      	mvns	r1, r3
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_FLASH_Program+0x98>)
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <HAL_FLASH_Program+0x94>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005cae:	2317      	movs	r3, #23
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	781b      	ldrb	r3, [r3, #0]
}
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	b006      	add	sp, #24
 8005cba:	bdb0      	pop	{r4, r5, r7, pc}
 8005cbc:	200009f0 	.word	0x200009f0
 8005cc0:	40022000 	.word	0x40022000

08005cc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cca:	1dfb      	adds	r3, r7, #7
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005cd0:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <HAL_FLASH_Unlock+0x3c>)
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da0c      	bge.n	8005cf2 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cd8:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_FLASH_Unlock+0x3c>)
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <HAL_FLASH_Unlock+0x40>)
 8005cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cde:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_FLASH_Unlock+0x3c>)
 8005ce0:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <HAL_FLASH_Unlock+0x44>)
 8005ce2:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_FLASH_Unlock+0x3c>)
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da02      	bge.n	8005cf2 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8005cec:	1dfb      	adds	r3, r7, #7
 8005cee:	2201      	movs	r2, #1
 8005cf0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005cf2:	1dfb      	adds	r3, r7, #7
 8005cf4:	781b      	ldrb	r3, [r3, #0]
}
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b002      	add	sp, #8
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	40022000 	.word	0x40022000
 8005d04:	45670123 	.word	0x45670123
 8005d08:	cdef89ab 	.word	0xcdef89ab

08005d0c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d12:	1dfb      	adds	r3, r7, #7
 8005d14:	2201      	movs	r2, #1
 8005d16:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d18:	23fa      	movs	r3, #250	; 0xfa
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f000 f817 	bl	8005d50 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d22:	4b0a      	ldr	r3, [pc, #40]	; (8005d4c <HAL_FLASH_Lock+0x40>)
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <HAL_FLASH_Lock+0x40>)
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	0609      	lsls	r1, r1, #24
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_FLASH_Lock+0x40>)
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	da02      	bge.n	8005d3e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d3e:	1dfb      	adds	r3, r7, #7
 8005d40:	781b      	ldrb	r3, [r3, #0]
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b002      	add	sp, #8
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	40022000 	.word	0x40022000

08005d50 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7ff faf4 	bl	8005344 <HAL_GetTick>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8005d60:	2380      	movs	r3, #128	; 0x80
 8005d62:	025b      	lsls	r3, r3, #9
 8005d64:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8005d66:	e00c      	b.n	8005d82 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	d009      	beq.n	8005d82 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d6e:	f7ff fae9 	bl	8005344 <HAL_GetTick>
 8005d72:	0002      	movs	r2, r0
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d801      	bhi.n	8005d82 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e028      	b.n	8005dd4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8005d82:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <FLASH_WaitForLastOperation+0x8c>)
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d1ed      	bne.n	8005d68 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8005d8c:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <FLASH_WaitForLastOperation+0x8c>)
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <FLASH_WaitForLastOperation+0x90>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <FLASH_WaitForLastOperation+0x8c>)
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <FLASH_WaitForLastOperation+0x94>)
 8005d9a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005da2:	4b11      	ldr	r3, [pc, #68]	; (8005de8 <FLASH_WaitForLastOperation+0x98>)
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e013      	b.n	8005dd4 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3301      	adds	r3, #1
 8005db0:	d009      	beq.n	8005dc6 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8005db2:	f7ff fac7 	bl	8005344 <HAL_GetTick>
 8005db6:	0002      	movs	r2, r0
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d801      	bhi.n	8005dc6 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e006      	b.n	8005dd4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8005dc6:	4b05      	ldr	r3, [pc, #20]	; (8005ddc <FLASH_WaitForLastOperation+0x8c>)
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	2380      	movs	r3, #128	; 0x80
 8005dcc:	02db      	lsls	r3, r3, #11
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d1ec      	bne.n	8005dac <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b004      	add	sp, #16
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40022000 	.word	0x40022000
 8005de0:	0000c3fa 	.word	0x0000c3fa
 8005de4:	0000c3fb 	.word	0x0000c3fb
 8005de8:	200009f0 	.word	0x200009f0

08005dec <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005dec:	b5b0      	push	{r4, r5, r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	603a      	str	r2, [r7, #0]
 8005df6:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <FLASH_Program_DoubleWord+0x3c>)
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <FLASH_Program_DoubleWord+0x3c>)
 8005dfe:	2101      	movs	r1, #1
 8005e00:	430a      	orrs	r2, r1
 8005e02:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005e0a:	f3bf 8f6f 	isb	sy
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	001c      	movs	r4, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	001d      	movs	r5, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	0022      	movs	r2, r4
 8005e1e:	601a      	str	r2, [r3, #0]
}
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b004      	add	sp, #16
 8005e26:	bdb0      	pop	{r4, r5, r7, pc}
 8005e28:	40022000 	.word	0x40022000

08005e2c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e2c:	b5b0      	push	{r4, r5, r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <HAL_FLASHEx_Erase+0xe0>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_FLASHEx_Erase+0x16>
 8005e3e:	2302      	movs	r3, #2
 8005e40:	e05f      	b.n	8005f02 <HAL_FLASHEx_Erase+0xd6>
 8005e42:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <HAL_FLASHEx_Erase+0xe0>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e48:	4b30      	ldr	r3, [pc, #192]	; (8005f0c <HAL_FLASHEx_Erase+0xe0>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e4e:	250f      	movs	r5, #15
 8005e50:	197c      	adds	r4, r7, r5
 8005e52:	23fa      	movs	r3, #250	; 0xfa
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	0018      	movs	r0, r3
 8005e58:	f7ff ff7a 	bl	8005d50 <FLASH_WaitForLastOperation>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005e60:	002c      	movs	r4, r5
 8005e62:	193b      	adds	r3, r7, r4
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d145      	bne.n	8005ef6 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d10d      	bne.n	8005e94 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f849 	bl	8005f14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e82:	193c      	adds	r4, r7, r4
 8005e84:	23fa      	movs	r3, #250	; 0xfa
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7ff ff61 	bl	8005d50 <FLASH_WaitForLastOperation>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	7023      	strb	r3, [r4, #0]
 8005e92:	e030      	b.n	8005ef6 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2201      	movs	r2, #1
 8005e98:	4252      	negs	r2, r2
 8005e9a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60bb      	str	r3, [r7, #8]
 8005ea2:	e01a      	b.n	8005eda <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	0011      	movs	r1, r2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f000 f845 	bl	8005f3c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005eb2:	250f      	movs	r5, #15
 8005eb4:	197c      	adds	r4, r7, r5
 8005eb6:	23fa      	movs	r3, #250	; 0xfa
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7ff ff48 	bl	8005d50 <FLASH_WaitForLastOperation>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8005ec4:	197b      	adds	r3, r7, r5
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	601a      	str	r2, [r3, #0]
          break;
 8005ed2:	e00a      	b.n	8005eea <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	18d3      	adds	r3, r2, r3
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d3dc      	bcc.n	8005ea4 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_FLASHEx_Erase+0xe4>)
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <HAL_FLASHEx_Erase+0xe4>)
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	438a      	bics	r2, r1
 8005ef4:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_FLASHEx_Erase+0xe0>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005efc:	230f      	movs	r3, #15
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781b      	ldrb	r3, [r3, #0]
}
 8005f02:	0018      	movs	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bdb0      	pop	{r4, r5, r7, pc}
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	200009f0 	.word	0x200009f0
 8005f10:	40022000 	.word	0x40022000

08005f14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <FLASH_MassErase+0x24>)
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <FLASH_MassErase+0x24>)
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	0249      	lsls	r1, r1, #9
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	615a      	str	r2, [r3, #20]
}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b002      	add	sp, #8
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	40022000 	.word	0x40022000

08005f3c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <FLASH_PageErase+0x2c>)
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <FLASH_PageErase+0x30>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	00da      	lsls	r2, r3, #3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <FLASH_PageErase+0x2c>)
 8005f5a:	4905      	ldr	r1, [pc, #20]	; (8005f70 <FLASH_PageErase+0x34>)
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	615a      	str	r2, [r3, #20]
}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b004      	add	sp, #16
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	40022000 	.word	0x40022000
 8005f6c:	ffffe007 	.word	0xffffe007
 8005f70:	00010002 	.word	0x00010002

08005f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f82:	e147      	b.n	8006214 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2101      	movs	r1, #1
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4091      	lsls	r1, r2
 8005f8e:	000a      	movs	r2, r1
 8005f90:	4013      	ands	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d100      	bne.n	8005f9c <HAL_GPIO_Init+0x28>
 8005f9a:	e138      	b.n	800620e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d005      	beq.n	8005fb4 <HAL_GPIO_Init+0x40>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2203      	movs	r2, #3
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d130      	bne.n	8006016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	0013      	movs	r3, r2
 8005fc4:	43da      	mvns	r2, r3
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	0013      	movs	r3, r2
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fea:	2201      	movs	r2, #1
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	0013      	movs	r3, r2
 8005ff2:	43da      	mvns	r2, r3
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	091b      	lsrs	r3, r3, #4
 8006000:	2201      	movs	r2, #1
 8006002:	401a      	ands	r2, r3
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	409a      	lsls	r2, r3
 8006008:	0013      	movs	r3, r2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2203      	movs	r2, #3
 800601c:	4013      	ands	r3, r2
 800601e:	2b03      	cmp	r3, #3
 8006020:	d017      	beq.n	8006052 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	2203      	movs	r2, #3
 800602e:	409a      	lsls	r2, r3
 8006030:	0013      	movs	r3, r2
 8006032:	43da      	mvns	r2, r3
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4013      	ands	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	005b      	lsls	r3, r3, #1
 8006042:	409a      	lsls	r2, r3
 8006044:	0013      	movs	r3, r2
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2203      	movs	r2, #3
 8006058:	4013      	ands	r3, r2
 800605a:	2b02      	cmp	r3, #2
 800605c:	d123      	bne.n	80060a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	58d3      	ldr	r3, [r2, r3]
 800606a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2207      	movs	r2, #7
 8006070:	4013      	ands	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	220f      	movs	r2, #15
 8006076:	409a      	lsls	r2, r3
 8006078:	0013      	movs	r3, r2
 800607a:	43da      	mvns	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2107      	movs	r1, #7
 800608a:	400b      	ands	r3, r1
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	409a      	lsls	r2, r3
 8006090:	0013      	movs	r3, r2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	08da      	lsrs	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3208      	adds	r2, #8
 80060a0:	0092      	lsls	r2, r2, #2
 80060a2:	6939      	ldr	r1, [r7, #16]
 80060a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	2203      	movs	r2, #3
 80060b2:	409a      	lsls	r2, r3
 80060b4:	0013      	movs	r3, r2
 80060b6:	43da      	mvns	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2203      	movs	r2, #3
 80060c4:	401a      	ands	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	409a      	lsls	r2, r3
 80060cc:	0013      	movs	r3, r2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	23c0      	movs	r3, #192	; 0xc0
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	4013      	ands	r3, r2
 80060e4:	d100      	bne.n	80060e8 <HAL_GPIO_Init+0x174>
 80060e6:	e092      	b.n	800620e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80060e8:	4a50      	ldr	r2, [pc, #320]	; (800622c <HAL_GPIO_Init+0x2b8>)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	089b      	lsrs	r3, r3, #2
 80060ee:	3318      	adds	r3, #24
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	589b      	ldr	r3, [r3, r2]
 80060f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2203      	movs	r2, #3
 80060fa:	4013      	ands	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	220f      	movs	r2, #15
 8006100:	409a      	lsls	r2, r3
 8006102:	0013      	movs	r3, r2
 8006104:	43da      	mvns	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	23a0      	movs	r3, #160	; 0xa0
 8006110:	05db      	lsls	r3, r3, #23
 8006112:	429a      	cmp	r2, r3
 8006114:	d013      	beq.n	800613e <HAL_GPIO_Init+0x1ca>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a45      	ldr	r2, [pc, #276]	; (8006230 <HAL_GPIO_Init+0x2bc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00d      	beq.n	800613a <HAL_GPIO_Init+0x1c6>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a44      	ldr	r2, [pc, #272]	; (8006234 <HAL_GPIO_Init+0x2c0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x1c2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a43      	ldr	r2, [pc, #268]	; (8006238 <HAL_GPIO_Init+0x2c4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_GPIO_Init+0x1be>
 800612e:	2303      	movs	r3, #3
 8006130:	e006      	b.n	8006140 <HAL_GPIO_Init+0x1cc>
 8006132:	2305      	movs	r3, #5
 8006134:	e004      	b.n	8006140 <HAL_GPIO_Init+0x1cc>
 8006136:	2302      	movs	r3, #2
 8006138:	e002      	b.n	8006140 <HAL_GPIO_Init+0x1cc>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <HAL_GPIO_Init+0x1cc>
 800613e:	2300      	movs	r3, #0
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	2103      	movs	r1, #3
 8006144:	400a      	ands	r2, r1
 8006146:	00d2      	lsls	r2, r2, #3
 8006148:	4093      	lsls	r3, r2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006150:	4936      	ldr	r1, [pc, #216]	; (800622c <HAL_GPIO_Init+0x2b8>)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	089b      	lsrs	r3, r3, #2
 8006156:	3318      	adds	r3, #24
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800615e:	4b33      	ldr	r3, [pc, #204]	; (800622c <HAL_GPIO_Init+0x2b8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	43da      	mvns	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	2380      	movs	r3, #128	; 0x80
 8006174:	035b      	lsls	r3, r3, #13
 8006176:	4013      	ands	r3, r2
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006182:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_GPIO_Init+0x2b8>)
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006188:	4b28      	ldr	r3, [pc, #160]	; (800622c <HAL_GPIO_Init+0x2b8>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	43da      	mvns	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	039b      	lsls	r3, r3, #14
 80061a0:	4013      	ands	r3, r2
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061ac:	4b1f      	ldr	r3, [pc, #124]	; (800622c <HAL_GPIO_Init+0x2b8>)
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80061b2:	4a1e      	ldr	r2, [pc, #120]	; (800622c <HAL_GPIO_Init+0x2b8>)
 80061b4:	2384      	movs	r3, #132	; 0x84
 80061b6:	58d3      	ldr	r3, [r2, r3]
 80061b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	43da      	mvns	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4013      	ands	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	029b      	lsls	r3, r3, #10
 80061cc:	4013      	ands	r3, r2
 80061ce:	d003      	beq.n	80061d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061d8:	4914      	ldr	r1, [pc, #80]	; (800622c <HAL_GPIO_Init+0x2b8>)
 80061da:	2284      	movs	r2, #132	; 0x84
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80061e0:	4a12      	ldr	r2, [pc, #72]	; (800622c <HAL_GPIO_Init+0x2b8>)
 80061e2:	2380      	movs	r3, #128	; 0x80
 80061e4:	58d3      	ldr	r3, [r2, r3]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	43da      	mvns	r2, r3
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4013      	ands	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	025b      	lsls	r3, r3, #9
 80061fa:	4013      	ands	r3, r2
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006206:	4909      	ldr	r1, [pc, #36]	; (800622c <HAL_GPIO_Init+0x2b8>)
 8006208:	2280      	movs	r2, #128	; 0x80
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	3301      	adds	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	40da      	lsrs	r2, r3
 800621c:	1e13      	subs	r3, r2, #0
 800621e:	d000      	beq.n	8006222 <HAL_GPIO_Init+0x2ae>
 8006220:	e6b0      	b.n	8005f84 <HAL_GPIO_Init+0x10>
  }
}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b006      	add	sp, #24
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021800 	.word	0x40021800
 8006230:	50000400 	.word	0x50000400
 8006234:	50000800 	.word	0x50000800
 8006238:	50000c00 	.word	0x50000c00

0800623c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	000a      	movs	r2, r1
 8006246:	1cbb      	adds	r3, r7, #2
 8006248:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	1cba      	adds	r2, r7, #2
 8006250:	8812      	ldrh	r2, [r2, #0]
 8006252:	4013      	ands	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006256:	230f      	movs	r3, #15
 8006258:	18fb      	adds	r3, r7, r3
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e003      	b.n	8006268 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006260:	230f      	movs	r3, #15
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006268:	230f      	movs	r3, #15
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	781b      	ldrb	r3, [r3, #0]
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b004      	add	sp, #16
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	0008      	movs	r0, r1
 8006280:	0011      	movs	r1, r2
 8006282:	1cbb      	adds	r3, r7, #2
 8006284:	1c02      	adds	r2, r0, #0
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	1c7b      	adds	r3, r7, #1
 800628a:	1c0a      	adds	r2, r1, #0
 800628c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800628e:	1c7b      	adds	r3, r7, #1
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d004      	beq.n	80062a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006296:	1cbb      	adds	r3, r7, #2
 8006298:	881a      	ldrh	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800629e:	e003      	b.n	80062a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062a0:	1cbb      	adds	r3, r7, #2
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	0002      	movs	r2, r0
 80062b8:	1dbb      	adds	r3, r7, #6
 80062ba:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80062bc:	4b10      	ldr	r3, [pc, #64]	; (8006300 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	1dba      	adds	r2, r7, #6
 80062c2:	8812      	ldrh	r2, [r2, #0]
 80062c4:	4013      	ands	r3, r2
 80062c6:	d008      	beq.n	80062da <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80062ca:	1dba      	adds	r2, r7, #6
 80062cc:	8812      	ldrh	r2, [r2, #0]
 80062ce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80062d0:	1dbb      	adds	r3, r7, #6
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 f815 	bl	8006304 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80062da:	4b09      	ldr	r3, [pc, #36]	; (8006300 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	1dba      	adds	r2, r7, #6
 80062e0:	8812      	ldrh	r2, [r2, #0]
 80062e2:	4013      	ands	r3, r2
 80062e4:	d008      	beq.n	80062f8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80062e8:	1dba      	adds	r2, r7, #6
 80062ea:	8812      	ldrh	r2, [r2, #0]
 80062ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80062ee:	1dbb      	adds	r3, r7, #6
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 f810 	bl	8006318 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021800 	.word	0x40021800

08006304 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	0002      	movs	r2, r0
 800630c:	1dbb      	adds	r3, r7, #6
 800630e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006310:	46c0      	nop			; (mov r8, r8)
 8006312:	46bd      	mov	sp, r7
 8006314:	b002      	add	sp, #8
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	0002      	movs	r2, r0
 8006320:	1dbb      	adds	r3, r7, #6
 8006322:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b002      	add	sp, #8
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e04a      	b.n	80063d4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	223d      	movs	r2, #61	; 0x3d
 8006342:	5c9b      	ldrb	r3, [r3, r2]
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d107      	bne.n	800635a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	223c      	movs	r2, #60	; 0x3c
 800634e:	2100      	movs	r1, #0
 8006350:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	0018      	movs	r0, r3
 8006356:	f7fe fb77 	bl	8004a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	223d      	movs	r2, #61	; 0x3d
 800635e:	2102      	movs	r1, #2
 8006360:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3304      	adds	r3, #4
 800636a:	0019      	movs	r1, r3
 800636c:	0010      	movs	r0, r2
 800636e:	f000 fd7d 	bl	8006e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2248      	movs	r2, #72	; 0x48
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	223e      	movs	r2, #62	; 0x3e
 800637e:	2101      	movs	r1, #1
 8006380:	5499      	strb	r1, [r3, r2]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	223f      	movs	r2, #63	; 0x3f
 8006386:	2101      	movs	r1, #1
 8006388:	5499      	strb	r1, [r3, r2]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2240      	movs	r2, #64	; 0x40
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2241      	movs	r2, #65	; 0x41
 8006396:	2101      	movs	r1, #1
 8006398:	5499      	strb	r1, [r3, r2]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2242      	movs	r2, #66	; 0x42
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2243      	movs	r2, #67	; 0x43
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2244      	movs	r2, #68	; 0x44
 80063ae:	2101      	movs	r1, #1
 80063b0:	5499      	strb	r1, [r3, r2]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2245      	movs	r2, #69	; 0x45
 80063b6:	2101      	movs	r1, #1
 80063b8:	5499      	strb	r1, [r3, r2]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2246      	movs	r2, #70	; 0x46
 80063be:	2101      	movs	r1, #1
 80063c0:	5499      	strb	r1, [r3, r2]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2247      	movs	r2, #71	; 0x47
 80063c6:	2101      	movs	r1, #1
 80063c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	223d      	movs	r2, #61	; 0x3d
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	0018      	movs	r0, r3
 80063f0:	f001 f85c 	bl	80074ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_TIM_PWM_Stop+0xf4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d009      	beq.n	8006412 <HAL_TIM_PWM_Stop+0x36>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_TIM_PWM_Stop+0xf8>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d004      	beq.n	8006412 <HAL_TIM_PWM_Stop+0x36>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <HAL_TIM_PWM_Stop+0xfc>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d101      	bne.n	8006416 <HAL_TIM_PWM_Stop+0x3a>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_TIM_PWM_Stop+0x3c>
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d013      	beq.n	8006444 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	4a2e      	ldr	r2, [pc, #184]	; (80064dc <HAL_TIM_PWM_Stop+0x100>)
 8006424:	4013      	ands	r3, r2
 8006426:	d10d      	bne.n	8006444 <HAL_TIM_PWM_Stop+0x68>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <HAL_TIM_PWM_Stop+0x104>)
 8006430:	4013      	ands	r3, r2
 8006432:	d107      	bne.n	8006444 <HAL_TIM_PWM_Stop+0x68>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4929      	ldr	r1, [pc, #164]	; (80064e4 <HAL_TIM_PWM_Stop+0x108>)
 8006440:	400a      	ands	r2, r1
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	4a24      	ldr	r2, [pc, #144]	; (80064dc <HAL_TIM_PWM_Stop+0x100>)
 800644c:	4013      	ands	r3, r2
 800644e:	d10d      	bne.n	800646c <HAL_TIM_PWM_Stop+0x90>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	4a22      	ldr	r2, [pc, #136]	; (80064e0 <HAL_TIM_PWM_Stop+0x104>)
 8006458:	4013      	ands	r3, r2
 800645a:	d107      	bne.n	800646c <HAL_TIM_PWM_Stop+0x90>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2101      	movs	r1, #1
 8006468:	438a      	bics	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_TIM_PWM_Stop+0xa0>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	223e      	movs	r2, #62	; 0x3e
 8006476:	2101      	movs	r1, #1
 8006478:	5499      	strb	r1, [r3, r2]
 800647a:	e023      	b.n	80064c4 <HAL_TIM_PWM_Stop+0xe8>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b04      	cmp	r3, #4
 8006480:	d104      	bne.n	800648c <HAL_TIM_PWM_Stop+0xb0>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	223f      	movs	r2, #63	; 0x3f
 8006486:	2101      	movs	r1, #1
 8006488:	5499      	strb	r1, [r3, r2]
 800648a:	e01b      	b.n	80064c4 <HAL_TIM_PWM_Stop+0xe8>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b08      	cmp	r3, #8
 8006490:	d104      	bne.n	800649c <HAL_TIM_PWM_Stop+0xc0>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	2101      	movs	r1, #1
 8006498:	5499      	strb	r1, [r3, r2]
 800649a:	e013      	b.n	80064c4 <HAL_TIM_PWM_Stop+0xe8>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b0c      	cmp	r3, #12
 80064a0:	d104      	bne.n	80064ac <HAL_TIM_PWM_Stop+0xd0>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2241      	movs	r2, #65	; 0x41
 80064a6:	2101      	movs	r1, #1
 80064a8:	5499      	strb	r1, [r3, r2]
 80064aa:	e00b      	b.n	80064c4 <HAL_TIM_PWM_Stop+0xe8>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d104      	bne.n	80064bc <HAL_TIM_PWM_Stop+0xe0>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2242      	movs	r2, #66	; 0x42
 80064b6:	2101      	movs	r1, #1
 80064b8:	5499      	strb	r1, [r3, r2]
 80064ba:	e003      	b.n	80064c4 <HAL_TIM_PWM_Stop+0xe8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2243      	movs	r2, #67	; 0x43
 80064c0:	2101      	movs	r1, #1
 80064c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	0018      	movs	r0, r3
 80064c8:	46bd      	mov	sp, r7
 80064ca:	b002      	add	sp, #8
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	46c0      	nop			; (mov r8, r8)
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800
 80064dc:	00001111 	.word	0x00001111
 80064e0:	00000444 	.word	0x00000444
 80064e4:	ffff7fff 	.word	0xffff7fff

080064e8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	001a      	movs	r2, r3
 80064f6:	1cbb      	adds	r3, r7, #2
 80064f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fa:	2317      	movs	r3, #23
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	2200      	movs	r2, #0
 8006500:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d108      	bne.n	800651a <HAL_TIM_PWM_Start_DMA+0x32>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	223e      	movs	r2, #62	; 0x3e
 800650c:	5c9b      	ldrb	r3, [r3, r2]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	3b02      	subs	r3, #2
 8006512:	425a      	negs	r2, r3
 8006514:	4153      	adcs	r3, r2
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e037      	b.n	800658a <HAL_TIM_PWM_Start_DMA+0xa2>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b04      	cmp	r3, #4
 800651e:	d108      	bne.n	8006532 <HAL_TIM_PWM_Start_DMA+0x4a>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	223f      	movs	r2, #63	; 0x3f
 8006524:	5c9b      	ldrb	r3, [r3, r2]
 8006526:	b2db      	uxtb	r3, r3
 8006528:	3b02      	subs	r3, #2
 800652a:	425a      	negs	r2, r3
 800652c:	4153      	adcs	r3, r2
 800652e:	b2db      	uxtb	r3, r3
 8006530:	e02b      	b.n	800658a <HAL_TIM_PWM_Start_DMA+0xa2>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b08      	cmp	r3, #8
 8006536:	d108      	bne.n	800654a <HAL_TIM_PWM_Start_DMA+0x62>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2240      	movs	r2, #64	; 0x40
 800653c:	5c9b      	ldrb	r3, [r3, r2]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	3b02      	subs	r3, #2
 8006542:	425a      	negs	r2, r3
 8006544:	4153      	adcs	r3, r2
 8006546:	b2db      	uxtb	r3, r3
 8006548:	e01f      	b.n	800658a <HAL_TIM_PWM_Start_DMA+0xa2>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d108      	bne.n	8006562 <HAL_TIM_PWM_Start_DMA+0x7a>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2241      	movs	r2, #65	; 0x41
 8006554:	5c9b      	ldrb	r3, [r3, r2]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	3b02      	subs	r3, #2
 800655a:	425a      	negs	r2, r3
 800655c:	4153      	adcs	r3, r2
 800655e:	b2db      	uxtb	r3, r3
 8006560:	e013      	b.n	800658a <HAL_TIM_PWM_Start_DMA+0xa2>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b10      	cmp	r3, #16
 8006566:	d108      	bne.n	800657a <HAL_TIM_PWM_Start_DMA+0x92>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2242      	movs	r2, #66	; 0x42
 800656c:	5c9b      	ldrb	r3, [r3, r2]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	3b02      	subs	r3, #2
 8006572:	425a      	negs	r2, r3
 8006574:	4153      	adcs	r3, r2
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e007      	b.n	800658a <HAL_TIM_PWM_Start_DMA+0xa2>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2243      	movs	r2, #67	; 0x43
 800657e:	5c9b      	ldrb	r3, [r3, r2]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	3b02      	subs	r3, #2
 8006584:	425a      	negs	r2, r3
 8006586:	4153      	adcs	r3, r2
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800658e:	2302      	movs	r3, #2
 8006590:	e189      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <HAL_TIM_PWM_Start_DMA+0xc2>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	223e      	movs	r2, #62	; 0x3e
 800659c:	5c9b      	ldrb	r3, [r3, r2]
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	3b01      	subs	r3, #1
 80065a2:	425a      	negs	r2, r3
 80065a4:	4153      	adcs	r3, r2
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e037      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x132>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d108      	bne.n	80065c2 <HAL_TIM_PWM_Start_DMA+0xda>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	223f      	movs	r2, #63	; 0x3f
 80065b4:	5c9b      	ldrb	r3, [r3, r2]
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	425a      	negs	r2, r3
 80065bc:	4153      	adcs	r3, r2
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e02b      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x132>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d108      	bne.n	80065da <HAL_TIM_PWM_Start_DMA+0xf2>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	5c9b      	ldrb	r3, [r3, r2]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	3b01      	subs	r3, #1
 80065d2:	425a      	negs	r2, r3
 80065d4:	4153      	adcs	r3, r2
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	e01f      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x132>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d108      	bne.n	80065f2 <HAL_TIM_PWM_Start_DMA+0x10a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2241      	movs	r2, #65	; 0x41
 80065e4:	5c9b      	ldrb	r3, [r3, r2]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	425a      	negs	r2, r3
 80065ec:	4153      	adcs	r3, r2
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	e013      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x132>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d108      	bne.n	800660a <HAL_TIM_PWM_Start_DMA+0x122>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2242      	movs	r2, #66	; 0x42
 80065fc:	5c9b      	ldrb	r3, [r3, r2]
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	425a      	negs	r2, r3
 8006604:	4153      	adcs	r3, r2
 8006606:	b2db      	uxtb	r3, r3
 8006608:	e007      	b.n	800661a <HAL_TIM_PWM_Start_DMA+0x132>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2243      	movs	r2, #67	; 0x43
 800660e:	5c9b      	ldrb	r3, [r3, r2]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	425a      	negs	r2, r3
 8006616:	4153      	adcs	r3, r2
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d035      	beq.n	800668a <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_TIM_PWM_Start_DMA+0x144>
 8006624:	1cbb      	adds	r3, r7, #2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e13a      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <HAL_TIM_PWM_Start_DMA+0x158>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	223e      	movs	r2, #62	; 0x3e
 800663a:	2102      	movs	r1, #2
 800663c:	5499      	strb	r1, [r3, r2]
 800663e:	e026      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d104      	bne.n	8006650 <HAL_TIM_PWM_Start_DMA+0x168>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	223f      	movs	r2, #63	; 0x3f
 800664a:	2102      	movs	r1, #2
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	e01e      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b08      	cmp	r3, #8
 8006654:	d104      	bne.n	8006660 <HAL_TIM_PWM_Start_DMA+0x178>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	2102      	movs	r1, #2
 800665c:	5499      	strb	r1, [r3, r2]
 800665e:	e016      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b0c      	cmp	r3, #12
 8006664:	d104      	bne.n	8006670 <HAL_TIM_PWM_Start_DMA+0x188>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2241      	movs	r2, #65	; 0x41
 800666a:	2102      	movs	r1, #2
 800666c:	5499      	strb	r1, [r3, r2]
 800666e:	e00e      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b10      	cmp	r3, #16
 8006674:	d104      	bne.n	8006680 <HAL_TIM_PWM_Start_DMA+0x198>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2242      	movs	r2, #66	; 0x42
 800667a:	2102      	movs	r1, #2
 800667c:	5499      	strb	r1, [r3, r2]
 800667e:	e006      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2243      	movs	r2, #67	; 0x43
 8006684:	2102      	movs	r1, #2
 8006686:	5499      	strb	r1, [r3, r2]
 8006688:	e001      	b.n	800668e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e10b      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b0c      	cmp	r3, #12
 8006692:	d100      	bne.n	8006696 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8006694:	e080      	b.n	8006798 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b0c      	cmp	r3, #12
 800669a:	d900      	bls.n	800669e <HAL_TIM_PWM_Start_DMA+0x1b6>
 800669c:	e0a1      	b.n	80067e2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d054      	beq.n	800674e <HAL_TIM_PWM_Start_DMA+0x266>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d900      	bls.n	80066ac <HAL_TIM_PWM_Start_DMA+0x1c4>
 80066aa:	e09a      	b.n	80067e2 <HAL_TIM_PWM_Start_DMA+0x2fa>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_PWM_Start_DMA+0x1d2>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d025      	beq.n	8006704 <HAL_TIM_PWM_Start_DMA+0x21c>
 80066b8:	e093      	b.n	80067e2 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	4a7c      	ldr	r2, [pc, #496]	; (80068b0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	4a7b      	ldr	r2, [pc, #492]	; (80068b4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80066c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	4a7a      	ldr	r2, [pc, #488]	; (80068b8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3334      	adds	r3, #52	; 0x34
 80066de:	001a      	movs	r2, r3
 80066e0:	1cbb      	adds	r3, r7, #2
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	f7ff f86e 	bl	80057c4 <HAL_DMA_Start_IT>
 80066e8:	1e03      	subs	r3, r0, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e0da      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68da      	ldr	r2, [r3, #12]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	0089      	lsls	r1, r1, #2
 80066fe:	430a      	orrs	r2, r1
 8006700:	60da      	str	r2, [r3, #12]
      break;
 8006702:	e073      	b.n	80067ec <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006708:	4a69      	ldr	r2, [pc, #420]	; (80068b0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800670a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	4a68      	ldr	r2, [pc, #416]	; (80068b4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8006712:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	4a67      	ldr	r2, [pc, #412]	; (80068b8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 800671a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	3338      	adds	r3, #56	; 0x38
 8006728:	001a      	movs	r2, r3
 800672a:	1cbb      	adds	r3, r7, #2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	f7ff f849 	bl	80057c4 <HAL_DMA_Start_IT>
 8006732:	1e03      	subs	r3, r0, #0
 8006734:	d001      	beq.n	800673a <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e0b5      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68da      	ldr	r2, [r3, #12]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2180      	movs	r1, #128	; 0x80
 8006746:	00c9      	lsls	r1, r1, #3
 8006748:	430a      	orrs	r2, r1
 800674a:	60da      	str	r2, [r3, #12]
      break;
 800674c:	e04e      	b.n	80067ec <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	4a57      	ldr	r2, [pc, #348]	; (80068b0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8006754:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675a:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800675c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a55      	ldr	r2, [pc, #340]	; (80068b8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8006764:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	333c      	adds	r3, #60	; 0x3c
 8006772:	001a      	movs	r2, r3
 8006774:	1cbb      	adds	r3, r7, #2
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	f7ff f824 	bl	80057c4 <HAL_DMA_Start_IT>
 800677c:	1e03      	subs	r3, r0, #0
 800677e:	d001      	beq.n	8006784 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e090      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2180      	movs	r1, #128	; 0x80
 8006790:	0109      	lsls	r1, r1, #4
 8006792:	430a      	orrs	r2, r1
 8006794:	60da      	str	r2, [r3, #12]
      break;
 8006796:	e029      	b.n	80067ec <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	4a44      	ldr	r2, [pc, #272]	; (80068b0 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800679e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	4a43      	ldr	r2, [pc, #268]	; (80068b4 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 80067a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	4a42      	ldr	r2, [pc, #264]	; (80068b8 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 80067ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80067b4:	6879      	ldr	r1, [r7, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3340      	adds	r3, #64	; 0x40
 80067bc:	001a      	movs	r2, r3
 80067be:	1cbb      	adds	r3, r7, #2
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	f7fe ffff 	bl	80057c4 <HAL_DMA_Start_IT>
 80067c6:	1e03      	subs	r3, r0, #0
 80067c8:	d001      	beq.n	80067ce <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e06b      	b.n	80068a6 <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	0149      	lsls	r1, r1, #5
 80067dc:	430a      	orrs	r2, r1
 80067de:	60da      	str	r2, [r3, #12]
      break;
 80067e0:	e004      	b.n	80067ec <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80067e2:	2317      	movs	r3, #23
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
      break;
 80067ea:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80067ec:	2317      	movs	r3, #23
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d154      	bne.n	80068a0 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68b9      	ldr	r1, [r7, #8]
 80067fc:	2201      	movs	r2, #1
 80067fe:	0018      	movs	r0, r3
 8006800:	f000 fe54 	bl	80074ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d009      	beq.n	8006822 <HAL_TIM_PWM_Start_DMA+0x33a>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d004      	beq.n	8006822 <HAL_TIM_PWM_Start_DMA+0x33a>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_TIM_PWM_Start_DMA+0x33e>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_TIM_PWM_Start_DMA+0x340>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	0209      	lsls	r1, r1, #8
 800683a:	430a      	orrs	r2, r1
 800683c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1e      	ldr	r2, [pc, #120]	; (80068bc <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00a      	beq.n	800685e <HAL_TIM_PWM_Start_DMA+0x376>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	2380      	movs	r3, #128	; 0x80
 800684e:	05db      	lsls	r3, r3, #23
 8006850:	429a      	cmp	r2, r3
 8006852:	d004      	beq.n	800685e <HAL_TIM_PWM_Start_DMA+0x376>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1b      	ldr	r2, [pc, #108]	; (80068c8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d116      	bne.n	800688c <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4a19      	ldr	r2, [pc, #100]	; (80068cc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006866:	4013      	ands	r3, r2
 8006868:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	2b06      	cmp	r3, #6
 800686e:	d016      	beq.n	800689e <HAL_TIM_PWM_Start_DMA+0x3b6>
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	025b      	lsls	r3, r3, #9
 8006876:	429a      	cmp	r2, r3
 8006878:	d011      	beq.n	800689e <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2101      	movs	r1, #1
 8006886:	430a      	orrs	r2, r1
 8006888:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688a:	e008      	b.n	800689e <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2101      	movs	r1, #1
 8006898:	430a      	orrs	r2, r1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e000      	b.n	80068a0 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80068a0:	2317      	movs	r3, #23
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	781b      	ldrb	r3, [r3, #0]
}
 80068a6:	0018      	movs	r0, r3
 80068a8:	46bd      	mov	sp, r7
 80068aa:	b006      	add	sp, #24
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	46c0      	nop			; (mov r8, r8)
 80068b0:	08006d59 	.word	0x08006d59
 80068b4:	08006e03 	.word	0x08006e03
 80068b8:	08006cc5 	.word	0x08006cc5
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800
 80068c8:	40000400 	.word	0x40000400
 80068cc:	00010007 	.word	0x00010007

080068d0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	230f      	movs	r3, #15
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b0c      	cmp	r3, #12
 80068e6:	d039      	beq.n	800695c <HAL_TIM_PWM_Stop_DMA+0x8c>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2b0c      	cmp	r3, #12
 80068ec:	d844      	bhi.n	8006978 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d025      	beq.n	8006940 <HAL_TIM_PWM_Stop_DMA+0x70>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d83e      	bhi.n	8006978 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_TIM_PWM_Stop_DMA+0x38>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b04      	cmp	r3, #4
 8006904:	d00e      	beq.n	8006924 <HAL_TIM_PWM_Stop_DMA+0x54>
 8006906:	e037      	b.n	8006978 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	495a      	ldr	r1, [pc, #360]	; (8006a7c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8006914:	400a      	ands	r2, r1
 8006916:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	0018      	movs	r0, r3
 800691e:	f7fe ffd7 	bl	80058d0 <HAL_DMA_Abort_IT>
      break;
 8006922:	e02e      	b.n	8006982 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4954      	ldr	r1, [pc, #336]	; (8006a80 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8006930:	400a      	ands	r2, r1
 8006932:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	0018      	movs	r0, r3
 800693a:	f7fe ffc9 	bl	80058d0 <HAL_DMA_Abort_IT>
      break;
 800693e:	e020      	b.n	8006982 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	494e      	ldr	r1, [pc, #312]	; (8006a84 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 800694c:	400a      	ands	r2, r1
 800694e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	0018      	movs	r0, r3
 8006956:	f7fe ffbb 	bl	80058d0 <HAL_DMA_Abort_IT>
      break;
 800695a:	e012      	b.n	8006982 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4948      	ldr	r1, [pc, #288]	; (8006a88 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8006968:	400a      	ands	r2, r1
 800696a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	0018      	movs	r0, r3
 8006972:	f7fe ffad 	bl	80058d0 <HAL_DMA_Abort_IT>
      break;
 8006976:	e004      	b.n	8006982 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8006978:	230f      	movs	r3, #15
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006982:	230f      	movs	r3, #15
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d000      	beq.n	800698e <HAL_TIM_PWM_Stop_DMA+0xbe>
 800698c:	e06e      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	2200      	movs	r2, #0
 8006996:	0018      	movs	r0, r3
 8006998:	f000 fd88 	bl	80074ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3a      	ldr	r2, [pc, #232]	; (8006a8c <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d009      	beq.n	80069ba <HAL_TIM_PWM_Stop_DMA+0xea>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a39      	ldr	r2, [pc, #228]	; (8006a90 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d004      	beq.n	80069ba <HAL_TIM_PWM_Stop_DMA+0xea>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a37      	ldr	r2, [pc, #220]	; (8006a94 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d101      	bne.n	80069be <HAL_TIM_PWM_Stop_DMA+0xee>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <HAL_TIM_PWM_Stop_DMA+0xf0>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d013      	beq.n	80069ec <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	4a33      	ldr	r2, [pc, #204]	; (8006a98 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	d10d      	bne.n	80069ec <HAL_TIM_PWM_Stop_DMA+0x11c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	4a31      	ldr	r2, [pc, #196]	; (8006a9c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80069d8:	4013      	ands	r3, r2
 80069da:	d107      	bne.n	80069ec <HAL_TIM_PWM_Stop_DMA+0x11c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	492e      	ldr	r1, [pc, #184]	; (8006aa0 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80069e8:	400a      	ands	r2, r1
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	d10d      	bne.n	8006a14 <HAL_TIM_PWM_Stop_DMA+0x144>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	d107      	bne.n	8006a14 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2101      	movs	r1, #1
 8006a10:	438a      	bics	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	223e      	movs	r2, #62	; 0x3e
 8006a1e:	2101      	movs	r1, #1
 8006a20:	5499      	strb	r1, [r3, r2]
 8006a22:	e023      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d104      	bne.n	8006a34 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	223f      	movs	r2, #63	; 0x3f
 8006a2e:	2101      	movs	r1, #1
 8006a30:	5499      	strb	r1, [r3, r2]
 8006a32:	e01b      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d104      	bne.n	8006a44 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2240      	movs	r2, #64	; 0x40
 8006a3e:	2101      	movs	r1, #1
 8006a40:	5499      	strb	r1, [r3, r2]
 8006a42:	e013      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b0c      	cmp	r3, #12
 8006a48:	d104      	bne.n	8006a54 <HAL_TIM_PWM_Stop_DMA+0x184>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2241      	movs	r2, #65	; 0x41
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]
 8006a52:	e00b      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b10      	cmp	r3, #16
 8006a58:	d104      	bne.n	8006a64 <HAL_TIM_PWM_Stop_DMA+0x194>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2242      	movs	r2, #66	; 0x42
 8006a5e:	2101      	movs	r1, #1
 8006a60:	5499      	strb	r1, [r3, r2]
 8006a62:	e003      	b.n	8006a6c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2243      	movs	r2, #67	; 0x43
 8006a68:	2101      	movs	r1, #1
 8006a6a:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	781b      	ldrb	r3, [r3, #0]
}
 8006a72:	0018      	movs	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b004      	add	sp, #16
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	fffffdff 	.word	0xfffffdff
 8006a80:	fffffbff 	.word	0xfffffbff
 8006a84:	fffff7ff 	.word	0xfffff7ff
 8006a88:	ffffefff 	.word	0xffffefff
 8006a8c:	40012c00 	.word	0x40012c00
 8006a90:	40014400 	.word	0x40014400
 8006a94:	40014800 	.word	0x40014800
 8006a98:	00001111 	.word	0x00001111
 8006a9c:	00000444 	.word	0x00000444
 8006aa0:	ffff7fff 	.word	0xffff7fff

08006aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab0:	2317      	movs	r3, #23
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	223c      	movs	r2, #60	; 0x3c
 8006abc:	5c9b      	ldrb	r3, [r3, r2]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0e5      	b.n	8006c92 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	223c      	movs	r2, #60	; 0x3c
 8006aca:	2101      	movs	r1, #1
 8006acc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b14      	cmp	r3, #20
 8006ad2:	d900      	bls.n	8006ad6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006ad4:	e0d1      	b.n	8006c7a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	009a      	lsls	r2, r3, #2
 8006ada:	4b70      	ldr	r3, [pc, #448]	; (8006c9c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006adc:	18d3      	adds	r3, r2, r3
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0011      	movs	r1, r2
 8006aea:	0018      	movs	r0, r3
 8006aec:	f000 fa42 	bl	8006f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2108      	movs	r1, #8
 8006afc:	430a      	orrs	r2, r1
 8006afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2104      	movs	r1, #4
 8006b0c:	438a      	bics	r2, r1
 8006b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6999      	ldr	r1, [r3, #24]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	619a      	str	r2, [r3, #24]
      break;
 8006b22:	e0af      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	0011      	movs	r1, r2
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f000 faa1 	bl	8007074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	0109      	lsls	r1, r1, #4
 8006b40:	430a      	orrs	r2, r1
 8006b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4954      	ldr	r1, [pc, #336]	; (8006ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b50:	400a      	ands	r2, r1
 8006b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6999      	ldr	r1, [r3, #24]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	021a      	lsls	r2, r3, #8
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	619a      	str	r2, [r3, #24]
      break;
 8006b68:	e08c      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	0011      	movs	r1, r2
 8006b72:	0018      	movs	r0, r3
 8006b74:	f000 fafc 	bl	8007170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69da      	ldr	r2, [r3, #28]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2108      	movs	r1, #8
 8006b84:	430a      	orrs	r2, r1
 8006b86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	69da      	ldr	r2, [r3, #28]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2104      	movs	r1, #4
 8006b94:	438a      	bics	r2, r1
 8006b96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69d9      	ldr	r1, [r3, #28]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	61da      	str	r2, [r3, #28]
      break;
 8006baa:	e06b      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	0011      	movs	r1, r2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fb5d 	bl	8007274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	69da      	ldr	r2, [r3, #28]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	0109      	lsls	r1, r1, #4
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69da      	ldr	r2, [r3, #28]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4932      	ldr	r1, [pc, #200]	; (8006ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006bd8:	400a      	ands	r2, r1
 8006bda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69d9      	ldr	r1, [r3, #28]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	021a      	lsls	r2, r3, #8
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	61da      	str	r2, [r3, #28]
      break;
 8006bf0:	e048      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0011      	movs	r1, r2
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fb9e 	bl	800733c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2108      	movs	r1, #8
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	438a      	bics	r2, r1
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c32:	e027      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	0011      	movs	r1, r2
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	f000 fbd7 	bl	80073f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	0109      	lsls	r1, r1, #4
 8006c50:	430a      	orrs	r2, r1
 8006c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4910      	ldr	r1, [pc, #64]	; (8006ca0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	021a      	lsls	r2, r3, #8
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006c78:	e004      	b.n	8006c84 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006c7a:	2317      	movs	r3, #23
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
      break;
 8006c82:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	223c      	movs	r2, #60	; 0x3c
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]

  return status;
 8006c8c:	2317      	movs	r3, #23
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b006      	add	sp, #24
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	08007e80 	.word	0x08007e80
 8006ca0:	fffffbff 	.word	0xfffffbff

08006ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006cbc:	46c0      	nop			; (mov r8, r8)
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b002      	add	sp, #8
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d107      	bne.n	8006cec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	223e      	movs	r2, #62	; 0x3e
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	5499      	strb	r1, [r3, r2]
 8006cea:	e02a      	b.n	8006d42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d107      	bne.n	8006d06 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	223f      	movs	r2, #63	; 0x3f
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]
 8006d04:	e01d      	b.n	8006d42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d107      	bne.n	8006d20 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2204      	movs	r2, #4
 8006d14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2240      	movs	r2, #64	; 0x40
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]
 8006d1e:	e010      	b.n	8006d42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d107      	bne.n	8006d3a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2241      	movs	r2, #65	; 0x41
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]
 8006d38:	e003      	b.n	8006d42 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	223d      	movs	r2, #61	; 0x3d
 8006d3e:	2101      	movs	r1, #1
 8006d40:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7ff ffb5 	bl	8006cb4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
}
 8006d50:	46c0      	nop			; (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d64:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d10b      	bne.n	8006d88 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d136      	bne.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	223e      	movs	r2, #62	; 0x3e
 8006d82:	2101      	movs	r1, #1
 8006d84:	5499      	strb	r1, [r3, r2]
 8006d86:	e031      	b.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d10b      	bne.n	8006daa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2202      	movs	r2, #2
 8006d96:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d125      	bne.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	223f      	movs	r2, #63	; 0x3f
 8006da4:	2101      	movs	r1, #1
 8006da6:	5499      	strb	r1, [r3, r2]
 8006da8:	e020      	b.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d10b      	bne.n	8006dcc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2204      	movs	r2, #4
 8006db8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d114      	bne.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	5499      	strb	r1, [r3, r2]
 8006dca:	e00f      	b.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d10a      	bne.n	8006dec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2208      	movs	r2, #8
 8006dda:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2241      	movs	r2, #65	; 0x41
 8006de8:	2101      	movs	r1, #1
 8006dea:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f7fe f9ee 	bl	80051d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	771a      	strb	r2, [r3, #28]
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	b004      	add	sp, #16
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d103      	bne.n	8006e22 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	771a      	strb	r2, [r3, #28]
 8006e20:	e019      	b.n	8006e56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d103      	bne.n	8006e34 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	771a      	strb	r2, [r3, #28]
 8006e32:	e010      	b.n	8006e56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d103      	bne.n	8006e46 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2204      	movs	r2, #4
 8006e42:	771a      	strb	r2, [r3, #28]
 8006e44:	e007      	b.n	8006e56 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d102      	bne.n	8006e56 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2208      	movs	r2, #8
 8006e54:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7ff ff23 	bl	8006ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]
}
 8006e64:	46c0      	nop			; (mov r8, r8)
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b004      	add	sp, #16
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a37      	ldr	r2, [pc, #220]	; (8006f5c <TIM_Base_SetConfig+0xf0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d008      	beq.n	8006e96 <TIM_Base_SetConfig+0x2a>
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	2380      	movs	r3, #128	; 0x80
 8006e88:	05db      	lsls	r3, r3, #23
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d003      	beq.n	8006e96 <TIM_Base_SetConfig+0x2a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a33      	ldr	r2, [pc, #204]	; (8006f60 <TIM_Base_SetConfig+0xf4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d108      	bne.n	8006ea8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2270      	movs	r2, #112	; 0x70
 8006e9a:	4393      	bics	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a2c      	ldr	r2, [pc, #176]	; (8006f5c <TIM_Base_SetConfig+0xf0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d014      	beq.n	8006eda <TIM_Base_SetConfig+0x6e>
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	2380      	movs	r3, #128	; 0x80
 8006eb4:	05db      	lsls	r3, r3, #23
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d00f      	beq.n	8006eda <TIM_Base_SetConfig+0x6e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a28      	ldr	r2, [pc, #160]	; (8006f60 <TIM_Base_SetConfig+0xf4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d00b      	beq.n	8006eda <TIM_Base_SetConfig+0x6e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a27      	ldr	r2, [pc, #156]	; (8006f64 <TIM_Base_SetConfig+0xf8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d007      	beq.n	8006eda <TIM_Base_SetConfig+0x6e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a26      	ldr	r2, [pc, #152]	; (8006f68 <TIM_Base_SetConfig+0xfc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d003      	beq.n	8006eda <TIM_Base_SetConfig+0x6e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a25      	ldr	r2, [pc, #148]	; (8006f6c <TIM_Base_SetConfig+0x100>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d108      	bne.n	8006eec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a24      	ldr	r2, [pc, #144]	; (8006f70 <TIM_Base_SetConfig+0x104>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2280      	movs	r2, #128	; 0x80
 8006ef0:	4393      	bics	r3, r2
 8006ef2:	001a      	movs	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <TIM_Base_SetConfig+0xf0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <TIM_Base_SetConfig+0xbe>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <TIM_Base_SetConfig+0xfc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d003      	beq.n	8006f2a <TIM_Base_SetConfig+0xbe>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a11      	ldr	r2, [pc, #68]	; (8006f6c <TIM_Base_SetConfig+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d103      	bne.n	8006f32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	691a      	ldr	r2, [r3, #16]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d106      	bne.n	8006f52 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	4393      	bics	r3, r2
 8006f4c:	001a      	movs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]
  }
}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b004      	add	sp, #16
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	40012c00 	.word	0x40012c00
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40002000 	.word	0x40002000
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800
 8006f70:	fffffcff 	.word	0xfffffcff

08006f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4393      	bics	r3, r2
 8006f8c:	001a      	movs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a2e      	ldr	r2, [pc, #184]	; (800705c <TIM_OC1_SetConfig+0xe8>)
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	4393      	bics	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4393      	bics	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a24      	ldr	r2, [pc, #144]	; (8007060 <TIM_OC1_SetConfig+0xec>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d007      	beq.n	8006fe2 <TIM_OC1_SetConfig+0x6e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	; (8007064 <TIM_OC1_SetConfig+0xf0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d003      	beq.n	8006fe2 <TIM_OC1_SetConfig+0x6e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a22      	ldr	r2, [pc, #136]	; (8007068 <TIM_OC1_SetConfig+0xf4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d10c      	bne.n	8006ffc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	4393      	bics	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	; (8007060 <TIM_OC1_SetConfig+0xec>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d007      	beq.n	8007014 <TIM_OC1_SetConfig+0xa0>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a17      	ldr	r2, [pc, #92]	; (8007064 <TIM_OC1_SetConfig+0xf0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d003      	beq.n	8007014 <TIM_OC1_SetConfig+0xa0>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a16      	ldr	r2, [pc, #88]	; (8007068 <TIM_OC1_SetConfig+0xf4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d111      	bne.n	8007038 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4a15      	ldr	r2, [pc, #84]	; (800706c <TIM_OC1_SetConfig+0xf8>)
 8007018:	4013      	ands	r3, r2
 800701a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	4a14      	ldr	r2, [pc, #80]	; (8007070 <TIM_OC1_SetConfig+0xfc>)
 8007020:	4013      	ands	r3, r2
 8007022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	4313      	orrs	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	621a      	str	r2, [r3, #32]
}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	46bd      	mov	sp, r7
 8007056:	b006      	add	sp, #24
 8007058:	bd80      	pop	{r7, pc}
 800705a:	46c0      	nop			; (mov r8, r8)
 800705c:	fffeff8f 	.word	0xfffeff8f
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40014400 	.word	0x40014400
 8007068:	40014800 	.word	0x40014800
 800706c:	fffffeff 	.word	0xfffffeff
 8007070:	fffffdff 	.word	0xfffffdff

08007074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	2210      	movs	r2, #16
 800708a:	4393      	bics	r3, r2
 800708c:	001a      	movs	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a2c      	ldr	r2, [pc, #176]	; (8007154 <TIM_OC2_SetConfig+0xe0>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a2b      	ldr	r2, [pc, #172]	; (8007158 <TIM_OC2_SetConfig+0xe4>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2220      	movs	r2, #32
 80070be:	4393      	bics	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <TIM_OC2_SetConfig+0xe8>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10d      	bne.n	80070f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2280      	movs	r2, #128	; 0x80
 80070da:	4393      	bics	r3, r2
 80070dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2240      	movs	r2, #64	; 0x40
 80070ee:	4393      	bics	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a19      	ldr	r2, [pc, #100]	; (800715c <TIM_OC2_SetConfig+0xe8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d007      	beq.n	800710a <TIM_OC2_SetConfig+0x96>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <TIM_OC2_SetConfig+0xec>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d003      	beq.n	800710a <TIM_OC2_SetConfig+0x96>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a17      	ldr	r2, [pc, #92]	; (8007164 <TIM_OC2_SetConfig+0xf0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d113      	bne.n	8007132 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <TIM_OC2_SetConfig+0xf4>)
 800710e:	4013      	ands	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4a15      	ldr	r2, [pc, #84]	; (800716c <TIM_OC2_SetConfig+0xf8>)
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	621a      	str	r2, [r3, #32]
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	46bd      	mov	sp, r7
 8007150:	b006      	add	sp, #24
 8007152:	bd80      	pop	{r7, pc}
 8007154:	feff8fff 	.word	0xfeff8fff
 8007158:	fffffcff 	.word	0xfffffcff
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800
 8007168:	fffffbff 	.word	0xfffffbff
 800716c:	fffff7ff 	.word	0xfffff7ff

08007170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	4a31      	ldr	r2, [pc, #196]	; (800724c <TIM_OC3_SetConfig+0xdc>)
 8007186:	401a      	ands	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4a2d      	ldr	r2, [pc, #180]	; (8007250 <TIM_OC3_SetConfig+0xe0>)
 800719c:	4013      	ands	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2203      	movs	r2, #3
 80071a4:	4393      	bics	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	4a27      	ldr	r2, [pc, #156]	; (8007254 <TIM_OC3_SetConfig+0xe4>)
 80071b6:	4013      	ands	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a23      	ldr	r2, [pc, #140]	; (8007258 <TIM_OC3_SetConfig+0xe8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d10d      	bne.n	80071ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4a22      	ldr	r2, [pc, #136]	; (800725c <TIM_OC3_SetConfig+0xec>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	4a1e      	ldr	r2, [pc, #120]	; (8007260 <TIM_OC3_SetConfig+0xf0>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1a      	ldr	r2, [pc, #104]	; (8007258 <TIM_OC3_SetConfig+0xe8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_OC3_SetConfig+0x92>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1b      	ldr	r2, [pc, #108]	; (8007264 <TIM_OC3_SetConfig+0xf4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_OC3_SetConfig+0x92>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1a      	ldr	r2, [pc, #104]	; (8007268 <TIM_OC3_SetConfig+0xf8>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d113      	bne.n	800722a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <TIM_OC3_SetConfig+0xfc>)
 8007206:	4013      	ands	r3, r2
 8007208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4a18      	ldr	r2, [pc, #96]	; (8007270 <TIM_OC3_SetConfig+0x100>)
 800720e:	4013      	ands	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	011b      	lsls	r3, r3, #4
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4313      	orrs	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	621a      	str	r2, [r3, #32]
}
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	46bd      	mov	sp, r7
 8007248:	b006      	add	sp, #24
 800724a:	bd80      	pop	{r7, pc}
 800724c:	fffffeff 	.word	0xfffffeff
 8007250:	fffeff8f 	.word	0xfffeff8f
 8007254:	fffffdff 	.word	0xfffffdff
 8007258:	40012c00 	.word	0x40012c00
 800725c:	fffff7ff 	.word	0xfffff7ff
 8007260:	fffffbff 	.word	0xfffffbff
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800
 800726c:	ffffefff 	.word	0xffffefff
 8007270:	ffffdfff 	.word	0xffffdfff

08007274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	4a24      	ldr	r2, [pc, #144]	; (800731c <TIM_OC4_SetConfig+0xa8>)
 800728a:	401a      	ands	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a20      	ldr	r2, [pc, #128]	; (8007320 <TIM_OC4_SetConfig+0xac>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <TIM_OC4_SetConfig+0xb0>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <TIM_OC4_SetConfig+0xb4>)
 80072bc:	4013      	ands	r3, r2
 80072be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	031b      	lsls	r3, r3, #12
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a17      	ldr	r2, [pc, #92]	; (800732c <TIM_OC4_SetConfig+0xb8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d007      	beq.n	80072e4 <TIM_OC4_SetConfig+0x70>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a16      	ldr	r2, [pc, #88]	; (8007330 <TIM_OC4_SetConfig+0xbc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <TIM_OC4_SetConfig+0x70>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a15      	ldr	r2, [pc, #84]	; (8007334 <TIM_OC4_SetConfig+0xc0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d109      	bne.n	80072f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <TIM_OC4_SetConfig+0xc4>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	019b      	lsls	r3, r3, #6
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	46c0      	nop			; (mov r8, r8)
 8007314:	46bd      	mov	sp, r7
 8007316:	b006      	add	sp, #24
 8007318:	bd80      	pop	{r7, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	ffffefff 	.word	0xffffefff
 8007320:	feff8fff 	.word	0xfeff8fff
 8007324:	fffffcff 	.word	0xfffffcff
 8007328:	ffffdfff 	.word	0xffffdfff
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40014400 	.word	0x40014400
 8007334:	40014800 	.word	0x40014800
 8007338:	ffffbfff 	.word	0xffffbfff

0800733c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	4a21      	ldr	r2, [pc, #132]	; (80073d8 <TIM_OC5_SetConfig+0x9c>)
 8007352:	401a      	ands	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4a1d      	ldr	r2, [pc, #116]	; (80073dc <TIM_OC5_SetConfig+0xa0>)
 8007368:	4013      	ands	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4a19      	ldr	r2, [pc, #100]	; (80073e0 <TIM_OC5_SetConfig+0xa4>)
 800737a:	4013      	ands	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	041b      	lsls	r3, r3, #16
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <TIM_OC5_SetConfig+0xa8>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d007      	beq.n	80073a2 <TIM_OC5_SetConfig+0x66>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <TIM_OC5_SetConfig+0xac>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC5_SetConfig+0x66>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a13      	ldr	r2, [pc, #76]	; (80073ec <TIM_OC5_SetConfig+0xb0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d109      	bne.n	80073b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	4a0c      	ldr	r2, [pc, #48]	; (80073d8 <TIM_OC5_SetConfig+0x9c>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	021b      	lsls	r3, r3, #8
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	621a      	str	r2, [r3, #32]
}
 80073d0:	46c0      	nop			; (mov r8, r8)
 80073d2:	46bd      	mov	sp, r7
 80073d4:	b006      	add	sp, #24
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	fffeffff 	.word	0xfffeffff
 80073dc:	fffeff8f 	.word	0xfffeff8f
 80073e0:	fffdffff 	.word	0xfffdffff
 80073e4:	40012c00 	.word	0x40012c00
 80073e8:	40014400 	.word	0x40014400
 80073ec:	40014800 	.word	0x40014800

080073f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <TIM_OC6_SetConfig+0xa0>)
 8007406:	401a      	ands	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <TIM_OC6_SetConfig+0xa4>)
 800741c:	4013      	ands	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <TIM_OC6_SetConfig+0xa8>)
 8007430:	4013      	ands	r3, r2
 8007432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	051b      	lsls	r3, r3, #20
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a16      	ldr	r2, [pc, #88]	; (800749c <TIM_OC6_SetConfig+0xac>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d007      	beq.n	8007458 <TIM_OC6_SetConfig+0x68>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <TIM_OC6_SetConfig+0xb0>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_OC6_SetConfig+0x68>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a14      	ldr	r2, [pc, #80]	; (80074a4 <TIM_OC6_SetConfig+0xb4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d109      	bne.n	800746c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	4a13      	ldr	r2, [pc, #76]	; (80074a8 <TIM_OC6_SetConfig+0xb8>)
 800745c:	4013      	ands	r3, r2
 800745e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	621a      	str	r2, [r3, #32]
}
 8007486:	46c0      	nop			; (mov r8, r8)
 8007488:	46bd      	mov	sp, r7
 800748a:	b006      	add	sp, #24
 800748c:	bd80      	pop	{r7, pc}
 800748e:	46c0      	nop			; (mov r8, r8)
 8007490:	ffefffff 	.word	0xffefffff
 8007494:	feff8fff 	.word	0xfeff8fff
 8007498:	ffdfffff 	.word	0xffdfffff
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800
 80074a8:	fffbffff 	.word	0xfffbffff

080074ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	221f      	movs	r2, #31
 80074bc:	4013      	ands	r3, r2
 80074be:	2201      	movs	r2, #1
 80074c0:	409a      	lsls	r2, r3
 80074c2:	0013      	movs	r3, r2
 80074c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	43d2      	mvns	r2, r2
 80074ce:	401a      	ands	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1a      	ldr	r2, [r3, #32]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	211f      	movs	r1, #31
 80074dc:	400b      	ands	r3, r1
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	4099      	lsls	r1, r3
 80074e2:	000b      	movs	r3, r1
 80074e4:	431a      	orrs	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b006      	add	sp, #24
 80074f0:	bd80      	pop	{r7, pc}
	...

080074f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	223c      	movs	r2, #60	; 0x3c
 8007502:	5c9b      	ldrb	r3, [r3, r2]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d101      	bne.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007508:	2302      	movs	r3, #2
 800750a:	e050      	b.n	80075ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	223c      	movs	r2, #60	; 0x3c
 8007510:	2101      	movs	r1, #1
 8007512:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	223d      	movs	r2, #61	; 0x3d
 8007518:	2102      	movs	r1, #2
 800751a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a21      	ldr	r2, [pc, #132]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4a20      	ldr	r2, [pc, #128]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800753a:	4013      	ands	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2270      	movs	r2, #112	; 0x70
 800754c:	4393      	bics	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00a      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	05db      	lsls	r3, r3, #23
 8007574:	429a      	cmp	r2, r3
 8007576:	d004      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a10      	ldr	r2, [pc, #64]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10c      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2280      	movs	r2, #128	; 0x80
 8007586:	4393      	bics	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4313      	orrs	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	223d      	movs	r2, #61	; 0x3d
 80075a0:	2101      	movs	r1, #1
 80075a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	223c      	movs	r2, #60	; 0x3c
 80075a8:	2100      	movs	r1, #0
 80075aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b004      	add	sp, #16
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	ff0fffff 	.word	0xff0fffff
 80075c0:	40000400 	.word	0x40000400

080075c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	435b      	muls	r3, r3
 80075d8:	001a      	movs	r2, r3
 80075da:	0013      	movs	r3, r2
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	189b      	adds	r3, r3, r2
 80075e0:	43db      	mvns	r3, r3
 80075e2:	400b      	ands	r3, r1
 80075e4:	001a      	movs	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	435b      	muls	r3, r3
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	434b      	muls	r3, r1
 80075ee:	431a      	orrs	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	601a      	str	r2, [r3, #0]
}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b004      	add	sp, #16
 80075fa:	bd80      	pop	{r7, pc}

080075fc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	43d2      	mvns	r2, r2
 8007610:	401a      	ands	r2, r3
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	434b      	muls	r3, r1
 8007618:	431a      	orrs	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46bd      	mov	sp, r7
 8007622:	b004      	add	sp, #16
 8007624:	bd80      	pop	{r7, pc}

08007626 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	60b9      	str	r1, [r7, #8]
 8007630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6899      	ldr	r1, [r3, #8]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	435b      	muls	r3, r3
 800763a:	001a      	movs	r2, r3
 800763c:	0013      	movs	r3, r2
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	189b      	adds	r3, r3, r2
 8007642:	43db      	mvns	r3, r3
 8007644:	400b      	ands	r3, r1
 8007646:	001a      	movs	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	435b      	muls	r3, r3
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	434b      	muls	r3, r1
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	609a      	str	r2, [r3, #8]
}
 8007656:	46c0      	nop			; (mov r8, r8)
 8007658:	46bd      	mov	sp, r7
 800765a:	b004      	add	sp, #16
 800765c:	bd80      	pop	{r7, pc}

0800765e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68d9      	ldr	r1, [r3, #12]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	435b      	muls	r3, r3
 8007672:	001a      	movs	r2, r3
 8007674:	0013      	movs	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	189b      	adds	r3, r3, r2
 800767a:	43db      	mvns	r3, r3
 800767c:	400b      	ands	r3, r1
 800767e:	001a      	movs	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	435b      	muls	r3, r3
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	434b      	muls	r3, r1
 8007688:	431a      	orrs	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	60da      	str	r2, [r3, #12]
}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b004      	add	sp, #16
 8007694:	bd80      	pop	{r7, pc}

08007696 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a19      	ldr	r1, [r3, #32]
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	435b      	muls	r3, r3
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4353      	muls	r3, r2
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	435a      	muls	r2, r3
 80076b2:	0013      	movs	r3, r2
 80076b4:	011b      	lsls	r3, r3, #4
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	43db      	mvns	r3, r3
 80076ba:	400b      	ands	r3, r1
 80076bc:	001a      	movs	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	435b      	muls	r3, r3
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	434b      	muls	r3, r1
 80076c6:	68b9      	ldr	r1, [r7, #8]
 80076c8:	434b      	muls	r3, r1
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	434b      	muls	r3, r1
 80076ce:	431a      	orrs	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 80076d4:	46c0      	nop			; (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b004      	add	sp, #16
 80076da:	bd80      	pop	{r7, pc}

080076dc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	0a12      	lsrs	r2, r2, #8
 80076f4:	4353      	muls	r3, r2
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0a12      	lsrs	r2, r2, #8
 80076fa:	4353      	muls	r3, r2
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	0a12      	lsrs	r2, r2, #8
 8007700:	435a      	muls	r2, r3
 8007702:	0013      	movs	r3, r2
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	1a9b      	subs	r3, r3, r2
 8007708:	43db      	mvns	r3, r3
 800770a:	400b      	ands	r3, r1
 800770c:	001a      	movs	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	0a09      	lsrs	r1, r1, #8
 8007716:	434b      	muls	r3, r1
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	0a09      	lsrs	r1, r1, #8
 800771c:	434b      	muls	r3, r1
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	0a09      	lsrs	r1, r1, #8
 8007722:	434b      	muls	r3, r1
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	434b      	muls	r3, r1
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b004      	add	sp, #16
 8007734:	bd80      	pop	{r7, pc}

08007736 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8007744:	e047      	b.n	80077d6 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2101      	movs	r1, #1
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4091      	lsls	r1, r2
 8007750:	000a      	movs	r2, r1
 8007752:	4013      	ands	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d039      	beq.n	80077d0 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d003      	beq.n	800776c <LL_GPIO_Init+0x36>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d10d      	bne.n	8007788 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	0018      	movs	r0, r3
 8007776:	f7ff ff56 	bl	8007626 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	0018      	movs	r0, r3
 8007784:	f7ff ff3a 	bl	80075fc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	0018      	movs	r0, r3
 8007792:	f7ff ff64 	bl	800765e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d111      	bne.n	80077c2 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2bff      	cmp	r3, #255	; 0xff
 80077a2:	d807      	bhi.n	80077b4 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	68b9      	ldr	r1, [r7, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	0018      	movs	r0, r3
 80077ae:	f7ff ff72 	bl	8007696 <LL_GPIO_SetAFPin_0_7>
 80077b2:	e006      	b.n	80077c2 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	0018      	movs	r0, r3
 80077be:	f7ff ff8d 	bl	80076dc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f7ff fefa 	bl	80075c4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	40da      	lsrs	r2, r3
 80077de:	1e13      	subs	r3, r2, #0
 80077e0:	d1b1      	bne.n	8007746 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	0018      	movs	r0, r3
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b004      	add	sp, #16
 80077ea:	bd80      	pop	{r7, pc}

080077ec <LL_I2C_Enable>:
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
}
 8007800:	46c0      	nop			; (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	b002      	add	sp, #8
 8007806:	bd80      	pop	{r7, pc}

08007808 <LL_I2C_Disable>:
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2201      	movs	r2, #1
 8007816:	4393      	bics	r3, r2
 8007818:	001a      	movs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	601a      	str	r2, [r3, #0]
}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	46bd      	mov	sp, r7
 8007822:	b002      	add	sp, #8
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <LL_I2C_ConfigFilters>:
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a06      	ldr	r2, [pc, #24]	; (8007854 <LL_I2C_ConfigFilters+0x2c>)
 800783a:	401a      	ands	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0219      	lsls	r1, r3, #8
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	430b      	orrs	r3, r1
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]
}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bd80      	pop	{r7, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	ffffe0ff 	.word	0xffffe0ff

08007858 <LL_I2C_SetOwnAddress1>:
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	0adb      	lsrs	r3, r3, #11
 800786a:	02da      	lsls	r2, r3, #11
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	430b      	orrs	r3, r1
 8007872:	431a      	orrs	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	609a      	str	r2, [r3, #8]
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b004      	add	sp, #16
 800787e:	bd80      	pop	{r7, pc}

08007880 <LL_I2C_EnableOwnAddress1>:
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	0212      	lsls	r2, r2, #8
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	609a      	str	r2, [r3, #8]
}
 8007896:	46c0      	nop			; (mov r8, r8)
 8007898:	46bd      	mov	sp, r7
 800789a:	b002      	add	sp, #8
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <LL_I2C_DisableOwnAddress1>:
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	4a03      	ldr	r2, [pc, #12]	; (80078bc <LL_I2C_DisableOwnAddress1+0x1c>)
 80078ae:	401a      	ands	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	609a      	str	r2, [r3, #8]
}
 80078b4:	46c0      	nop			; (mov r8, r8)
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b002      	add	sp, #8
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	ffff7fff 	.word	0xffff7fff

080078c0 <LL_I2C_SetTiming>:
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	611a      	str	r2, [r3, #16]
}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <LL_I2C_SetMode>:
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a05      	ldr	r2, [pc, #20]	; (80078fc <LL_I2C_SetMode+0x24>)
 80078e8:	401a      	ands	r2, r3
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	601a      	str	r2, [r3, #0]
}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	ffcfffff 	.word	0xffcfffff

08007900 <LL_I2C_AcknowledgeNextData>:
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	4a05      	ldr	r2, [pc, #20]	; (8007924 <LL_I2C_AcknowledgeNextData+0x24>)
 8007910:	401a      	ands	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	46bd      	mov	sp, r7
 800791e:	b002      	add	sp, #8
 8007920:	bd80      	pop	{r7, pc}
 8007922:	46c0      	nop			; (mov r8, r8)
 8007924:	ffff7fff 	.word	0xffff7fff

08007928 <LL_APB1_GRP1_ForceReset>:
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBRSTR1, Periphs);
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <LL_APB1_GRP1_ForceReset+0x1c>)
 8007932:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007934:	4b03      	ldr	r3, [pc, #12]	; (8007944 <LL_APB1_GRP1_ForceReset+0x1c>)
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	430a      	orrs	r2, r1
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	46bd      	mov	sp, r7
 8007940:	b002      	add	sp, #8
 8007942:	bd80      	pop	{r7, pc}
 8007944:	40021000 	.word	0x40021000

08007948 <LL_APB1_GRP1_ReleaseReset>:
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBRSTR1, Periphs);
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <LL_APB1_GRP1_ReleaseReset+0x20>)
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	43d9      	mvns	r1, r3
 8007958:	4b03      	ldr	r3, [pc, #12]	; (8007968 <LL_APB1_GRP1_ReleaseReset+0x20>)
 800795a:	400a      	ands	r2, r1
 800795c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800795e:	46c0      	nop			; (mov r8, r8)
 8007960:	46bd      	mov	sp, r7
 8007962:	b002      	add	sp, #8
 8007964:	bd80      	pop	{r7, pc}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	40021000 	.word	0x40021000

0800796c <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are de-initialized
  *          - ERROR: I2C registers are not de-initialized
  */
ErrorStatus LL_I2C_DeInit(const I2C_TypeDef *I2Cx)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8007974:	230f      	movs	r3, #15
 8007976:	18fb      	adds	r3, r7, r3
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <LL_I2C_DeInit+0x64>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d10a      	bne.n	800799a <LL_I2C_DeInit+0x2e>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	039b      	lsls	r3, r3, #14
 8007988:	0018      	movs	r0, r3
 800798a:	f7ff ffcd 	bl	8007928 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 800798e:	2380      	movs	r3, #128	; 0x80
 8007990:	039b      	lsls	r3, r3, #14
 8007992:	0018      	movs	r0, r3
 8007994:	f7ff ffd8 	bl	8007948 <LL_APB1_GRP1_ReleaseReset>
 8007998:	e012      	b.n	80079c0 <LL_I2C_DeInit+0x54>
  }
  else if (I2Cx == I2C2)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a0d      	ldr	r2, [pc, #52]	; (80079d4 <LL_I2C_DeInit+0x68>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d10a      	bne.n	80079b8 <LL_I2C_DeInit+0x4c>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	03db      	lsls	r3, r3, #15
 80079a6:	0018      	movs	r0, r3
 80079a8:	f7ff ffbe 	bl	8007928 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 80079ac:	2380      	movs	r3, #128	; 0x80
 80079ae:	03db      	lsls	r3, r3, #15
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7ff ffc9 	bl	8007948 <LL_APB1_GRP1_ReleaseReset>
 80079b6:	e003      	b.n	80079c0 <LL_I2C_DeInit+0x54>
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
  }
#endif /* I2C3 */
  else
  {
    status = ERROR;
 80079b8:	230f      	movs	r3, #15
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	2201      	movs	r2, #1
 80079be:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80079c0:	230f      	movs	r3, #15
 80079c2:	18fb      	adds	r3, r7, r3
 80079c4:	781b      	ldrb	r3, [r3, #0]
}
 80079c6:	0018      	movs	r0, r3
 80079c8:	46bd      	mov	sp, r7
 80079ca:	b004      	add	sp, #16
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	40005400 	.word	0x40005400
 80079d4:	40005800 	.word	0x40005800

080079d8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7ff ff0f 	bl	8007808 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6899      	ldr	r1, [r3, #8]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7ff ff17 	bl	8007828 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	0011      	movs	r1, r2
 8007a02:	0018      	movs	r0, r3
 8007a04:	f7ff ff5c 	bl	80078c0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff feee 	bl	80077ec <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	0018      	movs	r0, r3
 8007a14:	f7ff ff44 	bl	80078a0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	6919      	ldr	r1, [r3, #16]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	0018      	movs	r0, r3
 8007a24:	f7ff ff18 	bl	8007858 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <LL_I2C_Init+0x60>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7ff ff24 	bl	8007880 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	0011      	movs	r1, r2
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7ff ff49 	bl	80078d8 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0011      	movs	r1, r2
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f7ff ff56 	bl	8007900 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b002      	add	sp, #8
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007a68:	4b03      	ldr	r3, [pc, #12]	; (8007a78 <LL_SetSystemCoreClock+0x18>)
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	601a      	str	r2, [r3, #0]
}
 8007a6e:	46c0      	nop			; (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b002      	add	sp, #8
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	20000004 	.word	0x20000004

08007a7c <calloc>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <calloc+0x10>)
 8007a80:	000a      	movs	r2, r1
 8007a82:	0001      	movs	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 f852 	bl	8007b2e <_calloc_r>
 8007a8a:	bd10      	pop	{r4, pc}
 8007a8c:	20000010 	.word	0x20000010

08007a90 <__errno>:
 8007a90:	4b01      	ldr	r3, [pc, #4]	; (8007a98 <__errno+0x8>)
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	4770      	bx	lr
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	20000010 	.word	0x20000010

08007a9c <__libc_init_array>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	2600      	movs	r6, #0
 8007aa0:	4d0c      	ldr	r5, [pc, #48]	; (8007ad4 <__libc_init_array+0x38>)
 8007aa2:	4c0d      	ldr	r4, [pc, #52]	; (8007ad8 <__libc_init_array+0x3c>)
 8007aa4:	1b64      	subs	r4, r4, r5
 8007aa6:	10a4      	asrs	r4, r4, #2
 8007aa8:	42a6      	cmp	r6, r4
 8007aaa:	d109      	bne.n	8007ac0 <__libc_init_array+0x24>
 8007aac:	2600      	movs	r6, #0
 8007aae:	f000 f971 	bl	8007d94 <_init>
 8007ab2:	4d0a      	ldr	r5, [pc, #40]	; (8007adc <__libc_init_array+0x40>)
 8007ab4:	4c0a      	ldr	r4, [pc, #40]	; (8007ae0 <__libc_init_array+0x44>)
 8007ab6:	1b64      	subs	r4, r4, r5
 8007ab8:	10a4      	asrs	r4, r4, #2
 8007aba:	42a6      	cmp	r6, r4
 8007abc:	d105      	bne.n	8007aca <__libc_init_array+0x2e>
 8007abe:	bd70      	pop	{r4, r5, r6, pc}
 8007ac0:	00b3      	lsls	r3, r6, #2
 8007ac2:	58eb      	ldr	r3, [r5, r3]
 8007ac4:	4798      	blx	r3
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	e7ee      	b.n	8007aa8 <__libc_init_array+0xc>
 8007aca:	00b3      	lsls	r3, r6, #2
 8007acc:	58eb      	ldr	r3, [r5, r3]
 8007ace:	4798      	blx	r3
 8007ad0:	3601      	adds	r6, #1
 8007ad2:	e7f2      	b.n	8007aba <__libc_init_array+0x1e>
 8007ad4:	08007ed4 	.word	0x08007ed4
 8007ad8:	08007ed4 	.word	0x08007ed4
 8007adc:	08007ed4 	.word	0x08007ed4
 8007ae0:	08007ed8 	.word	0x08007ed8

08007ae4 <malloc>:
 8007ae4:	b510      	push	{r4, lr}
 8007ae6:	4b03      	ldr	r3, [pc, #12]	; (8007af4 <malloc+0x10>)
 8007ae8:	0001      	movs	r1, r0
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	f000 f8b8 	bl	8007c60 <_malloc_r>
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	20000010 	.word	0x20000010

08007af8 <free>:
 8007af8:	b510      	push	{r4, lr}
 8007afa:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <free+0x10>)
 8007afc:	0001      	movs	r1, r0
 8007afe:	6818      	ldr	r0, [r3, #0]
 8007b00:	f000 f842 	bl	8007b88 <_free_r>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	20000010 	.word	0x20000010

08007b0c <memcpy>:
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d100      	bne.n	8007b16 <memcpy+0xa>
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	5ccc      	ldrb	r4, [r1, r3]
 8007b18:	54c4      	strb	r4, [r0, r3]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	e7f8      	b.n	8007b10 <memcpy+0x4>

08007b1e <memset>:
 8007b1e:	0003      	movs	r3, r0
 8007b20:	1882      	adds	r2, r0, r2
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d100      	bne.n	8007b28 <memset+0xa>
 8007b26:	4770      	bx	lr
 8007b28:	7019      	strb	r1, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	e7f9      	b.n	8007b22 <memset+0x4>

08007b2e <_calloc_r>:
 8007b2e:	b570      	push	{r4, r5, r6, lr}
 8007b30:	0c13      	lsrs	r3, r2, #16
 8007b32:	0c0d      	lsrs	r5, r1, #16
 8007b34:	d11e      	bne.n	8007b74 <_calloc_r+0x46>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10c      	bne.n	8007b54 <_calloc_r+0x26>
 8007b3a:	b289      	uxth	r1, r1
 8007b3c:	b294      	uxth	r4, r2
 8007b3e:	434c      	muls	r4, r1
 8007b40:	0021      	movs	r1, r4
 8007b42:	f000 f88d 	bl	8007c60 <_malloc_r>
 8007b46:	1e05      	subs	r5, r0, #0
 8007b48:	d01b      	beq.n	8007b82 <_calloc_r+0x54>
 8007b4a:	0022      	movs	r2, r4
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f7ff ffe6 	bl	8007b1e <memset>
 8007b52:	e016      	b.n	8007b82 <_calloc_r+0x54>
 8007b54:	1c1d      	adds	r5, r3, #0
 8007b56:	1c0b      	adds	r3, r1, #0
 8007b58:	b292      	uxth	r2, r2
 8007b5a:	b289      	uxth	r1, r1
 8007b5c:	b29c      	uxth	r4, r3
 8007b5e:	4351      	muls	r1, r2
 8007b60:	b2ab      	uxth	r3, r5
 8007b62:	4363      	muls	r3, r4
 8007b64:	0c0c      	lsrs	r4, r1, #16
 8007b66:	191c      	adds	r4, r3, r4
 8007b68:	0c22      	lsrs	r2, r4, #16
 8007b6a:	d107      	bne.n	8007b7c <_calloc_r+0x4e>
 8007b6c:	0424      	lsls	r4, r4, #16
 8007b6e:	b289      	uxth	r1, r1
 8007b70:	430c      	orrs	r4, r1
 8007b72:	e7e5      	b.n	8007b40 <_calloc_r+0x12>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <_calloc_r+0x4e>
 8007b78:	1c13      	adds	r3, r2, #0
 8007b7a:	e7ed      	b.n	8007b58 <_calloc_r+0x2a>
 8007b7c:	230c      	movs	r3, #12
 8007b7e:	2500      	movs	r5, #0
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	0028      	movs	r0, r5
 8007b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b88 <_free_r>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	0005      	movs	r5, r0
 8007b8c:	2900      	cmp	r1, #0
 8007b8e:	d010      	beq.n	8007bb2 <_free_r+0x2a>
 8007b90:	1f0c      	subs	r4, r1, #4
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	da00      	bge.n	8007b9a <_free_r+0x12>
 8007b98:	18e4      	adds	r4, r4, r3
 8007b9a:	0028      	movs	r0, r5
 8007b9c:	f000 f8e8 	bl	8007d70 <__malloc_lock>
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <_free_r+0x90>)
 8007ba2:	6813      	ldr	r3, [r2, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d105      	bne.n	8007bb4 <_free_r+0x2c>
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	6014      	str	r4, [r2, #0]
 8007bac:	0028      	movs	r0, r5
 8007bae:	f000 f8e7 	bl	8007d80 <__malloc_unlock>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	42a3      	cmp	r3, r4
 8007bb6:	d908      	bls.n	8007bca <_free_r+0x42>
 8007bb8:	6821      	ldr	r1, [r4, #0]
 8007bba:	1860      	adds	r0, r4, r1
 8007bbc:	4283      	cmp	r3, r0
 8007bbe:	d1f3      	bne.n	8007ba8 <_free_r+0x20>
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	1841      	adds	r1, r0, r1
 8007bc6:	6021      	str	r1, [r4, #0]
 8007bc8:	e7ee      	b.n	8007ba8 <_free_r+0x20>
 8007bca:	001a      	movs	r2, r3
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <_free_r+0x4e>
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	d9f9      	bls.n	8007bca <_free_r+0x42>
 8007bd6:	6811      	ldr	r1, [r2, #0]
 8007bd8:	1850      	adds	r0, r2, r1
 8007bda:	42a0      	cmp	r0, r4
 8007bdc:	d10b      	bne.n	8007bf6 <_free_r+0x6e>
 8007bde:	6820      	ldr	r0, [r4, #0]
 8007be0:	1809      	adds	r1, r1, r0
 8007be2:	1850      	adds	r0, r2, r1
 8007be4:	6011      	str	r1, [r2, #0]
 8007be6:	4283      	cmp	r3, r0
 8007be8:	d1e0      	bne.n	8007bac <_free_r+0x24>
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	1841      	adds	r1, r0, r1
 8007bf0:	6011      	str	r1, [r2, #0]
 8007bf2:	6053      	str	r3, [r2, #4]
 8007bf4:	e7da      	b.n	8007bac <_free_r+0x24>
 8007bf6:	42a0      	cmp	r0, r4
 8007bf8:	d902      	bls.n	8007c00 <_free_r+0x78>
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	602b      	str	r3, [r5, #0]
 8007bfe:	e7d5      	b.n	8007bac <_free_r+0x24>
 8007c00:	6821      	ldr	r1, [r4, #0]
 8007c02:	1860      	adds	r0, r4, r1
 8007c04:	4283      	cmp	r3, r0
 8007c06:	d103      	bne.n	8007c10 <_free_r+0x88>
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	1841      	adds	r1, r0, r1
 8007c0e:	6021      	str	r1, [r4, #0]
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	6054      	str	r4, [r2, #4]
 8007c14:	e7ca      	b.n	8007bac <_free_r+0x24>
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	20000a0c 	.word	0x20000a0c

08007c1c <sbrk_aligned>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	4e0f      	ldr	r6, [pc, #60]	; (8007c5c <sbrk_aligned+0x40>)
 8007c20:	000d      	movs	r5, r1
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	0004      	movs	r4, r0
 8007c26:	2900      	cmp	r1, #0
 8007c28:	d102      	bne.n	8007c30 <sbrk_aligned+0x14>
 8007c2a:	f000 f88f 	bl	8007d4c <_sbrk_r>
 8007c2e:	6030      	str	r0, [r6, #0]
 8007c30:	0029      	movs	r1, r5
 8007c32:	0020      	movs	r0, r4
 8007c34:	f000 f88a 	bl	8007d4c <_sbrk_r>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d00a      	beq.n	8007c52 <sbrk_aligned+0x36>
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	1cc5      	adds	r5, r0, #3
 8007c40:	439d      	bics	r5, r3
 8007c42:	42a8      	cmp	r0, r5
 8007c44:	d007      	beq.n	8007c56 <sbrk_aligned+0x3a>
 8007c46:	1a29      	subs	r1, r5, r0
 8007c48:	0020      	movs	r0, r4
 8007c4a:	f000 f87f 	bl	8007d4c <_sbrk_r>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d101      	bne.n	8007c56 <sbrk_aligned+0x3a>
 8007c52:	2501      	movs	r5, #1
 8007c54:	426d      	negs	r5, r5
 8007c56:	0028      	movs	r0, r5
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	20000a10 	.word	0x20000a10

08007c60 <_malloc_r>:
 8007c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c62:	2203      	movs	r2, #3
 8007c64:	1ccb      	adds	r3, r1, #3
 8007c66:	4393      	bics	r3, r2
 8007c68:	3308      	adds	r3, #8
 8007c6a:	0006      	movs	r6, r0
 8007c6c:	001f      	movs	r7, r3
 8007c6e:	2b0c      	cmp	r3, #12
 8007c70:	d232      	bcs.n	8007cd8 <_malloc_r+0x78>
 8007c72:	270c      	movs	r7, #12
 8007c74:	42b9      	cmp	r1, r7
 8007c76:	d831      	bhi.n	8007cdc <_malloc_r+0x7c>
 8007c78:	0030      	movs	r0, r6
 8007c7a:	f000 f879 	bl	8007d70 <__malloc_lock>
 8007c7e:	4d32      	ldr	r5, [pc, #200]	; (8007d48 <_malloc_r+0xe8>)
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	001c      	movs	r4, r3
 8007c84:	2c00      	cmp	r4, #0
 8007c86:	d12e      	bne.n	8007ce6 <_malloc_r+0x86>
 8007c88:	0039      	movs	r1, r7
 8007c8a:	0030      	movs	r0, r6
 8007c8c:	f7ff ffc6 	bl	8007c1c <sbrk_aligned>
 8007c90:	0004      	movs	r4, r0
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d11e      	bne.n	8007cd4 <_malloc_r+0x74>
 8007c96:	682c      	ldr	r4, [r5, #0]
 8007c98:	0025      	movs	r5, r4
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	d14a      	bne.n	8007d34 <_malloc_r+0xd4>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0029      	movs	r1, r5
 8007ca2:	18e3      	adds	r3, r4, r3
 8007ca4:	0030      	movs	r0, r6
 8007ca6:	9301      	str	r3, [sp, #4]
 8007ca8:	f000 f850 	bl	8007d4c <_sbrk_r>
 8007cac:	9b01      	ldr	r3, [sp, #4]
 8007cae:	4283      	cmp	r3, r0
 8007cb0:	d143      	bne.n	8007d3a <_malloc_r+0xda>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	3703      	adds	r7, #3
 8007cb6:	1aff      	subs	r7, r7, r3
 8007cb8:	2303      	movs	r3, #3
 8007cba:	439f      	bics	r7, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	2f0c      	cmp	r7, #12
 8007cc0:	d200      	bcs.n	8007cc4 <_malloc_r+0x64>
 8007cc2:	270c      	movs	r7, #12
 8007cc4:	0039      	movs	r1, r7
 8007cc6:	0030      	movs	r0, r6
 8007cc8:	f7ff ffa8 	bl	8007c1c <sbrk_aligned>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d034      	beq.n	8007d3a <_malloc_r+0xda>
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	19df      	adds	r7, r3, r7
 8007cd4:	6027      	str	r7, [r4, #0]
 8007cd6:	e013      	b.n	8007d00 <_malloc_r+0xa0>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	dacb      	bge.n	8007c74 <_malloc_r+0x14>
 8007cdc:	230c      	movs	r3, #12
 8007cde:	2500      	movs	r5, #0
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	1bd1      	subs	r1, r2, r7
 8007cea:	d420      	bmi.n	8007d2e <_malloc_r+0xce>
 8007cec:	290b      	cmp	r1, #11
 8007cee:	d917      	bls.n	8007d20 <_malloc_r+0xc0>
 8007cf0:	19e2      	adds	r2, r4, r7
 8007cf2:	6027      	str	r7, [r4, #0]
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d111      	bne.n	8007d1c <_malloc_r+0xbc>
 8007cf8:	602a      	str	r2, [r5, #0]
 8007cfa:	6863      	ldr	r3, [r4, #4]
 8007cfc:	6011      	str	r1, [r2, #0]
 8007cfe:	6053      	str	r3, [r2, #4]
 8007d00:	0030      	movs	r0, r6
 8007d02:	0025      	movs	r5, r4
 8007d04:	f000 f83c 	bl	8007d80 <__malloc_unlock>
 8007d08:	2207      	movs	r2, #7
 8007d0a:	350b      	adds	r5, #11
 8007d0c:	1d23      	adds	r3, r4, #4
 8007d0e:	4395      	bics	r5, r2
 8007d10:	1aea      	subs	r2, r5, r3
 8007d12:	429d      	cmp	r5, r3
 8007d14:	d0e5      	beq.n	8007ce2 <_malloc_r+0x82>
 8007d16:	1b5b      	subs	r3, r3, r5
 8007d18:	50a3      	str	r3, [r4, r2]
 8007d1a:	e7e2      	b.n	8007ce2 <_malloc_r+0x82>
 8007d1c:	605a      	str	r2, [r3, #4]
 8007d1e:	e7ec      	b.n	8007cfa <_malloc_r+0x9a>
 8007d20:	6862      	ldr	r2, [r4, #4]
 8007d22:	42a3      	cmp	r3, r4
 8007d24:	d101      	bne.n	8007d2a <_malloc_r+0xca>
 8007d26:	602a      	str	r2, [r5, #0]
 8007d28:	e7ea      	b.n	8007d00 <_malloc_r+0xa0>
 8007d2a:	605a      	str	r2, [r3, #4]
 8007d2c:	e7e8      	b.n	8007d00 <_malloc_r+0xa0>
 8007d2e:	0023      	movs	r3, r4
 8007d30:	6864      	ldr	r4, [r4, #4]
 8007d32:	e7a7      	b.n	8007c84 <_malloc_r+0x24>
 8007d34:	002c      	movs	r4, r5
 8007d36:	686d      	ldr	r5, [r5, #4]
 8007d38:	e7af      	b.n	8007c9a <_malloc_r+0x3a>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	0030      	movs	r0, r6
 8007d3e:	6033      	str	r3, [r6, #0]
 8007d40:	f000 f81e 	bl	8007d80 <__malloc_unlock>
 8007d44:	e7cd      	b.n	8007ce2 <_malloc_r+0x82>
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	20000a0c 	.word	0x20000a0c

08007d4c <_sbrk_r>:
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	b570      	push	{r4, r5, r6, lr}
 8007d50:	4d06      	ldr	r5, [pc, #24]	; (8007d6c <_sbrk_r+0x20>)
 8007d52:	0004      	movs	r4, r0
 8007d54:	0008      	movs	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7fc fdda 	bl	8004910 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d103      	bne.n	8007d68 <_sbrk_r+0x1c>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d000      	beq.n	8007d68 <_sbrk_r+0x1c>
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	20000a14 	.word	0x20000a14

08007d70 <__malloc_lock>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	4802      	ldr	r0, [pc, #8]	; (8007d7c <__malloc_lock+0xc>)
 8007d74:	f000 f80c 	bl	8007d90 <__retarget_lock_acquire_recursive>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	20000a18 	.word	0x20000a18

08007d80 <__malloc_unlock>:
 8007d80:	b510      	push	{r4, lr}
 8007d82:	4802      	ldr	r0, [pc, #8]	; (8007d8c <__malloc_unlock+0xc>)
 8007d84:	f000 f805 	bl	8007d92 <__retarget_lock_release_recursive>
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	20000a18 	.word	0x20000a18

08007d90 <__retarget_lock_acquire_recursive>:
 8007d90:	4770      	bx	lr

08007d92 <__retarget_lock_release_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <_init>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	46c0      	nop			; (mov r8, r8)
 8007d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9a:	bc08      	pop	{r3}
 8007d9c:	469e      	mov	lr, r3
 8007d9e:	4770      	bx	lr

08007da0 <_fini>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr
 8007dac:	0000      	movs	r0, r0
	...

08007db0 <__FLASH_Program_Fast_veneer>:
 8007db0:	b401      	push	{r0}
 8007db2:	4802      	ldr	r0, [pc, #8]	; (8007dbc <__FLASH_Program_Fast_veneer+0xc>)
 8007db4:	4684      	mov	ip, r0
 8007db6:	bc01      	pop	{r0}
 8007db8:	4760      	bx	ip
 8007dba:	bf00      	nop
 8007dbc:	20000075 	.word	0x20000075

Disassembly of section .data:

20000000 <fm_version>:
20000000:	00000001                                ....

20000004 <SystemCoreClock>:
20000004:	00f42400                                .$..

20000008 <uwTickPrio>:
20000008:	00000004                                ....

2000000c <uwTickFreq>:
2000000c:	00000001                                ....

20000010 <_impure_ptr>:
20000010:	20000014                                ... 

20000014 <impure_data>:
	...

20000074 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000074:	b580      	push	{r7, lr}
20000076:	b088      	sub	sp, #32
20000078:	af00      	add	r7, sp, #0
2000007a:	6078      	str	r0, [r7, #4]
2000007c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000007e:	231f      	movs	r3, #31
20000080:	18fb      	adds	r3, r7, r3
20000082:	2200      	movs	r2, #0
20000084:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000008a:	683b      	ldr	r3, [r7, #0]
2000008c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008e:	4b1a      	ldr	r3, [pc, #104]	; (200000f8 <FLASH_Program_Fast+0x84>)
20000090:	695a      	ldr	r2, [r3, #20]
20000092:	4b19      	ldr	r3, [pc, #100]	; (200000f8 <FLASH_Program_Fast+0x84>)
20000094:	2180      	movs	r1, #128	; 0x80
20000096:	02c9      	lsls	r1, r1, #11
20000098:	430a      	orrs	r2, r1
2000009a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000009c:	f3ef 8310 	mrs	r3, PRIMASK
200000a0:	60fb      	str	r3, [r7, #12]
  return(result);
200000a2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a6:	b672      	cpsid	i
}
200000a8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000aa:	e00f      	b.n	200000cc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000ac:	697a      	ldr	r2, [r7, #20]
200000ae:	69bb      	ldr	r3, [r7, #24]
200000b0:	6812      	ldr	r2, [r2, #0]
200000b2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000b4:	697b      	ldr	r3, [r7, #20]
200000b6:	3304      	adds	r3, #4
200000b8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ba:	69bb      	ldr	r3, [r7, #24]
200000bc:	3304      	adds	r3, #4
200000be:	61bb      	str	r3, [r7, #24]
    index++;
200000c0:	211f      	movs	r1, #31
200000c2:	187b      	adds	r3, r7, r1
200000c4:	781a      	ldrb	r2, [r3, #0]
200000c6:	187b      	adds	r3, r7, r1
200000c8:	3201      	adds	r2, #1
200000ca:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000cc:	231f      	movs	r3, #31
200000ce:	18fb      	adds	r3, r7, r3
200000d0:	781b      	ldrb	r3, [r3, #0]
200000d2:	2b3f      	cmp	r3, #63	; 0x3f
200000d4:	d9ea      	bls.n	200000ac <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000d6:	46c0      	nop			; (mov r8, r8)
200000d8:	4b07      	ldr	r3, [pc, #28]	; (200000f8 <FLASH_Program_Fast+0x84>)
200000da:	691a      	ldr	r2, [r3, #16]
200000dc:	2380      	movs	r3, #128	; 0x80
200000de:	025b      	lsls	r3, r3, #9
200000e0:	4013      	ands	r3, r2
200000e2:	d1f9      	bne.n	200000d8 <FLASH_Program_Fast+0x64>
200000e4:	693b      	ldr	r3, [r7, #16]
200000e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000e8:	68bb      	ldr	r3, [r7, #8]
200000ea:	f383 8810 	msr	PRIMASK, r3
}
200000ee:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000f0:	46c0      	nop			; (mov r8, r8)
200000f2:	46bd      	mov	sp, r7
200000f4:	b008      	add	sp, #32
200000f6:	bd80      	pop	{r7, pc}
200000f8:	40022000 	.word	0x40022000
